/*
 * generated by Xtext 2.15.0
 */
package de.tudresden.inf.st.bigraphs.dsl.tests

import com.google.inject.Inject
import de.tudresden.inf.st.bigraphs.models.bigraphBaseModel.BBigraph
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import de.tudresden.inf.st.bigraphs.dsl.bDSL.BRSModel
import de.tudresden.inf.st.bigraphs.dsl.bDSL.AbstractElement
import org.eclipse.emf.common.util.EList
import de.tudresden.inf.st.bigraphs.dsl.bDSL.LocalVarDecl
import de.tudresden.inf.st.bigraphs.dsl.bDSL.impl.LocalVarDeclImpl

@ExtendWith(InjectionExtension)
@InjectWith(BDSLInjectorProvider)
class BDSLParsingTest {
	@Inject
	ParseHelper<BRSModel> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
signature sig1 {
	ctrl a1 arity 1;
	ctrl a2 arity 1;
}

signature sig2 {
	ctrl a arity 1;
	ctrl big0 arity 2;
}

var big0(sig1) = a1;
var big1(sig1) = a1 + a1 + a2 + $big0;
var big2(sig2) = a + big0["c", "a"];
«««var big2(sig1) = big1 * big2 + big1;
«««var big3(sig1) = sig1.a;
		''')
		Assertions.assertNotNull(result)
//		val expr = result.statements
//		val errors = result.eResource.errors
//		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
//		println(result.signature)
//		val LocalVarDeclImpl stmt1 = expr.get(0) as LocalVarDeclImpl
//		println(stmt1.sig)
//		println(stmt1.sig.controls)
//var a(s1) = s1.a["a"] * s1.a * s2.a["b","b"] * s1.b;	

	}
}
