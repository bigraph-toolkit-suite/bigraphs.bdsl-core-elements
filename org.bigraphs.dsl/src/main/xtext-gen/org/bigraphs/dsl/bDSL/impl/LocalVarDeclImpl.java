/**
 * generated by Xtext 2.32.0
 */
package org.bigraphs.dsl.bDSL.impl;

import java.util.Collection;

import org.bigraphs.dsl.bDSL.AbstractBigraphDeclaration;
import org.bigraphs.dsl.bDSL.BDSLBigraphDefinition;
import org.bigraphs.dsl.bDSL.BDSLPackage;
import org.bigraphs.dsl.bDSL.BigraphExpression;
import org.bigraphs.dsl.bDSL.BigraphVarDeclOrReference;
import org.bigraphs.dsl.bDSL.ControlVariable;
import org.bigraphs.dsl.bDSL.LocalVarDecl;
import org.bigraphs.dsl.bDSL.SiteVars;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Local Var Decl</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.bigraphs.dsl.bDSL.impl.LocalVarDeclImpl#getDefinition <em>Definition</em>}</li>
 *   <li>{@link org.bigraphs.dsl.bDSL.impl.LocalVarDeclImpl#getSiteArgs <em>Site Args</em>}</li>
 *   <li>{@link org.bigraphs.dsl.bDSL.impl.LocalVarDeclImpl#getControlType <em>Control Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LocalVarDeclImpl extends AbstractNamedSignatureElementImpl implements LocalVarDecl
{
  /**
   * The cached value of the '{@link #getDefinition() <em>Definition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefinition()
   * @generated
   * @ordered
   */
  protected EList<BigraphExpression> definition;

  /**
   * The cached value of the '{@link #getSiteArgs() <em>Site Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSiteArgs()
   * @generated
   * @ordered
   */
  protected EList<SiteVars> siteArgs;

  /**
   * The cached value of the '{@link #getControlType() <em>Control Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getControlType()
   * @generated
   * @ordered
   */
  protected ControlVariable controlType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LocalVarDeclImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BDSLPackage.Literals.LOCAL_VAR_DECL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BigraphExpression> getDefinition()
  {
    if (definition == null)
    {
      definition = new EObjectContainmentEList<BigraphExpression>(BigraphExpression.class, this, BDSLPackage.LOCAL_VAR_DECL__DEFINITION);
    }
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SiteVars> getSiteArgs()
  {
    if (siteArgs == null)
    {
      siteArgs = new EObjectContainmentEList<SiteVars>(SiteVars.class, this, BDSLPackage.LOCAL_VAR_DECL__SITE_ARGS);
    }
    return siteArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ControlVariable getControlType()
  {
    if (controlType != null && controlType.eIsProxy())
    {
      InternalEObject oldControlType = (InternalEObject)controlType;
      controlType = (ControlVariable)eResolveProxy(oldControlType);
      if (controlType != oldControlType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BDSLPackage.LOCAL_VAR_DECL__CONTROL_TYPE, oldControlType, controlType));
      }
    }
    return controlType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ControlVariable basicGetControlType()
  {
    return controlType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setControlType(ControlVariable newControlType)
  {
    ControlVariable oldControlType = controlType;
    controlType = newControlType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BDSLPackage.LOCAL_VAR_DECL__CONTROL_TYPE, oldControlType, controlType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BDSLPackage.LOCAL_VAR_DECL__DEFINITION:
        return ((InternalEList<?>)getDefinition()).basicRemove(otherEnd, msgs);
      case BDSLPackage.LOCAL_VAR_DECL__SITE_ARGS:
        return ((InternalEList<?>)getSiteArgs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BDSLPackage.LOCAL_VAR_DECL__DEFINITION:
        return getDefinition();
      case BDSLPackage.LOCAL_VAR_DECL__SITE_ARGS:
        return getSiteArgs();
      case BDSLPackage.LOCAL_VAR_DECL__CONTROL_TYPE:
        if (resolve) return getControlType();
        return basicGetControlType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BDSLPackage.LOCAL_VAR_DECL__DEFINITION:
        getDefinition().clear();
        getDefinition().addAll((Collection<? extends BigraphExpression>)newValue);
        return;
      case BDSLPackage.LOCAL_VAR_DECL__SITE_ARGS:
        getSiteArgs().clear();
        getSiteArgs().addAll((Collection<? extends SiteVars>)newValue);
        return;
      case BDSLPackage.LOCAL_VAR_DECL__CONTROL_TYPE:
        setControlType((ControlVariable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BDSLPackage.LOCAL_VAR_DECL__DEFINITION:
        getDefinition().clear();
        return;
      case BDSLPackage.LOCAL_VAR_DECL__SITE_ARGS:
        getSiteArgs().clear();
        return;
      case BDSLPackage.LOCAL_VAR_DECL__CONTROL_TYPE:
        setControlType((ControlVariable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BDSLPackage.LOCAL_VAR_DECL__DEFINITION:
        return definition != null && !definition.isEmpty();
      case BDSLPackage.LOCAL_VAR_DECL__SITE_ARGS:
        return siteArgs != null && !siteArgs.isEmpty();
      case BDSLPackage.LOCAL_VAR_DECL__CONTROL_TYPE:
        return controlType != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == BDSLBigraphDefinition.class)
    {
      switch (derivedFeatureID)
      {
        case BDSLPackage.LOCAL_VAR_DECL__DEFINITION: return BDSLPackage.BDSL_BIGRAPH_DEFINITION__DEFINITION;
        default: return -1;
      }
    }
    if (baseClass == BigraphExpression.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == AbstractBigraphDeclaration.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == BigraphVarDeclOrReference.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == BDSLBigraphDefinition.class)
    {
      switch (baseFeatureID)
      {
        case BDSLPackage.BDSL_BIGRAPH_DEFINITION__DEFINITION: return BDSLPackage.LOCAL_VAR_DECL__DEFINITION;
        default: return -1;
      }
    }
    if (baseClass == BigraphExpression.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == AbstractBigraphDeclaration.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == BigraphVarDeclOrReference.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //LocalVarDeclImpl
