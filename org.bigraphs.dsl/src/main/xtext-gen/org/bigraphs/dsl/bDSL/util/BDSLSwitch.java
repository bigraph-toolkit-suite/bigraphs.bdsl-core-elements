/**
 * generated by Xtext 2.32.0
 */
package org.bigraphs.dsl.bDSL.util;

import org.bigraphs.dsl.bDSL.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.bigraphs.dsl.bDSL.BDSLPackage
 * @generated
 */
public class BDSLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BDSLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BDSLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = BDSLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case BDSLPackage.BDSL_DOCUMENT:
      {
        BDSLDocument bdslDocument = (BDSLDocument)theEObject;
        T result = caseBDSLDocument(bdslDocument);
        if (result == null) result = caseUDFArgumentTypes(bdslDocument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BDSL_DOCUMENT_IMPORT:
      {
        BDSLDocumentImport bdslDocumentImport = (BDSLDocumentImport)theEObject;
        T result = caseBDSLDocumentImport(bdslDocumentImport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BDSL_UDF_IMPORT:
      {
        BDSLUdfImport bdslUdfImport = (BDSLUdfImport)theEObject;
        T result = caseBDSLUdfImport(bdslUdfImport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.ABSTRACT_ELEMENT:
      {
        AbstractElement abstractElement = (AbstractElement)theEObject;
        T result = caseAbstractElement(abstractElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.ABSTRACT_NAMED_SIGNATURE_ELEMENT:
      {
        AbstractNamedSignatureElement abstractNamedSignatureElement = (AbstractNamedSignatureElement)theEObject;
        T result = caseAbstractNamedSignatureElement(abstractNamedSignatureElement);
        if (result == null) result = caseUDFArgumentTypes(abstractNamedSignatureElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.MAIN_ELEMENT:
      {
        MainElement mainElement = (MainElement)theEObject;
        T result = caseMainElement(mainElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.SIGNATURE:
      {
        Signature signature = (Signature)theEObject;
        T result = caseSignature(signature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.CONTROL_VARIABLE:
      {
        ControlVariable controlVariable = (ControlVariable)theEObject;
        T result = caseControlVariable(controlVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.LOCAL_VAR_DECL:
      {
        LocalVarDecl localVarDecl = (LocalVarDecl)theEObject;
        T result = caseLocalVarDecl(localVarDecl);
        if (result == null) result = caseAbstractNamedSignatureElement(localVarDecl);
        if (result == null) result = caseBDSLBigraphDefinition(localVarDecl);
        if (result == null) result = caseAbstractBigraphDeclaration(localVarDecl);
        if (result == null) result = caseBigraphVarDeclOrReference(localVarDecl);
        if (result == null) result = caseUDFArgumentTypes(localVarDecl);
        if (result == null) result = caseBigraphExpression(localVarDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.ABSTRACT_BIGRAPH_DECLARATION:
      {
        AbstractBigraphDeclaration abstractBigraphDeclaration = (AbstractBigraphDeclaration)theEObject;
        T result = caseAbstractBigraphDeclaration(abstractBigraphDeclaration);
        if (result == null) result = caseBigraphExpression(abstractBigraphDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.NODE_EXPRESSION_CALL:
      {
        NodeExpressionCall nodeExpressionCall = (NodeExpressionCall)theEObject;
        T result = caseNodeExpressionCall(nodeExpressionCall);
        if (result == null) result = caseAbstractBigraphDeclaration(nodeExpressionCall);
        if (result == null) result = caseBigraphExpression(nodeExpressionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.NAME_CONSTANT:
      {
        NameConstant nameConstant = (NameConstant)theEObject;
        T result = caseNameConstant(nameConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.SITE_VARS:
      {
        SiteVars siteVars = (SiteVars)theEObject;
        T result = caseSiteVars(siteVars);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.LOCAL_RULE_DECL:
      {
        LocalRuleDecl localRuleDecl = (LocalRuleDecl)theEObject;
        T result = caseLocalRuleDecl(localRuleDecl);
        if (result == null) result = caseAbstractNamedSignatureElement(localRuleDecl);
        if (result == null) result = caseBigraphRuleDeclOrReference(localRuleDecl);
        if (result == null) result = caseUDFArgumentTypes(localRuleDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.LOCAL_PREDICATE_DECLARATION:
      {
        LocalPredicateDeclaration localPredicateDeclaration = (LocalPredicateDeclaration)theEObject;
        T result = caseLocalPredicateDeclaration(localPredicateDeclaration);
        if (result == null) result = caseAbstractNamedSignatureElement(localPredicateDeclaration);
        if (result == null) result = caseBigraphPredDeclOrReference(localPredicateDeclaration);
        if (result == null) result = caseUDFArgumentTypes(localPredicateDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BRS_DEFINITION:
      {
        BRSDefinition brsDefinition = (BRSDefinition)theEObject;
        T result = caseBRSDefinition(brsDefinition);
        if (result == null) result = caseAbstractNamedSignatureElement(brsDefinition);
        if (result == null) result = caseBigraphBdslVarDeclOrReference(brsDefinition);
        if (result == null) result = caseUDFArgumentTypes(brsDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.ELEMENTARY_BIGRAPHS:
      {
        ElementaryBigraphs elementaryBigraphs = (ElementaryBigraphs)theEObject;
        T result = caseElementaryBigraphs(elementaryBigraphs);
        if (result == null) result = caseAbstractBigraphDeclaration(elementaryBigraphs);
        if (result == null) result = caseBigraphExpression(elementaryBigraphs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BARREN:
      {
        Barren barren = (Barren)theEObject;
        T result = caseBarren(barren);
        if (result == null) result = caseElementaryBigraphs(barren);
        if (result == null) result = caseAbstractBigraphDeclaration(barren);
        if (result == null) result = caseBigraphExpression(barren);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.MERGE:
      {
        Merge merge = (Merge)theEObject;
        T result = caseMerge(merge);
        if (result == null) result = caseElementaryBigraphs(merge);
        if (result == null) result = caseAbstractBigraphDeclaration(merge);
        if (result == null) result = caseBigraphExpression(merge);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.CLOSURE:
      {
        Closure closure = (Closure)theEObject;
        T result = caseClosure(closure);
        if (result == null) result = caseElementaryBigraphs(closure);
        if (result == null) result = caseAbstractBigraphDeclaration(closure);
        if (result == null) result = caseBigraphExpression(closure);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.SUBSTITUTION:
      {
        Substitution substitution = (Substitution)theEObject;
        T result = caseSubstitution(substitution);
        if (result == null) result = caseElementaryBigraphs(substitution);
        if (result == null) result = caseAbstractBigraphDeclaration(substitution);
        if (result == null) result = caseBigraphExpression(substitution);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.SITE:
      {
        Site site = (Site)theEObject;
        T result = caseSite(site);
        if (result == null) result = caseElementaryBigraphs(site);
        if (result == null) result = caseAbstractBigraphDeclaration(site);
        if (result == null) result = caseBigraphExpression(site);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.JOIN:
      {
        Join join = (Join)theEObject;
        T result = caseJoin(join);
        if (result == null) result = caseElementaryBigraphs(join);
        if (result == null) result = caseAbstractBigraphDeclaration(join);
        if (result == null) result = caseBigraphExpression(join);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BIGRAPH_VAR_REFERENCE:
      {
        BigraphVarReference bigraphVarReference = (BigraphVarReference)theEObject;
        T result = caseBigraphVarReference(bigraphVarReference);
        if (result == null) result = caseAbstractBigraphDeclaration(bigraphVarReference);
        if (result == null) result = caseBigraphVarDeclOrReference(bigraphVarReference);
        if (result == null) result = caseBDSLReferenceSymbol(bigraphVarReference);
        if (result == null) result = casePrintableExpression(bigraphVarReference);
        if (result == null) result = caseBigraphExpression(bigraphVarReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.RULE_VAR_REFERENCE:
      {
        RuleVarReference ruleVarReference = (RuleVarReference)theEObject;
        T result = caseRuleVarReference(ruleVarReference);
        if (result == null) result = caseBigraphRuleDeclOrReference(ruleVarReference);
        if (result == null) result = caseBDSLReferenceSymbol(ruleVarReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.PREDICATE_VAR_REFERENCE:
      {
        PredicateVarReference predicateVarReference = (PredicateVarReference)theEObject;
        T result = casePredicateVarReference(predicateVarReference);
        if (result == null) result = caseBigraphPredDeclOrReference(predicateVarReference);
        if (result == null) result = caseBDSLReferenceSymbol(predicateVarReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BRS_VAR_REFERENCE:
      {
        BRSVarReference brsVarReference = (BRSVarReference)theEObject;
        T result = caseBRSVarReference(brsVarReference);
        if (result == null) result = caseBigraphBdslVarDeclOrReference(brsVarReference);
        if (result == null) result = caseBDSLReferenceSymbol(brsVarReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BDSL_DOCUMENT_REFERENCE:
      {
        BDSLDocumentReference bdslDocumentReference = (BDSLDocumentReference)theEObject;
        T result = caseBDSLDocumentReference(bdslDocumentReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BIGRAPH_VAR_DECL_OR_REFERENCE:
      {
        BigraphVarDeclOrReference bigraphVarDeclOrReference = (BigraphVarDeclOrReference)theEObject;
        T result = caseBigraphVarDeclOrReference(bigraphVarDeclOrReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BIGRAPH_RULE_DECL_OR_REFERENCE:
      {
        BigraphRuleDeclOrReference bigraphRuleDeclOrReference = (BigraphRuleDeclOrReference)theEObject;
        T result = caseBigraphRuleDeclOrReference(bigraphRuleDeclOrReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BIGRAPH_PRED_DECL_OR_REFERENCE:
      {
        BigraphPredDeclOrReference bigraphPredDeclOrReference = (BigraphPredDeclOrReference)theEObject;
        T result = caseBigraphPredDeclOrReference(bigraphPredDeclOrReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BIGRAPH_BDSL_VAR_DECL_OR_REFERENCE:
      {
        BigraphBdslVarDeclOrReference bigraphBdslVarDeclOrReference = (BigraphBdslVarDeclOrReference)theEObject;
        T result = caseBigraphBdslVarDeclOrReference(bigraphBdslVarDeclOrReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BIGRAPH_EXPRESSION:
      {
        BigraphExpression bigraphExpression = (BigraphExpression)theEObject;
        T result = caseBigraphExpression(bigraphExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BDSL_REFERENCE_SYMBOL:
      {
        BDSLReferenceSymbol bdslReferenceSymbol = (BDSLReferenceSymbol)theEObject;
        T result = caseBDSLReferenceSymbol(bdslReferenceSymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.ASSIGNMENT_OR_VARIABLE_DECLARATION:
      {
        AssignmentOrVariableDeclaration assignmentOrVariableDeclaration = (AssignmentOrVariableDeclaration)theEObject;
        T result = caseAssignmentOrVariableDeclaration(assignmentOrVariableDeclaration);
        if (result == null) result = caseAbstractElement(assignmentOrVariableDeclaration);
        if (result == null) result = caseAbstractMainStatements(assignmentOrVariableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BDSL_VARIABLE_DECLARATION2:
      {
        BDSLVariableDeclaration2 bdslVariableDeclaration2 = (BDSLVariableDeclaration2)theEObject;
        T result = caseBDSLVariableDeclaration2(bdslVariableDeclaration2);
        if (result == null) result = caseAssignmentOrVariableDeclaration(bdslVariableDeclaration2);
        if (result == null) result = caseAbstractElement(bdslVariableDeclaration2);
        if (result == null) result = caseAbstractMainStatements(bdslVariableDeclaration2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BDSL_REFERENCE_DECLARATION:
      {
        BDSLReferenceDeclaration bdslReferenceDeclaration = (BDSLReferenceDeclaration)theEObject;
        T result = caseBDSLReferenceDeclaration(bdslReferenceDeclaration);
        if (result == null) result = caseAssignmentOrVariableDeclaration(bdslReferenceDeclaration);
        if (result == null) result = caseAbstractElement(bdslReferenceDeclaration);
        if (result == null) result = caseAbstractMainStatements(bdslReferenceDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BDSL_EXPRESSION:
      {
        BDSLExpression bdslExpression = (BDSLExpression)theEObject;
        T result = caseBDSLExpression(bdslExpression);
        if (result == null) result = caseBDSLReactDefinition(bdslExpression);
        if (result == null) result = caseBDSLBigraphDefinition(bdslExpression);
        if (result == null) result = caseBDSLBrsDefinition(bdslExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BDSL_REACT_DEFINITION:
      {
        BDSLReactDefinition bdslReactDefinition = (BDSLReactDefinition)theEObject;
        T result = caseBDSLReactDefinition(bdslReactDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BDSL_BRS_DEFINITION:
      {
        BDSLBrsDefinition bdslBrsDefinition = (BDSLBrsDefinition)theEObject;
        T result = caseBDSLBrsDefinition(bdslBrsDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BDSL_BIGRAPH_DEFINITION:
      {
        BDSLBigraphDefinition bdslBigraphDefinition = (BDSLBigraphDefinition)theEObject;
        T result = caseBDSLBigraphDefinition(bdslBigraphDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.REFERENCE_CLASS_SYMBOL:
      {
        ReferenceClassSymbol referenceClassSymbol = (ReferenceClassSymbol)theEObject;
        T result = caseReferenceClassSymbol(referenceClassSymbol);
        if (result == null) result = caseAssignableBigraphExpression(referenceClassSymbol);
        if (result == null) result = caseBDSLExpression(referenceClassSymbol);
        if (result == null) result = caseBDSLReactDefinition(referenceClassSymbol);
        if (result == null) result = caseBDSLBigraphDefinition(referenceClassSymbol);
        if (result == null) result = caseBDSLBrsDefinition(referenceClassSymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.ASSIGNABLE_BIGRAPH_EXPRESSION:
      {
        AssignableBigraphExpression assignableBigraphExpression = (AssignableBigraphExpression)theEObject;
        T result = caseAssignableBigraphExpression(assignableBigraphExpression);
        if (result == null) result = caseBDSLExpression(assignableBigraphExpression);
        if (result == null) result = caseBDSLReactDefinition(assignableBigraphExpression);
        if (result == null) result = caseBDSLBigraphDefinition(assignableBigraphExpression);
        if (result == null) result = caseBDSLBrsDefinition(assignableBigraphExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.ASSIGNABLE_BIGRAPH_EXPRESSION_WITH_EXPLICIT_SIG:
      {
        AssignableBigraphExpressionWithExplicitSig assignableBigraphExpressionWithExplicitSig = (AssignableBigraphExpressionWithExplicitSig)theEObject;
        T result = caseAssignableBigraphExpressionWithExplicitSig(assignableBigraphExpressionWithExplicitSig);
        if (result == null) result = caseAssignableBigraphExpression(assignableBigraphExpressionWithExplicitSig);
        if (result == null) result = caseMethodStatements(assignableBigraphExpressionWithExplicitSig);
        if (result == null) result = caseBDSLExpression(assignableBigraphExpressionWithExplicitSig);
        if (result == null) result = caseAbstractMainStatements(assignableBigraphExpressionWithExplicitSig);
        if (result == null) result = caseCallbackStatements(assignableBigraphExpressionWithExplicitSig);
        if (result == null) result = caseBDSLReactDefinition(assignableBigraphExpressionWithExplicitSig);
        if (result == null) result = caseBDSLBigraphDefinition(assignableBigraphExpressionWithExplicitSig);
        if (result == null) result = caseBDSLBrsDefinition(assignableBigraphExpressionWithExplicitSig);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.METHOD_STATEMENTS:
      {
        MethodStatements methodStatements = (MethodStatements)theEObject;
        T result = caseMethodStatements(methodStatements);
        if (result == null) result = caseAbstractMainStatements(methodStatements);
        if (result == null) result = caseCallbackStatements(methodStatements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BDSL_CALLBACK_METHODS:
      {
        BdslCallbackMethods bdslCallbackMethods = (BdslCallbackMethods)theEObject;
        T result = caseBdslCallbackMethods(bdslCallbackMethods);
        if (result == null) result = caseAbstractElement(bdslCallbackMethods);
        if (result == null) result = caseMethodStatements(bdslCallbackMethods);
        if (result == null) result = caseAbstractMainStatements(bdslCallbackMethods);
        if (result == null) result = caseCallbackStatements(bdslCallbackMethods);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BRS_STARTED_CALLBACK:
      {
        BRSStartedCallback brsStartedCallback = (BRSStartedCallback)theEObject;
        T result = caseBRSStartedCallback(brsStartedCallback);
        if (result == null) result = caseBdslCallbackMethods(brsStartedCallback);
        if (result == null) result = caseAbstractElement(brsStartedCallback);
        if (result == null) result = caseMethodStatements(brsStartedCallback);
        if (result == null) result = caseAbstractMainStatements(brsStartedCallback);
        if (result == null) result = caseCallbackStatements(brsStartedCallback);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BRS_FINISHED_CALLBACK:
      {
        BRSFinishedCallback brsFinishedCallback = (BRSFinishedCallback)theEObject;
        T result = caseBRSFinishedCallback(brsFinishedCallback);
        if (result == null) result = caseBdslCallbackMethods(brsFinishedCallback);
        if (result == null) result = caseAbstractElement(brsFinishedCallback);
        if (result == null) result = caseMethodStatements(brsFinishedCallback);
        if (result == null) result = caseAbstractMainStatements(brsFinishedCallback);
        if (result == null) result = caseCallbackStatements(brsFinishedCallback);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.PREDICATE_MATCH_CALLBACK:
      {
        PredicateMatchCallback predicateMatchCallback = (PredicateMatchCallback)theEObject;
        T result = casePredicateMatchCallback(predicateMatchCallback);
        if (result == null) result = caseBdslCallbackMethods(predicateMatchCallback);
        if (result == null) result = caseAbstractElement(predicateMatchCallback);
        if (result == null) result = caseMethodStatements(predicateMatchCallback);
        if (result == null) result = caseAbstractMainStatements(predicateMatchCallback);
        if (result == null) result = caseCallbackStatements(predicateMatchCallback);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.RULE_MATCH_CALLBACK:
      {
        RuleMatchCallback ruleMatchCallback = (RuleMatchCallback)theEObject;
        T result = caseRuleMatchCallback(ruleMatchCallback);
        if (result == null) result = caseBdslCallbackMethods(ruleMatchCallback);
        if (result == null) result = caseAbstractElement(ruleMatchCallback);
        if (result == null) result = caseMethodStatements(ruleMatchCallback);
        if (result == null) result = caseAbstractMainStatements(ruleMatchCallback);
        if (result == null) result = caseCallbackStatements(ruleMatchCallback);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.PRINT_LN:
      {
        PrintLn printLn = (PrintLn)theEObject;
        T result = casePrintLn(printLn);
        if (result == null) result = caseMethodStatements(printLn);
        if (result == null) result = caseAbstractMainStatements(printLn);
        if (result == null) result = caseCallbackStatements(printLn);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.PRINTABLE_EXPRESSION:
      {
        PrintableExpression printableExpression = (PrintableExpression)theEObject;
        T result = casePrintableExpression(printableExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.EXPORT_METHOD:
      {
        ExportMethod exportMethod = (ExportMethod)theEObject;
        T result = caseExportMethod(exportMethod);
        if (result == null) result = caseMethodStatements(exportMethod);
        if (result == null) result = caseAbstractMainStatements(exportMethod);
        if (result == null) result = caseCallbackStatements(exportMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.EXECUTE_BRS_METHOD:
      {
        ExecuteBRSMethod executeBRSMethod = (ExecuteBRSMethod)theEObject;
        T result = caseExecuteBRSMethod(executeBRSMethod);
        if (result == null) result = caseMethodStatements(executeBRSMethod);
        if (result == null) result = caseAbstractMainStatements(executeBRSMethod);
        if (result == null) result = caseCallbackStatements(executeBRSMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.ABSTRACT_MAIN_STATEMENTS:
      {
        AbstractMainStatements abstractMainStatements = (AbstractMainStatements)theEObject;
        T result = caseAbstractMainStatements(abstractMainStatements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.CALLBACK_STATEMENTS:
      {
        CallbackStatements callbackStatements = (CallbackStatements)theEObject;
        T result = caseCallbackStatements(callbackStatements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.UDF_OPERATION:
      {
        UDFOperation udfOperation = (UDFOperation)theEObject;
        T result = caseUDFOperation(udfOperation);
        if (result == null) result = caseAbstractMainStatements(udfOperation);
        if (result == null) result = caseCallbackStatements(udfOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.XEXPRESSION:
      {
        XExpression xExpression = (XExpression)theEObject;
        T result = caseXExpression(xExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.UDF_ARGUMENT_TYPES:
      {
        UDFArgumentTypes udfArgumentTypes = (UDFArgumentTypes)theEObject;
        T result = caseUDFArgumentTypes(udfArgumentTypes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BDSL_BLOCK:
      {
        BDSLBlock bdslBlock = (BDSLBlock)theEObject;
        T result = caseBDSLBlock(bdslBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.LVD2:
      {
        LVD2 lvd2 = (LVD2)theEObject;
        T result = caseLVD2(lvd2);
        if (result == null) result = caseLocalVarDecl(lvd2);
        if (result == null) result = caseAbstractNamedSignatureElement(lvd2);
        if (result == null) result = caseBDSLBigraphDefinition(lvd2);
        if (result == null) result = caseAbstractBigraphDeclaration(lvd2);
        if (result == null) result = caseBigraphVarDeclOrReference(lvd2);
        if (result == null) result = caseUDFArgumentTypes(lvd2);
        if (result == null) result = caseBigraphExpression(lvd2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.PLUS:
      {
        Plus plus = (Plus)theEObject;
        T result = casePlus(plus);
        if (result == null) result = caseBigraphExpression(plus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.MULTI:
      {
        Multi multi = (Multi)theEObject;
        T result = caseMulti(multi);
        if (result == null) result = caseBigraphExpression(multi);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.BDSL_ASSIGNMENT:
      {
        BDSLAssignment bdslAssignment = (BDSLAssignment)theEObject;
        T result = caseBDSLAssignment(bdslAssignment);
        if (result == null) result = caseBDSLExpression(bdslAssignment);
        if (result == null) result = caseBDSLReactDefinition(bdslAssignment);
        if (result == null) result = caseBDSLBigraphDefinition(bdslAssignment);
        if (result == null) result = caseBDSLBrsDefinition(bdslAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.STRING_LITERAL:
      {
        StringLiteral stringLiteral = (StringLiteral)theEObject;
        T result = caseStringLiteral(stringLiteral);
        if (result == null) result = casePrintableExpression(stringLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.LOAD_METHOD:
      {
        LoadMethod loadMethod = (LoadMethod)theEObject;
        T result = caseLoadMethod(loadMethod);
        if (result == null) result = caseAssignableBigraphExpressionWithExplicitSig(loadMethod);
        if (result == null) result = caseAssignableBigraphExpression(loadMethod);
        if (result == null) result = caseMethodStatements(loadMethod);
        if (result == null) result = caseBDSLExpression(loadMethod);
        if (result == null) result = caseAbstractMainStatements(loadMethod);
        if (result == null) result = caseCallbackStatements(loadMethod);
        if (result == null) result = caseBDSLReactDefinition(loadMethod);
        if (result == null) result = caseBDSLBigraphDefinition(loadMethod);
        if (result == null) result = caseBDSLBrsDefinition(loadMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.CREATE_RANDOM_BIGRAPH_METHOD:
      {
        CreateRandomBigraphMethod createRandomBigraphMethod = (CreateRandomBigraphMethod)theEObject;
        T result = caseCreateRandomBigraphMethod(createRandomBigraphMethod);
        if (result == null) result = caseAssignableBigraphExpressionWithExplicitSig(createRandomBigraphMethod);
        if (result == null) result = caseAssignableBigraphExpression(createRandomBigraphMethod);
        if (result == null) result = caseMethodStatements(createRandomBigraphMethod);
        if (result == null) result = caseBDSLExpression(createRandomBigraphMethod);
        if (result == null) result = caseAbstractMainStatements(createRandomBigraphMethod);
        if (result == null) result = caseCallbackStatements(createRandomBigraphMethod);
        if (result == null) result = caseBDSLReactDefinition(createRandomBigraphMethod);
        if (result == null) result = caseBDSLBigraphDefinition(createRandomBigraphMethod);
        if (result == null) result = caseBDSLBrsDefinition(createRandomBigraphMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BDSLPackage.UDF_CALL_EXPRESSION:
      {
        UdfCallExpression udfCallExpression = (UdfCallExpression)theEObject;
        T result = caseUdfCallExpression(udfCallExpression);
        if (result == null) result = caseXExpression(udfCallExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Document</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Document</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBDSLDocument(BDSLDocument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Document Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Document Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBDSLDocumentImport(BDSLDocumentImport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Udf Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Udf Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBDSLUdfImport(BDSLUdfImport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractElement(AbstractElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Named Signature Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Named Signature Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractNamedSignatureElement(AbstractNamedSignatureElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Main Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Main Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMainElement(MainElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignature(Signature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Control Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Control Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseControlVariable(ControlVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Local Var Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Local Var Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocalVarDecl(LocalVarDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Bigraph Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Bigraph Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractBigraphDeclaration(AbstractBigraphDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Expression Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Expression Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodeExpressionCall(NodeExpressionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Name Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Name Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNameConstant(NameConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Site Vars</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Site Vars</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSiteVars(SiteVars object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Local Rule Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Local Rule Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocalRuleDecl(LocalRuleDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Local Predicate Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Local Predicate Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocalPredicateDeclaration(LocalPredicateDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BRS Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BRS Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBRSDefinition(BRSDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Elementary Bigraphs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Elementary Bigraphs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementaryBigraphs(ElementaryBigraphs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Barren</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Barren</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBarren(Barren object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Merge</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Merge</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMerge(Merge object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Closure</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Closure</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClosure(Closure object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Substitution</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Substitution</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubstitution(Substitution object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Site</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Site</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSite(Site object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Join</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Join</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJoin(Join object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bigraph Var Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bigraph Var Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBigraphVarReference(BigraphVarReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule Var Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule Var Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleVarReference(RuleVarReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Var Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Var Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateVarReference(PredicateVarReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BRS Var Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BRS Var Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBRSVarReference(BRSVarReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Document Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Document Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBDSLDocumentReference(BDSLDocumentReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bigraph Var Decl Or Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bigraph Var Decl Or Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBigraphVarDeclOrReference(BigraphVarDeclOrReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bigraph Rule Decl Or Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bigraph Rule Decl Or Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBigraphRuleDeclOrReference(BigraphRuleDeclOrReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bigraph Pred Decl Or Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bigraph Pred Decl Or Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBigraphPredDeclOrReference(BigraphPredDeclOrReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bigraph Bdsl Var Decl Or Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bigraph Bdsl Var Decl Or Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBigraphBdslVarDeclOrReference(BigraphBdslVarDeclOrReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bigraph Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bigraph Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBigraphExpression(BigraphExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBDSLReferenceSymbol(BDSLReferenceSymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment Or Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment Or Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignmentOrVariableDeclaration(AssignmentOrVariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Declaration2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Declaration2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBDSLVariableDeclaration2(BDSLVariableDeclaration2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBDSLReferenceDeclaration(BDSLReferenceDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBDSLExpression(BDSLExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBDSLReactDefinition(BDSLReactDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Brs Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Brs Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBDSLBrsDefinition(BDSLBrsDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bigraph Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bigraph Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBDSLBigraphDefinition(BDSLBigraphDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference Class Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference Class Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReferenceClassSymbol(ReferenceClassSymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignable Bigraph Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignable Bigraph Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignableBigraphExpression(AssignableBigraphExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignable Bigraph Expression With Explicit Sig</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignable Bigraph Expression With Explicit Sig</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignableBigraphExpressionWithExplicitSig(AssignableBigraphExpressionWithExplicitSig object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Statements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Statements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodStatements(MethodStatements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bdsl Callback Methods</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bdsl Callback Methods</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBdslCallbackMethods(BdslCallbackMethods object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BRS Started Callback</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BRS Started Callback</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBRSStartedCallback(BRSStartedCallback object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BRS Finished Callback</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BRS Finished Callback</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBRSFinishedCallback(BRSFinishedCallback object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Match Callback</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Match Callback</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateMatchCallback(PredicateMatchCallback object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule Match Callback</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule Match Callback</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleMatchCallback(RuleMatchCallback object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print Ln</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print Ln</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrintLn(PrintLn object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Printable Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Printable Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrintableExpression(PrintableExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Export Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Export Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExportMethod(ExportMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Execute BRS Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Execute BRS Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExecuteBRSMethod(ExecuteBRSMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Main Statements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Main Statements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractMainStatements(AbstractMainStatements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Callback Statements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Callback Statements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallbackStatements(CallbackStatements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UDF Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UDF Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUDFOperation(UDFOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XExpression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XExpression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXExpression(XExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UDF Argument Types</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UDF Argument Types</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUDFArgumentTypes(UDFArgumentTypes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBDSLBlock(BDSLBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LVD2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LVD2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLVD2(LVD2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlus(Plus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMulti(Multi object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBDSLAssignment(BDSLAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteral(StringLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Load Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Load Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoadMethod(LoadMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Random Bigraph Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Random Bigraph Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateRandomBigraphMethod(CreateRandomBigraphMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Udf Call Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Udf Call Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUdfCallExpression(UdfCallExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //BDSLSwitch
