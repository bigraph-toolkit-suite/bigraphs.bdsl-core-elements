/**
 * generated by Xtext 2.32.0
 */
package org.bigraphs.dsl.bDSL.impl;

import org.bigraphs.dsl.bDSL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BDSLFactoryImpl extends EFactoryImpl implements BDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BDSLFactory init()
  {
    try
    {
      BDSLFactory theBDSLFactory = (BDSLFactory)EPackage.Registry.INSTANCE.getEFactory(BDSLPackage.eNS_URI);
      if (theBDSLFactory != null)
      {
        return theBDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BDSLPackage.BDSL_DOCUMENT: return createBDSLDocument();
      case BDSLPackage.BDSL_DOCUMENT_IMPORT: return createBDSLDocumentImport();
      case BDSLPackage.BDSL_UDF_IMPORT: return createBDSLUdfImport();
      case BDSLPackage.ABSTRACT_ELEMENT: return createAbstractElement();
      case BDSLPackage.ABSTRACT_NAMED_SIGNATURE_ELEMENT: return createAbstractNamedSignatureElement();
      case BDSLPackage.MAIN_ELEMENT: return createMainElement();
      case BDSLPackage.SIGNATURE: return createSignature();
      case BDSLPackage.CONTROL_VARIABLE: return createControlVariable();
      case BDSLPackage.LOCAL_VAR_DECL: return createLocalVarDecl();
      case BDSLPackage.ABSTRACT_BIGRAPH_DECLARATION: return createAbstractBigraphDeclaration();
      case BDSLPackage.NODE_EXPRESSION_CALL: return createNodeExpressionCall();
      case BDSLPackage.NAME_CONSTANT: return createNameConstant();
      case BDSLPackage.SITE_VARS: return createSiteVars();
      case BDSLPackage.LOCAL_RULE_DECL: return createLocalRuleDecl();
      case BDSLPackage.LOCAL_PREDICATE_DECLARATION: return createLocalPredicateDeclaration();
      case BDSLPackage.BRS_DEFINITION: return createBRSDefinition();
      case BDSLPackage.ELEMENTARY_BIGRAPHS: return createElementaryBigraphs();
      case BDSLPackage.BARREN: return createBarren();
      case BDSLPackage.MERGE: return createMerge();
      case BDSLPackage.CLOSURE: return createClosure();
      case BDSLPackage.SUBSTITUTION: return createSubstitution();
      case BDSLPackage.SITE: return createSite();
      case BDSLPackage.JOIN: return createJoin();
      case BDSLPackage.BIGRAPH_VAR_REFERENCE: return createBigraphVarReference();
      case BDSLPackage.RULE_VAR_REFERENCE: return createRuleVarReference();
      case BDSLPackage.PREDICATE_VAR_REFERENCE: return createPredicateVarReference();
      case BDSLPackage.BRS_VAR_REFERENCE: return createBRSVarReference();
      case BDSLPackage.BDSL_DOCUMENT_REFERENCE: return createBDSLDocumentReference();
      case BDSLPackage.BIGRAPH_VAR_DECL_OR_REFERENCE: return createBigraphVarDeclOrReference();
      case BDSLPackage.BIGRAPH_RULE_DECL_OR_REFERENCE: return createBigraphRuleDeclOrReference();
      case BDSLPackage.BIGRAPH_PRED_DECL_OR_REFERENCE: return createBigraphPredDeclOrReference();
      case BDSLPackage.BIGRAPH_BDSL_VAR_DECL_OR_REFERENCE: return createBigraphBdslVarDeclOrReference();
      case BDSLPackage.BIGRAPH_EXPRESSION: return createBigraphExpression();
      case BDSLPackage.BDSL_REFERENCE_SYMBOL: return createBDSLReferenceSymbol();
      case BDSLPackage.ASSIGNMENT_OR_VARIABLE_DECLARATION: return createAssignmentOrVariableDeclaration();
      case BDSLPackage.BDSL_VARIABLE_DECLARATION2: return createBDSLVariableDeclaration2();
      case BDSLPackage.BDSL_REFERENCE_DECLARATION: return createBDSLReferenceDeclaration();
      case BDSLPackage.BDSL_EXPRESSION: return createBDSLExpression();
      case BDSLPackage.BDSL_REACT_DEFINITION: return createBDSLReactDefinition();
      case BDSLPackage.BDSL_BRS_DEFINITION: return createBDSLBrsDefinition();
      case BDSLPackage.BDSL_BIGRAPH_DEFINITION: return createBDSLBigraphDefinition();
      case BDSLPackage.REFERENCE_CLASS_SYMBOL: return createReferenceClassSymbol();
      case BDSLPackage.ASSIGNABLE_BIGRAPH_EXPRESSION: return createAssignableBigraphExpression();
      case BDSLPackage.ASSIGNABLE_BIGRAPH_EXPRESSION_WITH_EXPLICIT_SIG: return createAssignableBigraphExpressionWithExplicitSig();
      case BDSLPackage.METHOD_STATEMENTS: return createMethodStatements();
      case BDSLPackage.BDSL_CALLBACK_METHODS: return createBdslCallbackMethods();
      case BDSLPackage.BRS_STARTED_CALLBACK: return createBRSStartedCallback();
      case BDSLPackage.BRS_FINISHED_CALLBACK: return createBRSFinishedCallback();
      case BDSLPackage.PREDICATE_MATCH_CALLBACK: return createPredicateMatchCallback();
      case BDSLPackage.RULE_MATCH_CALLBACK: return createRuleMatchCallback();
      case BDSLPackage.PRINT_LN: return createPrintLn();
      case BDSLPackage.PRINTABLE_EXPRESSION: return createPrintableExpression();
      case BDSLPackage.EXPORT_METHOD: return createExportMethod();
      case BDSLPackage.EXECUTE_BRS_METHOD: return createExecuteBRSMethod();
      case BDSLPackage.ABSTRACT_MAIN_STATEMENTS: return createAbstractMainStatements();
      case BDSLPackage.CALLBACK_STATEMENTS: return createCallbackStatements();
      case BDSLPackage.UDF_OPERATION: return createUDFOperation();
      case BDSLPackage.XEXPRESSION: return createXExpression();
      case BDSLPackage.UDF_ARGUMENT_TYPES: return createUDFArgumentTypes();
      case BDSLPackage.BDSL_BLOCK: return createBDSLBlock();
      case BDSLPackage.LVD2: return createLVD2();
      case BDSLPackage.PLUS: return createPlus();
      case BDSLPackage.MULTI: return createMulti();
      case BDSLPackage.BDSL_ASSIGNMENT: return createBDSLAssignment();
      case BDSLPackage.STRING_LITERAL: return createStringLiteral();
      case BDSLPackage.LOAD_METHOD: return createLoadMethod();
      case BDSLPackage.CREATE_RANDOM_BIGRAPH_METHOD: return createCreateRandomBigraphMethod();
      case BDSLPackage.UDF_CALL_EXPRESSION: return createUdfCallExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case BDSLPackage.VARIABLE_CREATION_TYPE:
        return createVariableCreationTypeFromString(eDataType, initialValue);
      case BDSLPackage.BINARY_PARALLEL_OPERATOR:
        return createBinaryParallelOperatorFromString(eDataType, initialValue);
      case BDSLPackage.BINARY_NESTING_OPERATOR:
        return createBinaryNestingOperatorFromString(eDataType, initialValue);
      case BDSLPackage.CONTROL_TYPE:
        return createControlTypeFromString(eDataType, initialValue);
      case BDSLPackage.PREDICATE_TYPE:
        return createPredicateTypeFromString(eDataType, initialValue);
      case BDSLPackage.EXPORT_FORMAT:
        return createExportFormatFromString(eDataType, initialValue);
      case BDSLPackage.LOAD_FORMAT:
        return createLoadFormatFromString(eDataType, initialValue);
      case BDSLPackage.DATA_SINK:
        return createDataSinkFromString(eDataType, initialValue);
      case BDSLPackage.DATA_SOURCE:
        return createDataSourceFromString(eDataType, initialValue);
      case BDSLPackage.OUTPUT_MODE_MODEL:
        return createOutputModeModelFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case BDSLPackage.VARIABLE_CREATION_TYPE:
        return convertVariableCreationTypeToString(eDataType, instanceValue);
      case BDSLPackage.BINARY_PARALLEL_OPERATOR:
        return convertBinaryParallelOperatorToString(eDataType, instanceValue);
      case BDSLPackage.BINARY_NESTING_OPERATOR:
        return convertBinaryNestingOperatorToString(eDataType, instanceValue);
      case BDSLPackage.CONTROL_TYPE:
        return convertControlTypeToString(eDataType, instanceValue);
      case BDSLPackage.PREDICATE_TYPE:
        return convertPredicateTypeToString(eDataType, instanceValue);
      case BDSLPackage.EXPORT_FORMAT:
        return convertExportFormatToString(eDataType, instanceValue);
      case BDSLPackage.LOAD_FORMAT:
        return convertLoadFormatToString(eDataType, instanceValue);
      case BDSLPackage.DATA_SINK:
        return convertDataSinkToString(eDataType, instanceValue);
      case BDSLPackage.DATA_SOURCE:
        return convertDataSourceToString(eDataType, instanceValue);
      case BDSLPackage.OUTPUT_MODE_MODEL:
        return convertOutputModeModelToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLDocument createBDSLDocument()
  {
    BDSLDocumentImpl bdslDocument = new BDSLDocumentImpl();
    return bdslDocument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLDocumentImport createBDSLDocumentImport()
  {
    BDSLDocumentImportImpl bdslDocumentImport = new BDSLDocumentImportImpl();
    return bdslDocumentImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLUdfImport createBDSLUdfImport()
  {
    BDSLUdfImportImpl bdslUdfImport = new BDSLUdfImportImpl();
    return bdslUdfImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractElement createAbstractElement()
  {
    AbstractElementImpl abstractElement = new AbstractElementImpl();
    return abstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractNamedSignatureElement createAbstractNamedSignatureElement()
  {
    AbstractNamedSignatureElementImpl abstractNamedSignatureElement = new AbstractNamedSignatureElementImpl();
    return abstractNamedSignatureElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainElement createMainElement()
  {
    MainElementImpl mainElement = new MainElementImpl();
    return mainElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signature createSignature()
  {
    SignatureImpl signature = new SignatureImpl();
    return signature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ControlVariable createControlVariable()
  {
    ControlVariableImpl controlVariable = new ControlVariableImpl();
    return controlVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalVarDecl createLocalVarDecl()
  {
    LocalVarDeclImpl localVarDecl = new LocalVarDeclImpl();
    return localVarDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractBigraphDeclaration createAbstractBigraphDeclaration()
  {
    AbstractBigraphDeclarationImpl abstractBigraphDeclaration = new AbstractBigraphDeclarationImpl();
    return abstractBigraphDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeExpressionCall createNodeExpressionCall()
  {
    NodeExpressionCallImpl nodeExpressionCall = new NodeExpressionCallImpl();
    return nodeExpressionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NameConstant createNameConstant()
  {
    NameConstantImpl nameConstant = new NameConstantImpl();
    return nameConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SiteVars createSiteVars()
  {
    SiteVarsImpl siteVars = new SiteVarsImpl();
    return siteVars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalRuleDecl createLocalRuleDecl()
  {
    LocalRuleDeclImpl localRuleDecl = new LocalRuleDeclImpl();
    return localRuleDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalPredicateDeclaration createLocalPredicateDeclaration()
  {
    LocalPredicateDeclarationImpl localPredicateDeclaration = new LocalPredicateDeclarationImpl();
    return localPredicateDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BRSDefinition createBRSDefinition()
  {
    BRSDefinitionImpl brsDefinition = new BRSDefinitionImpl();
    return brsDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementaryBigraphs createElementaryBigraphs()
  {
    ElementaryBigraphsImpl elementaryBigraphs = new ElementaryBigraphsImpl();
    return elementaryBigraphs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Barren createBarren()
  {
    BarrenImpl barren = new BarrenImpl();
    return barren;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Merge createMerge()
  {
    MergeImpl merge = new MergeImpl();
    return merge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Closure createClosure()
  {
    ClosureImpl closure = new ClosureImpl();
    return closure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Substitution createSubstitution()
  {
    SubstitutionImpl substitution = new SubstitutionImpl();
    return substitution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Site createSite()
  {
    SiteImpl site = new SiteImpl();
    return site;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Join createJoin()
  {
    JoinImpl join = new JoinImpl();
    return join;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigraphVarReference createBigraphVarReference()
  {
    BigraphVarReferenceImpl bigraphVarReference = new BigraphVarReferenceImpl();
    return bigraphVarReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RuleVarReference createRuleVarReference()
  {
    RuleVarReferenceImpl ruleVarReference = new RuleVarReferenceImpl();
    return ruleVarReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PredicateVarReference createPredicateVarReference()
  {
    PredicateVarReferenceImpl predicateVarReference = new PredicateVarReferenceImpl();
    return predicateVarReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BRSVarReference createBRSVarReference()
  {
    BRSVarReferenceImpl brsVarReference = new BRSVarReferenceImpl();
    return brsVarReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLDocumentReference createBDSLDocumentReference()
  {
    BDSLDocumentReferenceImpl bdslDocumentReference = new BDSLDocumentReferenceImpl();
    return bdslDocumentReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigraphVarDeclOrReference createBigraphVarDeclOrReference()
  {
    BigraphVarDeclOrReferenceImpl bigraphVarDeclOrReference = new BigraphVarDeclOrReferenceImpl();
    return bigraphVarDeclOrReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigraphRuleDeclOrReference createBigraphRuleDeclOrReference()
  {
    BigraphRuleDeclOrReferenceImpl bigraphRuleDeclOrReference = new BigraphRuleDeclOrReferenceImpl();
    return bigraphRuleDeclOrReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigraphPredDeclOrReference createBigraphPredDeclOrReference()
  {
    BigraphPredDeclOrReferenceImpl bigraphPredDeclOrReference = new BigraphPredDeclOrReferenceImpl();
    return bigraphPredDeclOrReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigraphBdslVarDeclOrReference createBigraphBdslVarDeclOrReference()
  {
    BigraphBdslVarDeclOrReferenceImpl bigraphBdslVarDeclOrReference = new BigraphBdslVarDeclOrReferenceImpl();
    return bigraphBdslVarDeclOrReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigraphExpression createBigraphExpression()
  {
    BigraphExpressionImpl bigraphExpression = new BigraphExpressionImpl();
    return bigraphExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLReferenceSymbol createBDSLReferenceSymbol()
  {
    BDSLReferenceSymbolImpl bdslReferenceSymbol = new BDSLReferenceSymbolImpl();
    return bdslReferenceSymbol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssignmentOrVariableDeclaration createAssignmentOrVariableDeclaration()
  {
    AssignmentOrVariableDeclarationImpl assignmentOrVariableDeclaration = new AssignmentOrVariableDeclarationImpl();
    return assignmentOrVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLVariableDeclaration2 createBDSLVariableDeclaration2()
  {
    BDSLVariableDeclaration2Impl bdslVariableDeclaration2 = new BDSLVariableDeclaration2Impl();
    return bdslVariableDeclaration2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLReferenceDeclaration createBDSLReferenceDeclaration()
  {
    BDSLReferenceDeclarationImpl bdslReferenceDeclaration = new BDSLReferenceDeclarationImpl();
    return bdslReferenceDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLExpression createBDSLExpression()
  {
    BDSLExpressionImpl bdslExpression = new BDSLExpressionImpl();
    return bdslExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLReactDefinition createBDSLReactDefinition()
  {
    BDSLReactDefinitionImpl bdslReactDefinition = new BDSLReactDefinitionImpl();
    return bdslReactDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLBrsDefinition createBDSLBrsDefinition()
  {
    BDSLBrsDefinitionImpl bdslBrsDefinition = new BDSLBrsDefinitionImpl();
    return bdslBrsDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLBigraphDefinition createBDSLBigraphDefinition()
  {
    BDSLBigraphDefinitionImpl bdslBigraphDefinition = new BDSLBigraphDefinitionImpl();
    return bdslBigraphDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReferenceClassSymbol createReferenceClassSymbol()
  {
    ReferenceClassSymbolImpl referenceClassSymbol = new ReferenceClassSymbolImpl();
    return referenceClassSymbol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssignableBigraphExpression createAssignableBigraphExpression()
  {
    AssignableBigraphExpressionImpl assignableBigraphExpression = new AssignableBigraphExpressionImpl();
    return assignableBigraphExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssignableBigraphExpressionWithExplicitSig createAssignableBigraphExpressionWithExplicitSig()
  {
    AssignableBigraphExpressionWithExplicitSigImpl assignableBigraphExpressionWithExplicitSig = new AssignableBigraphExpressionWithExplicitSigImpl();
    return assignableBigraphExpressionWithExplicitSig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodStatements createMethodStatements()
  {
    MethodStatementsImpl methodStatements = new MethodStatementsImpl();
    return methodStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BdslCallbackMethods createBdslCallbackMethods()
  {
    BdslCallbackMethodsImpl bdslCallbackMethods = new BdslCallbackMethodsImpl();
    return bdslCallbackMethods;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BRSStartedCallback createBRSStartedCallback()
  {
    BRSStartedCallbackImpl brsStartedCallback = new BRSStartedCallbackImpl();
    return brsStartedCallback;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BRSFinishedCallback createBRSFinishedCallback()
  {
    BRSFinishedCallbackImpl brsFinishedCallback = new BRSFinishedCallbackImpl();
    return brsFinishedCallback;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PredicateMatchCallback createPredicateMatchCallback()
  {
    PredicateMatchCallbackImpl predicateMatchCallback = new PredicateMatchCallbackImpl();
    return predicateMatchCallback;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RuleMatchCallback createRuleMatchCallback()
  {
    RuleMatchCallbackImpl ruleMatchCallback = new RuleMatchCallbackImpl();
    return ruleMatchCallback;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrintLn createPrintLn()
  {
    PrintLnImpl printLn = new PrintLnImpl();
    return printLn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrintableExpression createPrintableExpression()
  {
    PrintableExpressionImpl printableExpression = new PrintableExpressionImpl();
    return printableExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExportMethod createExportMethod()
  {
    ExportMethodImpl exportMethod = new ExportMethodImpl();
    return exportMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExecuteBRSMethod createExecuteBRSMethod()
  {
    ExecuteBRSMethodImpl executeBRSMethod = new ExecuteBRSMethodImpl();
    return executeBRSMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractMainStatements createAbstractMainStatements()
  {
    AbstractMainStatementsImpl abstractMainStatements = new AbstractMainStatementsImpl();
    return abstractMainStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallbackStatements createCallbackStatements()
  {
    CallbackStatementsImpl callbackStatements = new CallbackStatementsImpl();
    return callbackStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UDFOperation createUDFOperation()
  {
    UDFOperationImpl udfOperation = new UDFOperationImpl();
    return udfOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XExpression createXExpression()
  {
    XExpressionImpl xExpression = new XExpressionImpl();
    return xExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UDFArgumentTypes createUDFArgumentTypes()
  {
    UDFArgumentTypesImpl udfArgumentTypes = new UDFArgumentTypesImpl();
    return udfArgumentTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLBlock createBDSLBlock()
  {
    BDSLBlockImpl bdslBlock = new BDSLBlockImpl();
    return bdslBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LVD2 createLVD2()
  {
    LVD2Impl lvd2 = new LVD2Impl();
    return lvd2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multi createMulti()
  {
    MultiImpl multi = new MultiImpl();
    return multi;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLAssignment createBDSLAssignment()
  {
    BDSLAssignmentImpl bdslAssignment = new BDSLAssignmentImpl();
    return bdslAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoadMethod createLoadMethod()
  {
    LoadMethodImpl loadMethod = new LoadMethodImpl();
    return loadMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateRandomBigraphMethod createCreateRandomBigraphMethod()
  {
    CreateRandomBigraphMethodImpl createRandomBigraphMethod = new CreateRandomBigraphMethodImpl();
    return createRandomBigraphMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UdfCallExpression createUdfCallExpression()
  {
    UdfCallExpressionImpl udfCallExpression = new UdfCallExpressionImpl();
    return udfCallExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableCreationType createVariableCreationTypeFromString(EDataType eDataType, String initialValue)
  {
    VariableCreationType result = VariableCreationType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVariableCreationTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryParallelOperator createBinaryParallelOperatorFromString(EDataType eDataType, String initialValue)
  {
    BinaryParallelOperator result = BinaryParallelOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBinaryParallelOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryNestingOperator createBinaryNestingOperatorFromString(EDataType eDataType, String initialValue)
  {
    BinaryNestingOperator result = BinaryNestingOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBinaryNestingOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ControlType createControlTypeFromString(EDataType eDataType, String initialValue)
  {
    ControlType result = ControlType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertControlTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PredicateType createPredicateTypeFromString(EDataType eDataType, String initialValue)
  {
    PredicateType result = PredicateType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPredicateTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExportFormat createExportFormatFromString(EDataType eDataType, String initialValue)
  {
    ExportFormat result = ExportFormat.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertExportFormatToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LoadFormat createLoadFormatFromString(EDataType eDataType, String initialValue)
  {
    LoadFormat result = LoadFormat.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLoadFormatToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataSink createDataSinkFromString(EDataType eDataType, String initialValue)
  {
    DataSink result = DataSink.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataSinkToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataSource createDataSourceFromString(EDataType eDataType, String initialValue)
  {
    DataSource result = DataSource.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataSourceToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputModeModel createOutputModeModelFromString(EDataType eDataType, String initialValue)
  {
    OutputModeModel result = OutputModeModel.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOutputModeModelToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BDSLPackage getBDSLPackage()
  {
    return (BDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BDSLPackage getPackage()
  {
    return BDSLPackage.eINSTANCE;
  }

} //BDSLFactoryImpl
