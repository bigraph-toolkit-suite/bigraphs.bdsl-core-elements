/**
 * generated by Xtext 2.32.0
 */
package org.bigraphs.dsl.bDSL.util;

import org.bigraphs.dsl.bDSL.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.bigraphs.dsl.bDSL.BDSLPackage
 * @generated
 */
public class BDSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BDSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BDSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = BDSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BDSLSwitch<Adapter> modelSwitch =
    new BDSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseBDSLDocument(BDSLDocument object)
      {
        return createBDSLDocumentAdapter();
      }
      @Override
      public Adapter caseBDSLDocumentImport(BDSLDocumentImport object)
      {
        return createBDSLDocumentImportAdapter();
      }
      @Override
      public Adapter caseBDSLUdfImport(BDSLUdfImport object)
      {
        return createBDSLUdfImportAdapter();
      }
      @Override
      public Adapter caseAbstractElement(AbstractElement object)
      {
        return createAbstractElementAdapter();
      }
      @Override
      public Adapter caseAbstractNamedSignatureElement(AbstractNamedSignatureElement object)
      {
        return createAbstractNamedSignatureElementAdapter();
      }
      @Override
      public Adapter caseMainElement(MainElement object)
      {
        return createMainElementAdapter();
      }
      @Override
      public Adapter caseSignature(Signature object)
      {
        return createSignatureAdapter();
      }
      @Override
      public Adapter caseControlVariable(ControlVariable object)
      {
        return createControlVariableAdapter();
      }
      @Override
      public Adapter caseLocalVarDecl(LocalVarDecl object)
      {
        return createLocalVarDeclAdapter();
      }
      @Override
      public Adapter caseAbstractBigraphDeclaration(AbstractBigraphDeclaration object)
      {
        return createAbstractBigraphDeclarationAdapter();
      }
      @Override
      public Adapter caseNodeExpressionCall(NodeExpressionCall object)
      {
        return createNodeExpressionCallAdapter();
      }
      @Override
      public Adapter caseNameConstant(NameConstant object)
      {
        return createNameConstantAdapter();
      }
      @Override
      public Adapter caseSiteVars(SiteVars object)
      {
        return createSiteVarsAdapter();
      }
      @Override
      public Adapter caseLocalRuleDecl(LocalRuleDecl object)
      {
        return createLocalRuleDeclAdapter();
      }
      @Override
      public Adapter caseLocalPredicateDeclaration(LocalPredicateDeclaration object)
      {
        return createLocalPredicateDeclarationAdapter();
      }
      @Override
      public Adapter caseBRSDefinition(BRSDefinition object)
      {
        return createBRSDefinitionAdapter();
      }
      @Override
      public Adapter caseElementaryBigraphs(ElementaryBigraphs object)
      {
        return createElementaryBigraphsAdapter();
      }
      @Override
      public Adapter caseBarren(Barren object)
      {
        return createBarrenAdapter();
      }
      @Override
      public Adapter caseMerge(Merge object)
      {
        return createMergeAdapter();
      }
      @Override
      public Adapter caseClosure(Closure object)
      {
        return createClosureAdapter();
      }
      @Override
      public Adapter caseSubstitution(Substitution object)
      {
        return createSubstitutionAdapter();
      }
      @Override
      public Adapter caseSite(Site object)
      {
        return createSiteAdapter();
      }
      @Override
      public Adapter caseJoin(Join object)
      {
        return createJoinAdapter();
      }
      @Override
      public Adapter caseBigraphVarReference(BigraphVarReference object)
      {
        return createBigraphVarReferenceAdapter();
      }
      @Override
      public Adapter caseRuleVarReference(RuleVarReference object)
      {
        return createRuleVarReferenceAdapter();
      }
      @Override
      public Adapter casePredicateVarReference(PredicateVarReference object)
      {
        return createPredicateVarReferenceAdapter();
      }
      @Override
      public Adapter caseBRSVarReference(BRSVarReference object)
      {
        return createBRSVarReferenceAdapter();
      }
      @Override
      public Adapter caseBDSLDocumentReference(BDSLDocumentReference object)
      {
        return createBDSLDocumentReferenceAdapter();
      }
      @Override
      public Adapter caseBigraphVarDeclOrReference(BigraphVarDeclOrReference object)
      {
        return createBigraphVarDeclOrReferenceAdapter();
      }
      @Override
      public Adapter caseBigraphRuleDeclOrReference(BigraphRuleDeclOrReference object)
      {
        return createBigraphRuleDeclOrReferenceAdapter();
      }
      @Override
      public Adapter caseBigraphPredDeclOrReference(BigraphPredDeclOrReference object)
      {
        return createBigraphPredDeclOrReferenceAdapter();
      }
      @Override
      public Adapter caseBigraphBdslVarDeclOrReference(BigraphBdslVarDeclOrReference object)
      {
        return createBigraphBdslVarDeclOrReferenceAdapter();
      }
      @Override
      public Adapter caseBigraphExpression(BigraphExpression object)
      {
        return createBigraphExpressionAdapter();
      }
      @Override
      public Adapter caseBDSLReferenceSymbol(BDSLReferenceSymbol object)
      {
        return createBDSLReferenceSymbolAdapter();
      }
      @Override
      public Adapter caseAssignmentOrVariableDeclaration(AssignmentOrVariableDeclaration object)
      {
        return createAssignmentOrVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseBDSLVariableDeclaration2(BDSLVariableDeclaration2 object)
      {
        return createBDSLVariableDeclaration2Adapter();
      }
      @Override
      public Adapter caseBDSLReferenceDeclaration(BDSLReferenceDeclaration object)
      {
        return createBDSLReferenceDeclarationAdapter();
      }
      @Override
      public Adapter caseBDSLExpression(BDSLExpression object)
      {
        return createBDSLExpressionAdapter();
      }
      @Override
      public Adapter caseBDSLReactDefinition(BDSLReactDefinition object)
      {
        return createBDSLReactDefinitionAdapter();
      }
      @Override
      public Adapter caseBDSLBrsDefinition(BDSLBrsDefinition object)
      {
        return createBDSLBrsDefinitionAdapter();
      }
      @Override
      public Adapter caseBDSLBigraphDefinition(BDSLBigraphDefinition object)
      {
        return createBDSLBigraphDefinitionAdapter();
      }
      @Override
      public Adapter caseReferenceClassSymbol(ReferenceClassSymbol object)
      {
        return createReferenceClassSymbolAdapter();
      }
      @Override
      public Adapter caseAssignableBigraphExpression(AssignableBigraphExpression object)
      {
        return createAssignableBigraphExpressionAdapter();
      }
      @Override
      public Adapter caseAssignableBigraphExpressionWithExplicitSig(AssignableBigraphExpressionWithExplicitSig object)
      {
        return createAssignableBigraphExpressionWithExplicitSigAdapter();
      }
      @Override
      public Adapter caseMethodStatements(MethodStatements object)
      {
        return createMethodStatementsAdapter();
      }
      @Override
      public Adapter caseBdslCallbackMethods(BdslCallbackMethods object)
      {
        return createBdslCallbackMethodsAdapter();
      }
      @Override
      public Adapter caseBRSStartedCallback(BRSStartedCallback object)
      {
        return createBRSStartedCallbackAdapter();
      }
      @Override
      public Adapter caseBRSFinishedCallback(BRSFinishedCallback object)
      {
        return createBRSFinishedCallbackAdapter();
      }
      @Override
      public Adapter casePredicateMatchCallback(PredicateMatchCallback object)
      {
        return createPredicateMatchCallbackAdapter();
      }
      @Override
      public Adapter caseRuleMatchCallback(RuleMatchCallback object)
      {
        return createRuleMatchCallbackAdapter();
      }
      @Override
      public Adapter casePrintLn(PrintLn object)
      {
        return createPrintLnAdapter();
      }
      @Override
      public Adapter casePrintableExpression(PrintableExpression object)
      {
        return createPrintableExpressionAdapter();
      }
      @Override
      public Adapter caseExportMethod(ExportMethod object)
      {
        return createExportMethodAdapter();
      }
      @Override
      public Adapter caseExecuteBRSMethod(ExecuteBRSMethod object)
      {
        return createExecuteBRSMethodAdapter();
      }
      @Override
      public Adapter caseAbstractMainStatements(AbstractMainStatements object)
      {
        return createAbstractMainStatementsAdapter();
      }
      @Override
      public Adapter caseCallbackStatements(CallbackStatements object)
      {
        return createCallbackStatementsAdapter();
      }
      @Override
      public Adapter caseUDFOperation(UDFOperation object)
      {
        return createUDFOperationAdapter();
      }
      @Override
      public Adapter caseXExpression(XExpression object)
      {
        return createXExpressionAdapter();
      }
      @Override
      public Adapter caseUDFArgumentTypes(UDFArgumentTypes object)
      {
        return createUDFArgumentTypesAdapter();
      }
      @Override
      public Adapter caseBDSLBlock(BDSLBlock object)
      {
        return createBDSLBlockAdapter();
      }
      @Override
      public Adapter caseLVD2(LVD2 object)
      {
        return createLVD2Adapter();
      }
      @Override
      public Adapter casePlus(Plus object)
      {
        return createPlusAdapter();
      }
      @Override
      public Adapter caseMulti(Multi object)
      {
        return createMultiAdapter();
      }
      @Override
      public Adapter caseBDSLAssignment(BDSLAssignment object)
      {
        return createBDSLAssignmentAdapter();
      }
      @Override
      public Adapter caseStringLiteral(StringLiteral object)
      {
        return createStringLiteralAdapter();
      }
      @Override
      public Adapter caseLoadMethod(LoadMethod object)
      {
        return createLoadMethodAdapter();
      }
      @Override
      public Adapter caseCreateRandomBigraphMethod(CreateRandomBigraphMethod object)
      {
        return createCreateRandomBigraphMethodAdapter();
      }
      @Override
      public Adapter caseUdfCallExpression(UdfCallExpression object)
      {
        return createUdfCallExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BDSLDocument <em>Document</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BDSLDocument
   * @generated
   */
  public Adapter createBDSLDocumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BDSLDocumentImport <em>Document Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BDSLDocumentImport
   * @generated
   */
  public Adapter createBDSLDocumentImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BDSLUdfImport <em>Udf Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BDSLUdfImport
   * @generated
   */
  public Adapter createBDSLUdfImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.AbstractElement <em>Abstract Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.AbstractElement
   * @generated
   */
  public Adapter createAbstractElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.AbstractNamedSignatureElement <em>Abstract Named Signature Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.AbstractNamedSignatureElement
   * @generated
   */
  public Adapter createAbstractNamedSignatureElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.MainElement <em>Main Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.MainElement
   * @generated
   */
  public Adapter createMainElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.Signature <em>Signature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.Signature
   * @generated
   */
  public Adapter createSignatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.ControlVariable <em>Control Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.ControlVariable
   * @generated
   */
  public Adapter createControlVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.LocalVarDecl <em>Local Var Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.LocalVarDecl
   * @generated
   */
  public Adapter createLocalVarDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.AbstractBigraphDeclaration <em>Abstract Bigraph Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.AbstractBigraphDeclaration
   * @generated
   */
  public Adapter createAbstractBigraphDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.NodeExpressionCall <em>Node Expression Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.NodeExpressionCall
   * @generated
   */
  public Adapter createNodeExpressionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.NameConstant <em>Name Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.NameConstant
   * @generated
   */
  public Adapter createNameConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.SiteVars <em>Site Vars</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.SiteVars
   * @generated
   */
  public Adapter createSiteVarsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.LocalRuleDecl <em>Local Rule Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.LocalRuleDecl
   * @generated
   */
  public Adapter createLocalRuleDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.LocalPredicateDeclaration <em>Local Predicate Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.LocalPredicateDeclaration
   * @generated
   */
  public Adapter createLocalPredicateDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BRSDefinition <em>BRS Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BRSDefinition
   * @generated
   */
  public Adapter createBRSDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.ElementaryBigraphs <em>Elementary Bigraphs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.ElementaryBigraphs
   * @generated
   */
  public Adapter createElementaryBigraphsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.Barren <em>Barren</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.Barren
   * @generated
   */
  public Adapter createBarrenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.Merge <em>Merge</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.Merge
   * @generated
   */
  public Adapter createMergeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.Closure <em>Closure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.Closure
   * @generated
   */
  public Adapter createClosureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.Substitution <em>Substitution</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.Substitution
   * @generated
   */
  public Adapter createSubstitutionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.Site <em>Site</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.Site
   * @generated
   */
  public Adapter createSiteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.Join <em>Join</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.Join
   * @generated
   */
  public Adapter createJoinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BigraphVarReference <em>Bigraph Var Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BigraphVarReference
   * @generated
   */
  public Adapter createBigraphVarReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.RuleVarReference <em>Rule Var Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.RuleVarReference
   * @generated
   */
  public Adapter createRuleVarReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.PredicateVarReference <em>Predicate Var Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.PredicateVarReference
   * @generated
   */
  public Adapter createPredicateVarReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BRSVarReference <em>BRS Var Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BRSVarReference
   * @generated
   */
  public Adapter createBRSVarReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BDSLDocumentReference <em>Document Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BDSLDocumentReference
   * @generated
   */
  public Adapter createBDSLDocumentReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BigraphVarDeclOrReference <em>Bigraph Var Decl Or Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BigraphVarDeclOrReference
   * @generated
   */
  public Adapter createBigraphVarDeclOrReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BigraphRuleDeclOrReference <em>Bigraph Rule Decl Or Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BigraphRuleDeclOrReference
   * @generated
   */
  public Adapter createBigraphRuleDeclOrReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BigraphPredDeclOrReference <em>Bigraph Pred Decl Or Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BigraphPredDeclOrReference
   * @generated
   */
  public Adapter createBigraphPredDeclOrReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BigraphBdslVarDeclOrReference <em>Bigraph Bdsl Var Decl Or Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BigraphBdslVarDeclOrReference
   * @generated
   */
  public Adapter createBigraphBdslVarDeclOrReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BigraphExpression <em>Bigraph Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BigraphExpression
   * @generated
   */
  public Adapter createBigraphExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BDSLReferenceSymbol <em>Reference Symbol</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BDSLReferenceSymbol
   * @generated
   */
  public Adapter createBDSLReferenceSymbolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.AssignmentOrVariableDeclaration <em>Assignment Or Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.AssignmentOrVariableDeclaration
   * @generated
   */
  public Adapter createAssignmentOrVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BDSLVariableDeclaration2 <em>Variable Declaration2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BDSLVariableDeclaration2
   * @generated
   */
  public Adapter createBDSLVariableDeclaration2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BDSLReferenceDeclaration <em>Reference Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BDSLReferenceDeclaration
   * @generated
   */
  public Adapter createBDSLReferenceDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BDSLExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BDSLExpression
   * @generated
   */
  public Adapter createBDSLExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BDSLReactDefinition <em>React Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BDSLReactDefinition
   * @generated
   */
  public Adapter createBDSLReactDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BDSLBrsDefinition <em>Brs Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BDSLBrsDefinition
   * @generated
   */
  public Adapter createBDSLBrsDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BDSLBigraphDefinition <em>Bigraph Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BDSLBigraphDefinition
   * @generated
   */
  public Adapter createBDSLBigraphDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.ReferenceClassSymbol <em>Reference Class Symbol</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.ReferenceClassSymbol
   * @generated
   */
  public Adapter createReferenceClassSymbolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.AssignableBigraphExpression <em>Assignable Bigraph Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.AssignableBigraphExpression
   * @generated
   */
  public Adapter createAssignableBigraphExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.AssignableBigraphExpressionWithExplicitSig <em>Assignable Bigraph Expression With Explicit Sig</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.AssignableBigraphExpressionWithExplicitSig
   * @generated
   */
  public Adapter createAssignableBigraphExpressionWithExplicitSigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.MethodStatements <em>Method Statements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.MethodStatements
   * @generated
   */
  public Adapter createMethodStatementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BdslCallbackMethods <em>Bdsl Callback Methods</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BdslCallbackMethods
   * @generated
   */
  public Adapter createBdslCallbackMethodsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BRSStartedCallback <em>BRS Started Callback</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BRSStartedCallback
   * @generated
   */
  public Adapter createBRSStartedCallbackAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BRSFinishedCallback <em>BRS Finished Callback</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BRSFinishedCallback
   * @generated
   */
  public Adapter createBRSFinishedCallbackAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.PredicateMatchCallback <em>Predicate Match Callback</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.PredicateMatchCallback
   * @generated
   */
  public Adapter createPredicateMatchCallbackAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.RuleMatchCallback <em>Rule Match Callback</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.RuleMatchCallback
   * @generated
   */
  public Adapter createRuleMatchCallbackAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.PrintLn <em>Print Ln</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.PrintLn
   * @generated
   */
  public Adapter createPrintLnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.PrintableExpression <em>Printable Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.PrintableExpression
   * @generated
   */
  public Adapter createPrintableExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.ExportMethod <em>Export Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.ExportMethod
   * @generated
   */
  public Adapter createExportMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.ExecuteBRSMethod <em>Execute BRS Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.ExecuteBRSMethod
   * @generated
   */
  public Adapter createExecuteBRSMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.AbstractMainStatements <em>Abstract Main Statements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.AbstractMainStatements
   * @generated
   */
  public Adapter createAbstractMainStatementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.CallbackStatements <em>Callback Statements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.CallbackStatements
   * @generated
   */
  public Adapter createCallbackStatementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.UDFOperation <em>UDF Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.UDFOperation
   * @generated
   */
  public Adapter createUDFOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.XExpression <em>XExpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.XExpression
   * @generated
   */
  public Adapter createXExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.UDFArgumentTypes <em>UDF Argument Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.UDFArgumentTypes
   * @generated
   */
  public Adapter createUDFArgumentTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BDSLBlock <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BDSLBlock
   * @generated
   */
  public Adapter createBDSLBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.LVD2 <em>LVD2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.LVD2
   * @generated
   */
  public Adapter createLVD2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.Plus <em>Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.Plus
   * @generated
   */
  public Adapter createPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.Multi <em>Multi</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.Multi
   * @generated
   */
  public Adapter createMultiAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.BDSLAssignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.BDSLAssignment
   * @generated
   */
  public Adapter createBDSLAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.StringLiteral <em>String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.StringLiteral
   * @generated
   */
  public Adapter createStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.LoadMethod <em>Load Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.LoadMethod
   * @generated
   */
  public Adapter createLoadMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.CreateRandomBigraphMethod <em>Create Random Bigraph Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.CreateRandomBigraphMethod
   * @generated
   */
  public Adapter createCreateRandomBigraphMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.bigraphs.dsl.bDSL.UdfCallExpression <em>Udf Call Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.bigraphs.dsl.bDSL.UdfCallExpression
   * @generated
   */
  public Adapter createUdfCallExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //BDSLAdapterFactory
