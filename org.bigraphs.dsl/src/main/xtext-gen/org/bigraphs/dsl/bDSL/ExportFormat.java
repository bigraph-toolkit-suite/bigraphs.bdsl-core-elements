/**
 * generated by Xtext 2.32.0
 */
package org.bigraphs.dsl.bDSL;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Export Format</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see org.bigraphs.dsl.bDSL.BDSLPackage#getExportFormat()
 * @model
 * @generated
 */
public enum ExportFormat implements Enumerator
{
  /**
   * The '<em><b>XMI</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #XMI_VALUE
   * @generated
   * @ordered
   */
  XMI(0, "XMI", "xmi"),

  /**
   * The '<em><b>ECORE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ECORE_VALUE
   * @generated
   * @ordered
   */
  ECORE(1, "ECORE", "ecore"),

  /**
   * The '<em><b>BIGRAPHER</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BIGRAPHER_VALUE
   * @generated
   * @ordered
   */
  BIGRAPHER(2, "BIGRAPHER", "bigrapher"),

  /**
   * The '<em><b>BIGMC</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BIGMC_VALUE
   * @generated
   * @ordered
   */
  BIGMC(3, "BIGMC", "bigmc"),

  /**
   * The '<em><b>PNG</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PNG_VALUE
   * @generated
   * @ordered
   */
  PNG(4, "PNG", "png");

  /**
   * The '<em><b>XMI</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #XMI
   * @model literal="xmi"
   * @generated
   * @ordered
   */
  public static final int XMI_VALUE = 0;

  /**
   * The '<em><b>ECORE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ECORE
   * @model literal="ecore"
   * @generated
   * @ordered
   */
  public static final int ECORE_VALUE = 1;

  /**
   * The '<em><b>BIGRAPHER</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BIGRAPHER
   * @model literal="bigrapher"
   * @generated
   * @ordered
   */
  public static final int BIGRAPHER_VALUE = 2;

  /**
   * The '<em><b>BIGMC</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BIGMC
   * @model literal="bigmc"
   * @generated
   * @ordered
   */
  public static final int BIGMC_VALUE = 3;

  /**
   * The '<em><b>PNG</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PNG
   * @model literal="png"
   * @generated
   * @ordered
   */
  public static final int PNG_VALUE = 4;

  /**
   * An array of all the '<em><b>Export Format</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final ExportFormat[] VALUES_ARRAY =
    new ExportFormat[]
    {
      XMI,
      ECORE,
      BIGRAPHER,
      BIGMC,
      PNG,
    };

  /**
   * A public read-only list of all the '<em><b>Export Format</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<ExportFormat> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Export Format</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ExportFormat get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      ExportFormat result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Export Format</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ExportFormat getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      ExportFormat result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Export Format</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ExportFormat get(int value)
  {
    switch (value)
    {
      case XMI_VALUE: return XMI;
      case ECORE_VALUE: return ECORE;
      case BIGRAPHER_VALUE: return BIGRAPHER;
      case BIGMC_VALUE: return BIGMC;
      case PNG_VALUE: return PNG;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private ExportFormat(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //ExportFormat
