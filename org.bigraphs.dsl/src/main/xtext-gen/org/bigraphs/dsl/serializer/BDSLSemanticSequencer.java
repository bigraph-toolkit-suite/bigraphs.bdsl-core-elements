/*
 * generated by Xtext 2.32.0
 */
package org.bigraphs.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.bigraphs.dsl.bDSL.BDSLAssignment;
import org.bigraphs.dsl.bDSL.BDSLBlock;
import org.bigraphs.dsl.bDSL.BDSLDocument;
import org.bigraphs.dsl.bDSL.BDSLDocumentImport;
import org.bigraphs.dsl.bDSL.BDSLDocumentReference;
import org.bigraphs.dsl.bDSL.BDSLExpression;
import org.bigraphs.dsl.bDSL.BDSLPackage;
import org.bigraphs.dsl.bDSL.BDSLReferenceDeclaration;
import org.bigraphs.dsl.bDSL.BDSLUdfImport;
import org.bigraphs.dsl.bDSL.BDSLVariableDeclaration2;
import org.bigraphs.dsl.bDSL.BRSDefinition;
import org.bigraphs.dsl.bDSL.BRSFinishedCallback;
import org.bigraphs.dsl.bDSL.BRSStartedCallback;
import org.bigraphs.dsl.bDSL.BRSVarReference;
import org.bigraphs.dsl.bDSL.Barren;
import org.bigraphs.dsl.bDSL.BigraphVarReference;
import org.bigraphs.dsl.bDSL.Closure;
import org.bigraphs.dsl.bDSL.ControlVariable;
import org.bigraphs.dsl.bDSL.CreateRandomBigraphMethod;
import org.bigraphs.dsl.bDSL.ExecuteBRSMethod;
import org.bigraphs.dsl.bDSL.ExportMethod;
import org.bigraphs.dsl.bDSL.Join;
import org.bigraphs.dsl.bDSL.LVD2;
import org.bigraphs.dsl.bDSL.LoadMethod;
import org.bigraphs.dsl.bDSL.LocalPredicateDeclaration;
import org.bigraphs.dsl.bDSL.LocalRuleDecl;
import org.bigraphs.dsl.bDSL.LocalVarDecl;
import org.bigraphs.dsl.bDSL.MainElement;
import org.bigraphs.dsl.bDSL.Merge;
import org.bigraphs.dsl.bDSL.Multi;
import org.bigraphs.dsl.bDSL.NameConstant;
import org.bigraphs.dsl.bDSL.NodeExpressionCall;
import org.bigraphs.dsl.bDSL.Plus;
import org.bigraphs.dsl.bDSL.PredicateMatchCallback;
import org.bigraphs.dsl.bDSL.PredicateVarReference;
import org.bigraphs.dsl.bDSL.PrintLn;
import org.bigraphs.dsl.bDSL.ReferenceClassSymbol;
import org.bigraphs.dsl.bDSL.RuleMatchCallback;
import org.bigraphs.dsl.bDSL.RuleVarReference;
import org.bigraphs.dsl.bDSL.Signature;
import org.bigraphs.dsl.bDSL.Site;
import org.bigraphs.dsl.bDSL.SiteVars;
import org.bigraphs.dsl.bDSL.StringLiteral;
import org.bigraphs.dsl.bDSL.Substitution;
import org.bigraphs.dsl.bDSL.UDFOperation;
import org.bigraphs.dsl.bDSL.UdfCallExpression;
import org.bigraphs.dsl.services.BDSLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class BDSLSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private BDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BDSLPackage.BDSL_ASSIGNMENT:
				sequence_BDSLAssignment(context, (BDSLAssignment) semanticObject); 
				return; 
			case BDSLPackage.BDSL_BLOCK:
				sequence_BDSLBlock(context, (BDSLBlock) semanticObject); 
				return; 
			case BDSLPackage.BDSL_DOCUMENT:
				sequence_BDSLDocument(context, (BDSLDocument) semanticObject); 
				return; 
			case BDSLPackage.BDSL_DOCUMENT_IMPORT:
				sequence_BDSLDocumentImport(context, (BDSLDocumentImport) semanticObject); 
				return; 
			case BDSLPackage.BDSL_DOCUMENT_REFERENCE:
				sequence_BDSLDocumentReference(context, (BDSLDocumentReference) semanticObject); 
				return; 
			case BDSLPackage.BDSL_EXPRESSION:
				sequence_BDSLBigraphDefinition_BDSLBrsDefinition_BDSLReactDefinition(context, (BDSLExpression) semanticObject); 
				return; 
			case BDSLPackage.BDSL_REFERENCE_DECLARATION:
				sequence_BDSLReferenceDeclaration(context, (BDSLReferenceDeclaration) semanticObject); 
				return; 
			case BDSLPackage.BDSL_UDF_IMPORT:
				sequence_BDSLUdfImport(context, (BDSLUdfImport) semanticObject); 
				return; 
			case BDSLPackage.BDSL_VARIABLE_DECLARATION2:
				sequence_BDSLVariableDeclaration2(context, (BDSLVariableDeclaration2) semanticObject); 
				return; 
			case BDSLPackage.BRS_DEFINITION:
				sequence_BDSLNameSigDeclFrag_BRSDefinition(context, (BRSDefinition) semanticObject); 
				return; 
			case BDSLPackage.BRS_FINISHED_CALLBACK:
				sequence_BDSLCallbackCodeBlockFragment_BRSFinishedCallback(context, (BRSFinishedCallback) semanticObject); 
				return; 
			case BDSLPackage.BRS_STARTED_CALLBACK:
				sequence_BDSLCallbackCodeBlockFragment_BRSStartedCallback(context, (BRSStartedCallback) semanticObject); 
				return; 
			case BDSLPackage.BRS_VAR_REFERENCE:
				sequence_BRSVarReference(context, (BRSVarReference) semanticObject); 
				return; 
			case BDSLPackage.BARREN:
				sequence_Barren(context, (Barren) semanticObject); 
				return; 
			case BDSLPackage.BIGRAPH_VAR_REFERENCE:
				sequence_BigraphVarReference(context, (BigraphVarReference) semanticObject); 
				return; 
			case BDSLPackage.CLOSURE:
				sequence_Closure(context, (Closure) semanticObject); 
				return; 
			case BDSLPackage.CONTROL_VARIABLE:
				sequence_ControlDef(context, (ControlVariable) semanticObject); 
				return; 
			case BDSLPackage.CREATE_RANDOM_BIGRAPH_METHOD:
				sequence_CreateRandomBigraphMethod(context, (CreateRandomBigraphMethod) semanticObject); 
				return; 
			case BDSLPackage.EXECUTE_BRS_METHOD:
				sequence_ExecuteBRSMethod(context, (ExecuteBRSMethod) semanticObject); 
				return; 
			case BDSLPackage.EXPORT_METHOD:
				sequence_ExportMethod(context, (ExportMethod) semanticObject); 
				return; 
			case BDSLPackage.JOIN:
				sequence_Join(context, (Join) semanticObject); 
				return; 
			case BDSLPackage.LVD2:
				sequence_BDSLBigraphDefinition_BDSLSiteVarsAndControlVarFrag_LVD2(context, (LVD2) semanticObject); 
				return; 
			case BDSLPackage.LOAD_METHOD:
				sequence_LoadMethod(context, (LoadMethod) semanticObject); 
				return; 
			case BDSLPackage.LOCAL_PREDICATE_DECLARATION:
				sequence_BDSLNameSigDeclFrag_LocalPredicateDeclaration(context, (LocalPredicateDeclaration) semanticObject); 
				return; 
			case BDSLPackage.LOCAL_RULE_DECL:
				sequence_BDSLNameSigDeclFrag_LocalRuleDecl(context, (LocalRuleDecl) semanticObject); 
				return; 
			case BDSLPackage.LOCAL_VAR_DECL:
				sequence_BDSLNameSigDeclFrag_BDSLSiteVarsAndControlVarFrag_LocalVarDecl(context, (LocalVarDecl) semanticObject); 
				return; 
			case BDSLPackage.MAIN_ELEMENT:
				sequence_MainElement(context, (MainElement) semanticObject); 
				return; 
			case BDSLPackage.MERGE:
				sequence_Merge(context, (Merge) semanticObject); 
				return; 
			case BDSLPackage.MULTI:
				sequence_Multiplication(context, (Multi) semanticObject); 
				return; 
			case BDSLPackage.NAME_CONSTANT:
				sequence_NameConstant(context, (NameConstant) semanticObject); 
				return; 
			case BDSLPackage.NODE_EXPRESSION_CALL:
				sequence_NodeExpressionCall(context, (NodeExpressionCall) semanticObject); 
				return; 
			case BDSLPackage.PLUS:
				sequence_Addition(context, (Plus) semanticObject); 
				return; 
			case BDSLPackage.PREDICATE_MATCH_CALLBACK:
				sequence_BDSLCallbackCodeBlockFragment_PredicateMatchCallback(context, (PredicateMatchCallback) semanticObject); 
				return; 
			case BDSLPackage.PREDICATE_VAR_REFERENCE:
				sequence_PredicateVarReference(context, (PredicateVarReference) semanticObject); 
				return; 
			case BDSLPackage.PRINT_LN:
				sequence_PrintLn(context, (PrintLn) semanticObject); 
				return; 
			case BDSLPackage.REFERENCE_CLASS_SYMBOL:
				sequence_ReferenceClassSymbol(context, (ReferenceClassSymbol) semanticObject); 
				return; 
			case BDSLPackage.RULE_MATCH_CALLBACK:
				sequence_BDSLCallbackCodeBlockFragment_RuleMatchCallback(context, (RuleMatchCallback) semanticObject); 
				return; 
			case BDSLPackage.RULE_VAR_REFERENCE:
				sequence_RuleVarReference(context, (RuleVarReference) semanticObject); 
				return; 
			case BDSLPackage.SIGNATURE:
				sequence_Signature(context, (Signature) semanticObject); 
				return; 
			case BDSLPackage.SITE:
				sequence_Site(context, (Site) semanticObject); 
				return; 
			case BDSLPackage.SITE_VARS:
				sequence_SiteVars(context, (SiteVars) semanticObject); 
				return; 
			case BDSLPackage.STRING_LITERAL:
				sequence_PrintableExpression(context, (StringLiteral) semanticObject); 
				return; 
			case BDSLPackage.SUBSTITUTION:
				sequence_Substitution(context, (Substitution) semanticObject); 
				return; 
			case BDSLPackage.UDF_OPERATION:
				sequence_UDFOperation(context, (UDFOperation) semanticObject); 
				return; 
			case BDSLPackage.UDF_CALL_EXPRESSION:
				sequence_UdfCallExpression(context, (UdfCallExpression) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     BigraphExpression returns Plus
	 *     Addition returns Plus
	 *     Addition.Plus_1_0_0 returns Plus
	 *     Multiplication returns Plus
	 *     Multiplication.Multi_1_0_0 returns Plus
	 *     PrimaryExpression returns Plus
	 *
	 * Constraint:
	 *     (left=Addition_Plus_1_0_0 operator=BinaryParallelOperator right=Multiplication)
	 * </pre>
	 */
	protected void sequence_Addition(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.PLUS__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.PLUS__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAdditionAccess().getOperatorBinaryParallelOperatorEnumRuleCall_1_0_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BDSLExpression returns BDSLAssignment
	 *     BDSLAssignment returns BDSLAssignment
	 *     BDSLAssignment.BDSLAssignment_1_0 returns BDSLAssignment
	 *     BDSLSelectionExpression returns BDSLAssignment
	 *     BDSLTerminalExpression returns BDSLAssignment
	 *
	 * Constraint:
	 *     (left=BDSLAssignment_BDSLAssignment_1_0 right=BDSLExpression)
	 * </pre>
	 */
	protected void sequence_BDSLAssignment(ISerializationContext context, BDSLAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.BDSL_ASSIGNMENT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.BDSL_ASSIGNMENT__LEFT));
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.BDSL_ASSIGNMENT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.BDSL_ASSIGNMENT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBDSLAssignmentAccess().getBDSLAssignmentLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getBDSLAssignmentAccess().getRightBDSLExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BDSLExpression returns BDSLExpression
	 *     BDSLAssignment returns BDSLExpression
	 *     BDSLAssignment.BDSLAssignment_1_0 returns BDSLExpression
	 *     BDSLSelectionExpression returns BDSLExpression
	 *     BDSLTerminalExpression returns BDSLExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (redex=BigraphExpression | redex=AssignableBigraphExpressionWithExplicitSig) 
	 *             (reactum=BigraphExpression | reactum=AssignableBigraphExpressionWithExplicitSig)
	 *         ) | 
	 *         brs=AssignableBigraphExpressionWithExplicitSig | 
	 *         (
	 *             agents+=BigraphVarReference 
	 *             agents+=BigraphVarReference* 
	 *             rules+=RuleVarReference 
	 *             rules+=RuleVarReference* 
	 *             (predicates+=PredicateVarReference predicates+=PredicateVarReference*)?
	 *         ) | 
	 *         definition+=BigraphExpression+
	 *     )?
	 * </pre>
	 */
	protected void sequence_BDSLBigraphDefinition_BDSLBrsDefinition_BDSLReactDefinition(ISerializationContext context, BDSLExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LVD2 returns LVD2
	 *     AbstractBigraphDeclaration returns LVD2
	 *     BigraphExpression returns LVD2
	 *     Addition returns LVD2
	 *     Addition.Plus_1_0_0 returns LVD2
	 *     Multiplication returns LVD2
	 *     Multiplication.Multi_1_0_0 returns LVD2
	 *     PrimaryExpression returns LVD2
	 *
	 * Constraint:
	 *     (name=ID ((siteArgs+=SiteVars siteArgs+=SiteVars*)? controlType=[ControlVariable|FQN])? definition+=BigraphExpression*)
	 * </pre>
	 */
	protected void sequence_BDSLBigraphDefinition_BDSLSiteVarsAndControlVarFrag_LVD2(ISerializationContext context, LVD2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BDSLBlock returns BDSLBlock
	 *
	 * Constraint:
	 *     statements+=AbstractMainStatements*
	 * </pre>
	 */
	protected void sequence_BDSLBlock(ISerializationContext context, BDSLBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractElement returns BRSFinishedCallback
	 *     MethodStatements returns BRSFinishedCallback
	 *     BdslCallbackMethods returns BRSFinishedCallback
	 *     BRSFinishedCallback returns BRSFinishedCallback
	 *     AbstractMainStatements returns BRSFinishedCallback
	 *     CallbackStatements returns BRSFinishedCallback
	 *
	 * Constraint:
	 *     (brs=BRSVarReference statements+=CallbackStatements*)
	 * </pre>
	 */
	protected void sequence_BDSLCallbackCodeBlockFragment_BRSFinishedCallback(ISerializationContext context, BRSFinishedCallback semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractElement returns BRSStartedCallback
	 *     MethodStatements returns BRSStartedCallback
	 *     BdslCallbackMethods returns BRSStartedCallback
	 *     BRSStartedCallback returns BRSStartedCallback
	 *     AbstractMainStatements returns BRSStartedCallback
	 *     CallbackStatements returns BRSStartedCallback
	 *
	 * Constraint:
	 *     (brs=BRSVarReference statements+=CallbackStatements*)
	 * </pre>
	 */
	protected void sequence_BDSLCallbackCodeBlockFragment_BRSStartedCallback(ISerializationContext context, BRSStartedCallback semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractElement returns PredicateMatchCallback
	 *     MethodStatements returns PredicateMatchCallback
	 *     BdslCallbackMethods returns PredicateMatchCallback
	 *     PredicateMatchCallback returns PredicateMatchCallback
	 *     AbstractMainStatements returns PredicateMatchCallback
	 *     CallbackStatements returns PredicateMatchCallback
	 *
	 * Constraint:
	 *     (brs=BRSVarReference params+=PredicateVarReference params+=PredicateVarReference* statements+=CallbackStatements*)
	 * </pre>
	 */
	protected void sequence_BDSLCallbackCodeBlockFragment_PredicateMatchCallback(ISerializationContext context, PredicateMatchCallback semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractElement returns RuleMatchCallback
	 *     MethodStatements returns RuleMatchCallback
	 *     BdslCallbackMethods returns RuleMatchCallback
	 *     RuleMatchCallback returns RuleMatchCallback
	 *     AbstractMainStatements returns RuleMatchCallback
	 *     CallbackStatements returns RuleMatchCallback
	 *
	 * Constraint:
	 *     (brs=BRSVarReference params+=RuleVarReference params+=RuleVarReference* statements+=CallbackStatements*)
	 * </pre>
	 */
	protected void sequence_BDSLCallbackCodeBlockFragment_RuleMatchCallback(ISerializationContext context, RuleMatchCallback semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BDSLDocumentImport returns BDSLDocumentImport
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcardOptional
	 * </pre>
	 */
	protected void sequence_BDSLDocumentImport(ISerializationContext context, BDSLDocumentImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.BDSL_DOCUMENT_IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.BDSL_DOCUMENT_IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBDSLDocumentImportAccess().getImportedNamespaceQualifiedNameWithWildcardOptionalParserRuleCall_2_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BDSLDocumentReference returns BDSLDocumentReference
	 *
	 * Constraint:
	 *     value=[BDSLDocument|BIGRAPH_VAR_REFERENCE_ID]
	 * </pre>
	 */
	protected void sequence_BDSLDocumentReference(ISerializationContext context, BDSLDocumentReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.BDSL_DOCUMENT_REFERENCE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.BDSL_DOCUMENT_REFERENCE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBDSLDocumentReferenceAccess().getValueBDSLDocumentBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1(), semanticObject.eGet(BDSLPackage.Literals.BDSL_DOCUMENT_REFERENCE__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BDSLDocument returns BDSLDocument
	 *     UDFArgumentTypes returns BDSLDocument
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             name=QualifiedName? 
	 *             (importDeclarationsBdsl+=BDSLDocumentImport | importDeclarationsUdf+=BDSLUdfImport)+ 
	 *             signature+=Signature+ 
	 *             (statements+=AbstractElement | main=MainElement)*
	 *         ) | 
	 *         (name=QualifiedName? signature+=Signature+) | 
	 *         (((name=QualifiedName? signature+=Signature+) | signature+=Signature+) (statements+=AbstractElement | main=MainElement)*) | 
	 *         signature+=Signature+
	 *     )?
	 * </pre>
	 */
	protected void sequence_BDSLDocument(ISerializationContext context, BDSLDocument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractNamedSignatureElement returns LocalVarDecl
	 *     LocalVarDecl returns LocalVarDecl
	 *     BigraphVarDeclOrReference returns LocalVarDecl
	 *     UDFArgumentTypes returns LocalVarDecl
	 *
	 * Constraint:
	 *     (name=ID sig=[Signature|ID]? ((siteArgs+=SiteVars siteArgs+=SiteVars*)? controlType=[ControlVariable|FQN])?)
	 * </pre>
	 */
	protected void sequence_BDSLNameSigDeclFrag_BDSLSiteVarsAndControlVarFrag_LocalVarDecl(ISerializationContext context, LocalVarDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractNamedSignatureElement returns BRSDefinition
	 *     BRSDefinition returns BRSDefinition
	 *     BigraphBdslVarDeclOrReference returns BRSDefinition
	 *     UDFArgumentTypes returns BRSDefinition
	 *
	 * Constraint:
	 *     (name=ID sig=[Signature|ID]?)
	 * </pre>
	 */
	protected void sequence_BDSLNameSigDeclFrag_BRSDefinition(ISerializationContext context, BRSDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractNamedSignatureElement returns LocalPredicateDeclaration
	 *     LocalPredicateDeclaration returns LocalPredicateDeclaration
	 *     BigraphPredDeclOrReference returns LocalPredicateDeclaration
	 *     UDFArgumentTypes returns LocalPredicateDeclaration
	 *
	 * Constraint:
	 *     (name=ID sig=[Signature|ID]? type=PredicateType?)
	 * </pre>
	 */
	protected void sequence_BDSLNameSigDeclFrag_LocalPredicateDeclaration(ISerializationContext context, LocalPredicateDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractNamedSignatureElement returns LocalRuleDecl
	 *     LocalRuleDecl returns LocalRuleDecl
	 *     BigraphRuleDeclOrReference returns LocalRuleDecl
	 *     UDFArgumentTypes returns LocalRuleDecl
	 *
	 * Constraint:
	 *     (name=ID sig=[Signature|ID]?)
	 * </pre>
	 */
	protected void sequence_BDSLNameSigDeclFrag_LocalRuleDecl(ISerializationContext context, LocalRuleDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractElement returns BDSLReferenceDeclaration
	 *     AssignmentOrVariableDeclaration returns BDSLReferenceDeclaration
	 *     BDSLReferenceDeclaration returns BDSLReferenceDeclaration
	 *     AbstractMainStatements returns BDSLReferenceDeclaration
	 *
	 * Constraint:
	 *     (target=[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID] value=BDSLExpression?)
	 * </pre>
	 */
	protected void sequence_BDSLReferenceDeclaration(ISerializationContext context, BDSLReferenceDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BDSLUdfImport returns BDSLUdfImport
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcardOptional
	 * </pre>
	 */
	protected void sequence_BDSLUdfImport(ISerializationContext context, BDSLUdfImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.BDSL_UDF_IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.BDSL_UDF_IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBDSLUdfImportAccess().getImportedNamespaceQualifiedNameWithWildcardOptionalParserRuleCall_2_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractElement returns BDSLVariableDeclaration2
	 *     AssignmentOrVariableDeclaration returns BDSLVariableDeclaration2
	 *     BDSLVariableDeclaration2 returns BDSLVariableDeclaration2
	 *     AbstractMainStatements returns BDSLVariableDeclaration2
	 *
	 * Constraint:
	 *     (variable=AbstractNamedSignatureElement value=BDSLExpression?)
	 * </pre>
	 */
	protected void sequence_BDSLVariableDeclaration2(ISerializationContext context, BDSLVariableDeclaration2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BRSVarReference returns BRSVarReference
	 *     BigraphBdslVarDeclOrReference returns BRSVarReference
	 *     BDSLReferenceSymbol returns BRSVarReference
	 *
	 * Constraint:
	 *     value=[BRSDefinition|BIGRAPH_VAR_REFERENCE_ID]
	 * </pre>
	 */
	protected void sequence_BRSVarReference(ISerializationContext context, BRSVarReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.BRS_VAR_REFERENCE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.BRS_VAR_REFERENCE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBRSVarReferenceAccess().getValueBRSDefinitionBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1(), semanticObject.eGet(BDSLPackage.Literals.BRS_VAR_REFERENCE__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractBigraphDeclaration returns Barren
	 *     ElementaryBigraphs returns Barren
	 *     Barren returns Barren
	 *     BigraphExpression returns Barren
	 *     Addition returns Barren
	 *     Addition.Plus_1_0_0 returns Barren
	 *     Multiplication returns Barren
	 *     Multiplication.Multi_1_0_0 returns Barren
	 *     PrimaryExpression returns Barren
	 *
	 * Constraint:
	 *     {Barren}
	 * </pre>
	 */
	protected void sequence_Barren(ISerializationContext context, Barren semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractBigraphDeclaration returns BigraphVarReference
	 *     BigraphVarReference returns BigraphVarReference
	 *     BigraphVarDeclOrReference returns BigraphVarReference
	 *     BigraphExpression returns BigraphVarReference
	 *     Addition returns BigraphVarReference
	 *     Addition.Plus_1_0_0 returns BigraphVarReference
	 *     Multiplication returns BigraphVarReference
	 *     Multiplication.Multi_1_0_0 returns BigraphVarReference
	 *     PrimaryExpression returns BigraphVarReference
	 *     BDSLReferenceSymbol returns BigraphVarReference
	 *     PrintableExpression returns BigraphVarReference
	 *
	 * Constraint:
	 *     value=[LocalVarDecl|BIGRAPH_VAR_REFERENCE_ID]
	 * </pre>
	 */
	protected void sequence_BigraphVarReference(ISerializationContext context, BigraphVarReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.BIGRAPH_VAR_REFERENCE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.BIGRAPH_VAR_REFERENCE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBigraphVarReferenceAccess().getValueLocalVarDeclBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1(), semanticObject.eGet(BDSLPackage.Literals.BIGRAPH_VAR_REFERENCE__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractBigraphDeclaration returns Closure
	 *     ElementaryBigraphs returns Closure
	 *     Closure returns Closure
	 *     BigraphExpression returns Closure
	 *     Addition returns Closure
	 *     Addition.Plus_1_0_0 returns Closure
	 *     Multiplication returns Closure
	 *     Multiplication.Multi_1_0_0 returns Closure
	 *     PrimaryExpression returns Closure
	 *
	 * Constraint:
	 *     (value+=STRING value+=STRING*)
	 * </pre>
	 */
	protected void sequence_Closure(ISerializationContext context, Closure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ControlDef returns ControlVariable
	 *
	 * Constraint:
	 *     (type=ControlType? ((name=ID arity=INT) | (name=ID arity=INT)))
	 * </pre>
	 */
	protected void sequence_ControlDef(ISerializationContext context, ControlVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BDSLExpression returns CreateRandomBigraphMethod
	 *     BDSLAssignment returns CreateRandomBigraphMethod
	 *     BDSLAssignment.BDSLAssignment_1_0 returns CreateRandomBigraphMethod
	 *     BDSLSelectionExpression returns CreateRandomBigraphMethod
	 *     BDSLTerminalExpression returns CreateRandomBigraphMethod
	 *     AssignableBigraphExpression returns CreateRandomBigraphMethod
	 *     AssignableBigraphExpressionWithExplicitSig returns CreateRandomBigraphMethod
	 *     MethodStatements returns CreateRandomBigraphMethod
	 *     CreateRandomBigraphMethod returns CreateRandomBigraphMethod
	 *     AbstractMainStatements returns CreateRandomBigraphMethod
	 *     CallbackStatements returns CreateRandomBigraphMethod
	 *
	 * Constraint:
	 *     (sig=[Signature|ID]? n=INT? t=INT? p=FLOAT?)
	 * </pre>
	 */
	protected void sequence_CreateRandomBigraphMethod(ISerializationContext context, CreateRandomBigraphMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MethodStatements returns ExecuteBRSMethod
	 *     ExecuteBRSMethod returns ExecuteBRSMethod
	 *     AbstractMainStatements returns ExecuteBRSMethod
	 *     CallbackStatements returns ExecuteBRSMethod
	 *
	 * Constraint:
	 *     brs=BRSVarReference
	 * </pre>
	 */
	protected void sequence_ExecuteBRSMethod(ISerializationContext context, ExecuteBRSMethod semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.EXECUTE_BRS_METHOD__BRS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.EXECUTE_BRS_METHOD__BRS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExecuteBRSMethodAccess().getBrsBRSVarReferenceParserRuleCall_3_0(), semanticObject.getBrs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MethodStatements returns ExportMethod
	 *     ExportMethod returns ExportMethod
	 *     AbstractMainStatements returns ExportMethod
	 *     CallbackStatements returns ExportMethod
	 *
	 * Constraint:
	 *     (variable=ReferenceClassSymbol format=ExportFormat? resourcePath=STRING?)
	 * </pre>
	 */
	protected void sequence_ExportMethod(ISerializationContext context, ExportMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractBigraphDeclaration returns Join
	 *     ElementaryBigraphs returns Join
	 *     Join returns Join
	 *     BigraphExpression returns Join
	 *     Addition returns Join
	 *     Addition.Plus_1_0_0 returns Join
	 *     Multiplication returns Join
	 *     Multiplication.Multi_1_0_0 returns Join
	 *     PrimaryExpression returns Join
	 *
	 * Constraint:
	 *     {Join}
	 * </pre>
	 */
	protected void sequence_Join(ISerializationContext context, Join semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BDSLExpression returns LoadMethod
	 *     BDSLAssignment returns LoadMethod
	 *     BDSLAssignment.BDSLAssignment_1_0 returns LoadMethod
	 *     BDSLSelectionExpression returns LoadMethod
	 *     BDSLTerminalExpression returns LoadMethod
	 *     AssignableBigraphExpression returns LoadMethod
	 *     AssignableBigraphExpressionWithExplicitSig returns LoadMethod
	 *     MethodStatements returns LoadMethod
	 *     LoadMethod returns LoadMethod
	 *     AbstractMainStatements returns LoadMethod
	 *     CallbackStatements returns LoadMethod
	 *
	 * Constraint:
	 *     (sig=[Signature|ID]? format=LoadFormat? resourcePath=STRING?)
	 * </pre>
	 */
	protected void sequence_LoadMethod(ISerializationContext context, LoadMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MainElement returns MainElement
	 *
	 * Constraint:
	 *     body=BDSLBlock
	 * </pre>
	 */
	protected void sequence_MainElement(ISerializationContext context, MainElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.MAIN_ELEMENT__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.MAIN_ELEMENT__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMainElementAccess().getBodyBDSLBlockParserRuleCall_2_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractBigraphDeclaration returns Merge
	 *     ElementaryBigraphs returns Merge
	 *     Merge returns Merge
	 *     BigraphExpression returns Merge
	 *     Addition returns Merge
	 *     Addition.Plus_1_0_0 returns Merge
	 *     Multiplication returns Merge
	 *     Multiplication.Multi_1_0_0 returns Merge
	 *     PrimaryExpression returns Merge
	 *
	 * Constraint:
	 *     sites=INT
	 * </pre>
	 */
	protected void sequence_Merge(ISerializationContext context, Merge semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.MERGE__SITES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.MERGE__SITES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMergeAccess().getSitesINTTerminalRuleCall_3_0(), semanticObject.getSites());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BigraphExpression returns Multi
	 *     Addition returns Multi
	 *     Addition.Plus_1_0_0 returns Multi
	 *     Multiplication returns Multi
	 *     Multiplication.Multi_1_0_0 returns Multi
	 *     PrimaryExpression returns Multi
	 *
	 * Constraint:
	 *     (left=Multiplication_Multi_1_0_0 operator=BinaryNestingOperator right=PrimaryExpression)
	 * </pre>
	 */
	protected void sequence_Multiplication(ISerializationContext context, Multi semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.MULTI__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.MULTI__LEFT));
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.MULTI__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.MULTI__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.MULTI__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.MULTI__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiplicationAccess().getOperatorBinaryNestingOperatorEnumRuleCall_1_0_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getMultiplicationAccess().getRightPrimaryExpressionParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NameConstant returns NameConstant
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_NameConstant(ISerializationContext context, NameConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.NAME_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.NAME_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNameConstantAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractBigraphDeclaration returns NodeExpressionCall
	 *     NodeExpressionCall returns NodeExpressionCall
	 *     BigraphExpression returns NodeExpressionCall
	 *     Addition returns NodeExpressionCall
	 *     Addition.Plus_1_0_0 returns NodeExpressionCall
	 *     Multiplication returns NodeExpressionCall
	 *     Multiplication.Multi_1_0_0 returns NodeExpressionCall
	 *     PrimaryExpression returns NodeExpressionCall
	 *
	 * Constraint:
	 *     (value=[ControlVariable|FQN] links+=NameConstant? links+=NameConstant*)
	 * </pre>
	 */
	protected void sequence_NodeExpressionCall(ISerializationContext context, NodeExpressionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PredicateVarReference returns PredicateVarReference
	 *     BigraphPredDeclOrReference returns PredicateVarReference
	 *     BDSLReferenceSymbol returns PredicateVarReference
	 *
	 * Constraint:
	 *     value=[LocalPredicateDeclaration|BIGRAPH_VAR_REFERENCE_ID]
	 * </pre>
	 */
	protected void sequence_PredicateVarReference(ISerializationContext context, PredicateVarReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.PREDICATE_VAR_REFERENCE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.PREDICATE_VAR_REFERENCE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPredicateVarReferenceAccess().getValueLocalPredicateDeclarationBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1(), semanticObject.eGet(BDSLPackage.Literals.PREDICATE_VAR_REFERENCE__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MethodStatements returns PrintLn
	 *     PrintLn returns PrintLn
	 *     AbstractMainStatements returns PrintLn
	 *     CallbackStatements returns PrintLn
	 *
	 * Constraint:
	 *     (text=PrintableExpression mode=OutputModeModel?)
	 * </pre>
	 */
	protected void sequence_PrintLn(ISerializationContext context, PrintLn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PrintableExpression returns StringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_PrintableExpression(ISerializationContext context, StringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.STRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.STRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintableExpressionAccess().getValueSTRINGTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BDSLExpression returns ReferenceClassSymbol
	 *     BDSLAssignment returns ReferenceClassSymbol
	 *     BDSLAssignment.BDSLAssignment_1_0 returns ReferenceClassSymbol
	 *     BDSLSelectionExpression returns ReferenceClassSymbol
	 *     BDSLTerminalExpression returns ReferenceClassSymbol
	 *     ReferenceClassSymbol returns ReferenceClassSymbol
	 *     AssignableBigraphExpression returns ReferenceClassSymbol
	 *
	 * Constraint:
	 *     type=[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID]
	 * </pre>
	 */
	protected void sequence_ReferenceClassSymbol(ISerializationContext context, ReferenceClassSymbol semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.REFERENCE_CLASS_SYMBOL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.REFERENCE_CLASS_SYMBOL__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReferenceClassSymbolAccess().getTypeAbstractNamedSignatureElementBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1(), semanticObject.eGet(BDSLPackage.Literals.REFERENCE_CLASS_SYMBOL__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RuleVarReference returns RuleVarReference
	 *     BigraphRuleDeclOrReference returns RuleVarReference
	 *     BDSLReferenceSymbol returns RuleVarReference
	 *
	 * Constraint:
	 *     value=[LocalRuleDecl|BIGRAPH_VAR_REFERENCE_ID]
	 * </pre>
	 */
	protected void sequence_RuleVarReference(ISerializationContext context, RuleVarReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.RULE_VAR_REFERENCE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.RULE_VAR_REFERENCE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRuleVarReferenceAccess().getValueLocalRuleDeclBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1(), semanticObject.eGet(BDSLPackage.Literals.RULE_VAR_REFERENCE__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Signature returns Signature
	 *
	 * Constraint:
	 *     (name=ID controls+=ControlDef*)
	 * </pre>
	 */
	protected void sequence_Signature(ISerializationContext context, Signature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SiteVars returns SiteVars
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_SiteVars(ISerializationContext context, SiteVars semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.SITE_VARS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.SITE_VARS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSiteVarsAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractBigraphDeclaration returns Site
	 *     ElementaryBigraphs returns Site
	 *     Site returns Site
	 *     BigraphExpression returns Site
	 *     Addition returns Site
	 *     Addition.Plus_1_0_0 returns Site
	 *     Multiplication returns Site
	 *     Multiplication.Multi_1_0_0 returns Site
	 *     PrimaryExpression returns Site
	 *
	 * Constraint:
	 *     index=INT
	 * </pre>
	 */
	protected void sequence_Site(ISerializationContext context, Site semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.SITE__INDEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.SITE__INDEX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSiteAccess().getIndexINTTerminalRuleCall_2_0(), semanticObject.getIndex());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractBigraphDeclaration returns Substitution
	 *     ElementaryBigraphs returns Substitution
	 *     Substitution returns Substitution
	 *     BigraphExpression returns Substitution
	 *     Addition returns Substitution
	 *     Addition.Plus_1_0_0 returns Substitution
	 *     Multiplication returns Substitution
	 *     Multiplication.Multi_1_0_0 returns Substitution
	 *     PrimaryExpression returns Substitution
	 *
	 * Constraint:
	 *     (from=STRING to+=STRING to+=STRING*)
	 * </pre>
	 */
	protected void sequence_Substitution(ISerializationContext context, Substitution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractMainStatements returns UDFOperation
	 *     CallbackStatements returns UDFOperation
	 *     UDFOperation returns UDFOperation
	 *
	 * Constraint:
	 *     expression+=UdfCallExpression*
	 * </pre>
	 */
	protected void sequence_UDFOperation(ISerializationContext context, UDFOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UdfCallExpression returns UdfCallExpression
	 *
	 * Constraint:
	 *     (type=[JvmType|QualifiedName] (params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID] params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID]*)?)
	 * </pre>
	 */
	protected void sequence_UdfCallExpression(ISerializationContext context, UdfCallExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
