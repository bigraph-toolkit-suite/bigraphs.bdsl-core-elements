/*
 * generated by Xtext 2.32.0
 */
package org.bigraphs.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class BDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class BDSLDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cNamespaceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cImportDeclarationsBdslAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cImportDeclarationsBdslBDSLDocumentImportParserRuleCall_1_0_0 = (RuleCall)cImportDeclarationsBdslAssignment_1_0.eContents().get(0);
		private final Assignment cImportDeclarationsUdfAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cImportDeclarationsUdfBDSLUdfImportParserRuleCall_1_1_0 = (RuleCall)cImportDeclarationsUdfAssignment_1_1.eContents().get(0);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignatureSignatureParserRuleCall_2_0 = (RuleCall)cSignatureAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cStatementsAbstractElementParserRuleCall_3_0_0 = (RuleCall)cStatementsAssignment_3_0.eContents().get(0);
		private final Assignment cMainAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cMainMainElementParserRuleCall_3_1_0 = (RuleCall)cMainAssignment_3_1.eContents().get(0);
		
		//// types are in italic font
		//BDSLDocument:
		//// first imports and signatures
		////        (importDeclarations+=XImportDeclaration*)
		////    importSection=XImportSection?
		//    ('namespace' name=QualifiedName)? (importDeclarationsBdsl+=BDSLDocumentImport | importDeclarationsUdf+=BDSLUdfImport)*
		//    // signature definitions
		//    signature+=(Signature)*
		//    // and unordered group of global and local statements
		//    ((statements+=(AbstractElement)*) & (main=MainElement)?);
		@Override public ParserRule getRule() { return rule; }
		
		//// first imports and signatures
		////        (importDeclarations+=XImportDeclaration*)
		////    importSection=XImportSection?
		//    ('namespace' name=QualifiedName)? (importDeclarationsBdsl+=BDSLDocumentImport | importDeclarationsUdf+=BDSLUdfImport)*
		//    // signature definitions
		//    signature+=(Signature)*
		//    // and unordered group of global and local statements
		//    ((statements+=(AbstractElement)*) & (main=MainElement)?)
		public Group getGroup() { return cGroup; }
		
		//// first imports and signatures
		////        (importDeclarations+=XImportDeclaration*)
		////    importSection=XImportSection?
		//    ('namespace' name=QualifiedName)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_0_0() { return cNamespaceKeyword_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }
		
		//(importDeclarationsBdsl+=BDSLDocumentImport | importDeclarationsUdf+=BDSLUdfImport)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//importDeclarationsBdsl+=BDSLDocumentImport
		public Assignment getImportDeclarationsBdslAssignment_1_0() { return cImportDeclarationsBdslAssignment_1_0; }
		
		//BDSLDocumentImport
		public RuleCall getImportDeclarationsBdslBDSLDocumentImportParserRuleCall_1_0_0() { return cImportDeclarationsBdslBDSLDocumentImportParserRuleCall_1_0_0; }
		
		//importDeclarationsUdf+=BDSLUdfImport
		public Assignment getImportDeclarationsUdfAssignment_1_1() { return cImportDeclarationsUdfAssignment_1_1; }
		
		//BDSLUdfImport
		public RuleCall getImportDeclarationsUdfBDSLUdfImportParserRuleCall_1_1_0() { return cImportDeclarationsUdfBDSLUdfImportParserRuleCall_1_1_0; }
		
		//// signature definitions
		//signature+=(Signature)*
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }
		
		//(Signature)
		public RuleCall getSignatureSignatureParserRuleCall_2_0() { return cSignatureSignatureParserRuleCall_2_0; }
		
		//// and unordered group of global and local statements
		//((statements+=(AbstractElement)*) & (main=MainElement)?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//(statements+=(AbstractElement)*)
		public Assignment getStatementsAssignment_3_0() { return cStatementsAssignment_3_0; }
		
		//(AbstractElement)
		public RuleCall getStatementsAbstractElementParserRuleCall_3_0_0() { return cStatementsAbstractElementParserRuleCall_3_0_0; }
		
		//(main=MainElement)?
		public Assignment getMainAssignment_3_1() { return cMainAssignment_3_1; }
		
		//MainElement
		public RuleCall getMainMainElementParserRuleCall_3_1_0() { return cMainMainElementParserRuleCall_3_1_0; }
	}
	public class QualifiedNameWithWildcardOptionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.QualifiedNameWithWildcardOptional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//    //FqnWithWildCard:
		////    QualifiedName ('.*')?;
		//QualifiedNameWithWildcardOptional:
		//    QualifiedName ('.' '*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName ('.' '*')?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//('.' '*')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class BDSLDocumentImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLDocumentImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBDSLDocumentImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportBdslKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardOptionalParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		
		//BDSLDocumentImport:
		//    {BDSLDocumentImport} 'import:bdsl' importedNamespace=QualifiedNameWithWildcardOptional;
		@Override public ParserRule getRule() { return rule; }
		
		//{BDSLDocumentImport} 'import:bdsl' importedNamespace=QualifiedNameWithWildcardOptional
		public Group getGroup() { return cGroup; }
		
		//{BDSLDocumentImport}
		public Action getBDSLDocumentImportAction_0() { return cBDSLDocumentImportAction_0; }
		
		//'import:bdsl'
		public Keyword getImportBdslKeyword_1() { return cImportBdslKeyword_1; }
		
		//importedNamespace=QualifiedNameWithWildcardOptional
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }
		
		//QualifiedNameWithWildcardOptional
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardOptionalParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameWithWildcardOptionalParserRuleCall_2_0; }
	}
	public class BDSLUdfImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLUdfImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBDSLUdfImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportUdfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardOptionalParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		
		//BDSLUdfImport:
		//    {BDSLUdfImport} 'import:udf' importedNamespace=QualifiedNameWithWildcardOptional;
		@Override public ParserRule getRule() { return rule; }
		
		//{BDSLUdfImport} 'import:udf' importedNamespace=QualifiedNameWithWildcardOptional
		public Group getGroup() { return cGroup; }
		
		//{BDSLUdfImport}
		public Action getBDSLUdfImportAction_0() { return cBDSLUdfImportAction_0; }
		
		//'import:udf'
		public Keyword getImportUdfKeyword_1() { return cImportUdfKeyword_1; }
		
		//importedNamespace=QualifiedNameWithWildcardOptional
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }
		
		//QualifiedNameWithWildcardOptional
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardOptionalParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameWithWildcardOptionalParserRuleCall_2_0; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FLOAT returns ecore::EFloat:
		//    INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class BDSLNameSigDeclFragElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLNameSigDeclFrag");
		private final Group cGroup = (Group)rule.eContents().get(0);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSigAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cSigSignatureCrossReference_1_1_0 = (CrossReference)cSigAssignment_1_1.eContents().get(0);
		private final RuleCall cSigSignatureIDTerminalRuleCall_1_1_0_1 = (RuleCall)cSigSignatureCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment BDSLNameSigDeclFrag *:
		//    name=ID ("(" sig=[Signature] ")")?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ("(" sig=[Signature] ")")?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//("(" sig=[Signature] ")")?
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//sig=[Signature]
		public Assignment getSigAssignment_1_1() { return cSigAssignment_1_1; }
		
		//[Signature]
		public CrossReference getSigSignatureCrossReference_1_1_0() { return cSigSignatureCrossReference_1_1_0; }
		
		//ID
		public RuleCall getSigSignatureIDTerminalRuleCall_1_1_0_1() { return cSigSignatureIDTerminalRuleCall_1_1_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class BDSLSiteVarsAndControlVarFragElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLSiteVarsAndControlVarFrag");
		private final Group cGroup = (Group)rule.eContents().get(0);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cSiteArgsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSiteArgsSiteVarsParserRuleCall_0_1_0 = (RuleCall)cSiteArgsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cSiteArgsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cSiteArgsSiteVarsParserRuleCall_0_2_1_0 = (RuleCall)cSiteArgsAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cControlTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cControlTypeControlVariableCrossReference_2_0 = (CrossReference)cControlTypeAssignment_2.eContents().get(0);
		private final RuleCall cControlTypeControlVariableFQNParserRuleCall_2_0_1 = (RuleCall)cControlTypeControlVariableCrossReference_2_0.eContents().get(1);
		
		//fragment BDSLSiteVarsAndControlVarFrag *:
		//    (("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ':' controlType=[ControlVariable|FQN])?;
		@Override public ParserRule getRule() { return rule; }
		
		//(("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ':' controlType=[ControlVariable|FQN])?
		public Group getGroup() { return cGroup; }
		
		//("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")?
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//siteArgs+=SiteVars
		public Assignment getSiteArgsAssignment_0_1() { return cSiteArgsAssignment_0_1; }
		
		//SiteVars
		public RuleCall getSiteArgsSiteVarsParserRuleCall_0_1_0() { return cSiteArgsSiteVarsParserRuleCall_0_1_0; }
		
		//(',' siteArgs+=SiteVars)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//siteArgs+=SiteVars
		public Assignment getSiteArgsAssignment_0_2_1() { return cSiteArgsAssignment_0_2_1; }
		
		//SiteVars
		public RuleCall getSiteArgsSiteVarsParserRuleCall_0_2_1_0() { return cSiteArgsSiteVarsParserRuleCall_0_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//controlType=[ControlVariable|FQN]
		public Assignment getControlTypeAssignment_2() { return cControlTypeAssignment_2; }
		
		//[ControlVariable|FQN]
		public CrossReference getControlTypeControlVariableCrossReference_2_0() { return cControlTypeControlVariableCrossReference_2_0; }
		
		//FQN
		public RuleCall getControlTypeControlVariableFQNParserRuleCall_2_0_1() { return cControlTypeControlVariableFQNParserRuleCall_2_0_1; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentOrVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBdslCallbackMethodsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//    AssignmentOrVariableDeclaration | BdslCallbackMethods;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignmentOrVariableDeclaration | BdslCallbackMethods
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AssignmentOrVariableDeclaration
		public RuleCall getAssignmentOrVariableDeclarationParserRuleCall_0() { return cAssignmentOrVariableDeclarationParserRuleCall_0; }
		
		//BdslCallbackMethods
		public RuleCall getBdslCallbackMethodsParserRuleCall_1() { return cBdslCallbackMethodsParserRuleCall_1; }
	}
	public class AbstractNamedSignatureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.AbstractNamedSignatureElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalVarDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalRuleDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocalPredicateDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBRSDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbstractNamedSignatureElement: //TODO rename to namedelement
		//    LocalVarDecl | LocalRuleDecl | LocalPredicateDeclaration | BRSDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		////TODO rename to namedelement
		//   LocalVarDecl | LocalRuleDecl | LocalPredicateDeclaration | BRSDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////TODO rename to namedelement
		//   LocalVarDecl
		public RuleCall getLocalVarDeclParserRuleCall_0() { return cLocalVarDeclParserRuleCall_0; }
		
		//LocalRuleDecl
		public RuleCall getLocalRuleDeclParserRuleCall_1() { return cLocalRuleDeclParserRuleCall_1; }
		
		//LocalPredicateDeclaration
		public RuleCall getLocalPredicateDeclarationParserRuleCall_2() { return cLocalPredicateDeclarationParserRuleCall_2; }
		
		//BRSDefinition
		public RuleCall getBRSDefinitionParserRuleCall_3() { return cBRSDefinitionParserRuleCall_3; }
	}
	public class MainElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.MainElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMAIN_KEYWORDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMainElementAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBDSLBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//MainElement:
		//    MAIN_KEYWORD {MainElement} body=BDSLBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//MAIN_KEYWORD {MainElement} body=BDSLBlock
		public Group getGroup() { return cGroup; }
		
		//MAIN_KEYWORD
		public RuleCall getMAIN_KEYWORDParserRuleCall_0() { return cMAIN_KEYWORDParserRuleCall_0; }
		
		//{MainElement}
		public Action getMainElementAction_1() { return cMainElementAction_1; }
		
		//body=BDSLBlock
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//BDSLBlock
		public RuleCall getBodyBDSLBlockParserRuleCall_2_0() { return cBodyBDSLBlockParserRuleCall_2_0; }
	}
	public class MAIN_KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.MAIN_KEYWORD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		// //value+=(AbstractMainStatements)*
		//MAIN_KEYWORD:
		//    "main" "=";
		@Override public ParserRule getRule() { return rule; }
		
		//"main" "="
		public Group getGroup() { return cGroup; }
		
		//"main"
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	public class IdOrKwElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.IdOrKw");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKEYWORDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IdOrKw:
		//    ID | KEYWORD;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | KEYWORD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//KEYWORD
		public RuleCall getKEYWORDParserRuleCall_1() { return cKEYWORDParserRuleCall_1; }
	}
	public class KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.KEYWORD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMAIN_KEYWORDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMETHOD_KEYWORDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVAR_DECL_KEWORDSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//KEYWORD:
		//    MAIN_KEYWORD
		//    | METHOD_KEYWORD
		//    | VAR_DECL_KEWORDS;
		@Override public ParserRule getRule() { return rule; }
		
		//MAIN_KEYWORD
		//| METHOD_KEYWORD
		//| VAR_DECL_KEWORDS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MAIN_KEYWORD
		public RuleCall getMAIN_KEYWORDParserRuleCall_0() { return cMAIN_KEYWORDParserRuleCall_0; }
		
		//METHOD_KEYWORD
		public RuleCall getMETHOD_KEYWORDParserRuleCall_1() { return cMETHOD_KEYWORDParserRuleCall_1; }
		
		//VAR_DECL_KEWORDS
		public RuleCall getVAR_DECL_KEWORDSParserRuleCall_2() { return cVAR_DECL_KEWORDSParserRuleCall_2; }
	}
	public class VAR_DECL_KEWORDSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.VAR_DECL_KEWORDS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cReactKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cValKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPredKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBrsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSignatureKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//VAR_DECL_KEWORDS:
		//    'react'
		//    | 'val'
		//    | 'pred'
		//    | 'brs'
		//    | 'signature';
		@Override public ParserRule getRule() { return rule; }
		
		//'react'
		//| 'val'
		//| 'pred'
		//| 'brs'
		//| 'signature'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'react'
		public Keyword getReactKeyword_0() { return cReactKeyword_0; }
		
		//'val'
		public Keyword getValKeyword_1() { return cValKeyword_1; }
		
		//'pred'
		public Keyword getPredKeyword_2() { return cPredKeyword_2; }
		
		//'brs'
		public Keyword getBrsKeyword_3() { return cBrsKeyword_3; }
		
		//'signature'
		public Keyword getSignatureKeyword_4() { return cSignatureKeyword_4; }
	}
	public class METHOD_KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.METHOD_KEYWORD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLoadKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRandomBigraphKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExportKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExecuteKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrintlnKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//METHOD_KEYWORD:
		//    'load'
		//    | 'randomBigraph'
		//    | 'export'
		//    | 'execute'
		//    | 'println';
		@Override public ParserRule getRule() { return rule; }
		
		//'load'
		//| 'randomBigraph'
		//| 'export'
		//| 'execute'
		//| 'println'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'load'
		public Keyword getLoadKeyword_0() { return cLoadKeyword_0; }
		
		//'randomBigraph'
		public Keyword getRandomBigraphKeyword_1() { return cRandomBigraphKeyword_1; }
		
		//'export'
		public Keyword getExportKeyword_2() { return cExportKeyword_2; }
		
		//'execute'
		public Keyword getExecuteKeyword_3() { return cExecuteKeyword_3; }
		
		//'println'
		public Keyword getPrintlnKeyword_4() { return cPrintlnKeyword_4; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSignatureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cControlsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cControlsControlDefParserRuleCall_3_1_0 = (RuleCall)cControlsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//    // Creates a signature class with the same name: shortcut for "signature returns signature"
		//Signature:
		//    {Signature}
		//    'signature'
		//    name=ID
		//    ('{' (controls+=ControlDef)+ '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Signature}
		//'signature'
		//name=ID
		//('{' (controls+=ControlDef)+ '}')?
		public Group getGroup() { return cGroup; }
		
		//{Signature}
		public Action getSignatureAction_0() { return cSignatureAction_0; }
		
		//'signature'
		public Keyword getSignatureKeyword_1() { return cSignatureKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{' (controls+=ControlDef)+ '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//(controls+=ControlDef)+
		public Assignment getControlsAssignment_3_1() { return cControlsAssignment_3_1; }
		
		//ControlDef
		public RuleCall getControlsControlDefParserRuleCall_3_1_0() { return cControlsControlDefParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ControlDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.ControlDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeControlTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cCtrlKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_0_1_0 = (RuleCall)cNameAssignment_2_0_1.eContents().get(0);
		private final Keyword cArityKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cArityAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cArityINTTerminalRuleCall_2_0_3_0 = (RuleCall)cArityAssignment_2_0_3.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0_0 = (RuleCall)cNameAssignment_2_1_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cArityAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cArityINTTerminalRuleCall_2_1_2_0 = (RuleCall)cArityAssignment_2_1_2.eContents().get(0);
		
		//ControlDef returns ControlVariable:
		//    {ControlVariable} type=ControlType? (('ctrl' name=ID 'arity' arity=INT) | (name=ID ':' arity=INT));
		@Override public ParserRule getRule() { return rule; }
		
		//{ControlVariable} type=ControlType? (('ctrl' name=ID 'arity' arity=INT) | (name=ID ':' arity=INT))
		public Group getGroup() { return cGroup; }
		
		//{ControlVariable}
		public Action getControlVariableAction_0() { return cControlVariableAction_0; }
		
		//type=ControlType?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ControlType
		public RuleCall getTypeControlTypeEnumRuleCall_1_0() { return cTypeControlTypeEnumRuleCall_1_0; }
		
		//(('ctrl' name=ID 'arity' arity=INT) | (name=ID ':' arity=INT))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('ctrl' name=ID 'arity' arity=INT)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'ctrl'
		public Keyword getCtrlKeyword_2_0_0() { return cCtrlKeyword_2_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_0_1() { return cNameAssignment_2_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_1_0() { return cNameIDTerminalRuleCall_2_0_1_0; }
		
		//'arity'
		public Keyword getArityKeyword_2_0_2() { return cArityKeyword_2_0_2; }
		
		//arity=INT
		public Assignment getArityAssignment_2_0_3() { return cArityAssignment_2_0_3; }
		
		//INT
		public RuleCall getArityINTTerminalRuleCall_2_0_3_0() { return cArityINTTerminalRuleCall_2_0_3_0; }
		
		//(name=ID ':' arity=INT)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//name=ID
		public Assignment getNameAssignment_2_1_0() { return cNameAssignment_2_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0_0() { return cNameIDTerminalRuleCall_2_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_1_1() { return cColonKeyword_2_1_1; }
		
		//arity=INT
		public Assignment getArityAssignment_2_1_2() { return cArityAssignment_2_1_2; }
		
		//INT
		public RuleCall getArityINTTerminalRuleCall_2_1_2_0() { return cArityINTTerminalRuleCall_2_1_2_0; }
	}
	public class LocalVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.LocalVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLocalVarDeclAction_1 = (Action)cGroup.eContents().get(1);
		private final RuleCall cBDSLNameSigDeclFragParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cBDSLSiteVarsAndControlVarFragParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//    ///////////////////////////////////
		//// Bigraphs                         //
		/////////////////////////////////////
		//LocalVarDecl:
		//    'val' {LocalVarDecl} BDSLNameSigDeclFrag BDSLSiteVarsAndControlVarFrag;
		@Override public ParserRule getRule() { return rule; }
		
		//'val' {LocalVarDecl} BDSLNameSigDeclFrag BDSLSiteVarsAndControlVarFrag
		public Group getGroup() { return cGroup; }
		
		//'val'
		public Keyword getValKeyword_0() { return cValKeyword_0; }
		
		//{LocalVarDecl}
		public Action getLocalVarDeclAction_1() { return cLocalVarDeclAction_1; }
		
		//BDSLNameSigDeclFrag
		public RuleCall getBDSLNameSigDeclFragParserRuleCall_2() { return cBDSLNameSigDeclFragParserRuleCall_2; }
		
		//BDSLSiteVarsAndControlVarFrag
		public RuleCall getBDSLSiteVarsAndControlVarFragParserRuleCall_3() { return cBDSLSiteVarsAndControlVarFragParserRuleCall_3; }
	}
	public class LVD2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.LVD2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLVD2Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cBDSLSiteVarsAndControlVarFragParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cBDSLBigraphDefinitionParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LVD2 returns LocalVarDecl:
		//    {LVD2} 'val' name=ID BDSLSiteVarsAndControlVarFrag '=' '{' BDSLBigraphDefinition '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{LVD2} 'val' name=ID BDSLSiteVarsAndControlVarFrag '=' '{' BDSLBigraphDefinition '}'
		public Group getGroup() { return cGroup; }
		
		//{LVD2}
		public Action getLVD2Action_0() { return cLVD2Action_0; }
		
		//'val'
		public Keyword getValKeyword_1() { return cValKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//BDSLSiteVarsAndControlVarFrag
		public RuleCall getBDSLSiteVarsAndControlVarFragParserRuleCall_3() { return cBDSLSiteVarsAndControlVarFragParserRuleCall_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//BDSLBigraphDefinition
		public RuleCall getBDSLBigraphDefinitionParserRuleCall_6() { return cBDSLBigraphDefinitionParserRuleCall_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AbstractBigraphDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.AbstractBigraphDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBigraphVarReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodeExpressionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLVD2ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cElementaryBigraphsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbstractBigraphDeclaration:
		//    BigraphVarReference | NodeExpressionCall | LVD2 | ElementaryBigraphs;
		@Override public ParserRule getRule() { return rule; }
		
		//BigraphVarReference | NodeExpressionCall | LVD2 | ElementaryBigraphs
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BigraphVarReference
		public RuleCall getBigraphVarReferenceParserRuleCall_0() { return cBigraphVarReferenceParserRuleCall_0; }
		
		//NodeExpressionCall
		public RuleCall getNodeExpressionCallParserRuleCall_1() { return cNodeExpressionCallParserRuleCall_1; }
		
		//LVD2
		public RuleCall getLVD2ParserRuleCall_2() { return cLVD2ParserRuleCall_2; }
		
		//ElementaryBigraphs
		public RuleCall getElementaryBigraphsParserRuleCall_3() { return cElementaryBigraphsParserRuleCall_3; }
	}
	public class NodeExpressionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.NodeExpressionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cValueControlVariableCrossReference_0_0 = (CrossReference)cValueAssignment_0.eContents().get(0);
		private final RuleCall cValueControlVariableFQNParserRuleCall_0_0_1 = (RuleCall)cValueControlVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLinksAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLinksNameConstantParserRuleCall_1_1_0 = (RuleCall)cLinksAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cLinksAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cLinksNameConstantParserRuleCall_1_2_1_0 = (RuleCall)cLinksAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//NodeExpressionCall:
		//    value=[ControlVariable|FQN] ("[" links+=NameConstant? (',' links+=NameConstant)* "]")?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=[ControlVariable|FQN] ("[" links+=NameConstant? (',' links+=NameConstant)* "]")?
		public Group getGroup() { return cGroup; }
		
		//value=[ControlVariable|FQN]
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//[ControlVariable|FQN]
		public CrossReference getValueControlVariableCrossReference_0_0() { return cValueControlVariableCrossReference_0_0; }
		
		//FQN
		public RuleCall getValueControlVariableFQNParserRuleCall_0_0_1() { return cValueControlVariableFQNParserRuleCall_0_0_1; }
		
		//("[" links+=NameConstant? (',' links+=NameConstant)* "]")?
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//links+=NameConstant?
		public Assignment getLinksAssignment_1_1() { return cLinksAssignment_1_1; }
		
		//NameConstant
		public RuleCall getLinksNameConstantParserRuleCall_1_1_0() { return cLinksNameConstantParserRuleCall_1_1_0; }
		
		//(',' links+=NameConstant)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//links+=NameConstant
		public Assignment getLinksAssignment_1_2_1() { return cLinksAssignment_1_2_1; }
		
		//NameConstant
		public RuleCall getLinksNameConstantParserRuleCall_1_2_1_0() { return cLinksNameConstantParserRuleCall_1_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class NameConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.NameConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNameConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NameConstant:
		//    {NameConstant} value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{NameConstant} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{NameConstant}
		public Action getNameConstantAction_0() { return cNameConstantAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class SiteVarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.SiteVars");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//    //TODO: change to linkNamevars or so
		//SiteVars:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class LocalRuleDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.LocalRuleDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLocalRuleDeclAction_1 = (Action)cGroup.eContents().get(1);
		private final RuleCall cBDSLNameSigDeclFragParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//LocalRuleDecl:
		//    "react" {LocalRuleDecl} BDSLNameSigDeclFrag;
		@Override public ParserRule getRule() { return rule; }
		
		//"react" {LocalRuleDecl} BDSLNameSigDeclFrag
		public Group getGroup() { return cGroup; }
		
		//"react"
		public Keyword getReactKeyword_0() { return cReactKeyword_0; }
		
		//{LocalRuleDecl}
		public Action getLocalRuleDeclAction_1() { return cLocalRuleDeclAction_1; }
		
		//BDSLNameSigDeclFrag
		public RuleCall getBDSLNameSigDeclFragParserRuleCall_2() { return cBDSLNameSigDeclFragParserRuleCall_2; }
	}
	public class LocalPredicateDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.LocalPredicateDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLocalPredicateDeclarationAction_1 = (Action)cGroup.eContents().get(1);
		private final RuleCall cBDSLNameSigDeclFragParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypePredicateTypeEnumRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		
		//LocalPredicateDeclaration:
		//    'pred' {LocalPredicateDeclaration} BDSLNameSigDeclFrag (':' type=PredicateType)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'pred' {LocalPredicateDeclaration} BDSLNameSigDeclFrag (':' type=PredicateType)?
		public Group getGroup() { return cGroup; }
		
		//'pred'
		public Keyword getPredKeyword_0() { return cPredKeyword_0; }
		
		//{LocalPredicateDeclaration}
		public Action getLocalPredicateDeclarationAction_1() { return cLocalPredicateDeclarationAction_1; }
		
		//BDSLNameSigDeclFrag
		public RuleCall getBDSLNameSigDeclFragParserRuleCall_2() { return cBDSLNameSigDeclFragParserRuleCall_2; }
		
		//(':' type=PredicateType)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//type=PredicateType
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//PredicateType
		public RuleCall getTypePredicateTypeEnumRuleCall_3_1_0() { return cTypePredicateTypeEnumRuleCall_3_1_0; }
	}
	public class BRSDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BRSDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBrsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBRSDefinitionAction_1 = (Action)cGroup.eContents().get(1);
		private final RuleCall cBDSLNameSigDeclFragParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//BRSDefinition:
		//    'brs' {BRSDefinition} BDSLNameSigDeclFrag;
		@Override public ParserRule getRule() { return rule; }
		
		//'brs' {BRSDefinition} BDSLNameSigDeclFrag
		public Group getGroup() { return cGroup; }
		
		//'brs'
		public Keyword getBrsKeyword_0() { return cBrsKeyword_0; }
		
		//{BRSDefinition}
		public Action getBRSDefinitionAction_1() { return cBRSDefinitionAction_1; }
		
		//BDSLNameSigDeclFrag
		public RuleCall getBDSLNameSigDeclFragParserRuleCall_2() { return cBDSLNameSigDeclFragParserRuleCall_2; }
	}
	public class ElementaryBigraphsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.ElementaryBigraphs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSiteParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBarrenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMergeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClosureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSubstitutionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJoinParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ElementaryBigraphs:
		//    Site | Barren | Merge | Closure | Substitution | Join;
		@Override public ParserRule getRule() { return rule; }
		
		//Site | Barren | Merge | Closure | Substitution | Join
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Site
		public RuleCall getSiteParserRuleCall_0() { return cSiteParserRuleCall_0; }
		
		//Barren
		public RuleCall getBarrenParserRuleCall_1() { return cBarrenParserRuleCall_1; }
		
		//Merge
		public RuleCall getMergeParserRuleCall_2() { return cMergeParserRuleCall_2; }
		
		//Closure
		public RuleCall getClosureParserRuleCall_3() { return cClosureParserRuleCall_3; }
		
		//Substitution
		public RuleCall getSubstitutionParserRuleCall_4() { return cSubstitutionParserRuleCall_4; }
		
		//Join
		public RuleCall getJoinParserRuleCall_5() { return cJoinParserRuleCall_5; }
	}
	public class BarrenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.Barren");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cBarrenKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cBrnKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Action cBarrenAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Barren:
		//    ('barren' | 'brn') {Barren} '()';
		@Override public ParserRule getRule() { return rule; }
		
		//('barren' | 'brn') {Barren} '()'
		public Group getGroup() { return cGroup; }
		
		//('barren' | 'brn')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'barren'
		public Keyword getBarrenKeyword_0_0() { return cBarrenKeyword_0_0; }
		
		//'brn'
		public Keyword getBrnKeyword_0_1() { return cBrnKeyword_0_1; }
		
		//{Barren}
		public Action getBarrenAction_1() { return cBarrenAction_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
	}
	public class MergeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.Merge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMergeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cMergeAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSitesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSitesINTTerminalRuleCall_3_0 = (RuleCall)cSitesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Merge:
		//    'merge' {Merge} '(' sites=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'merge' {Merge} '(' sites=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'merge'
		public Keyword getMergeKeyword_0() { return cMergeKeyword_0; }
		
		//{Merge}
		public Action getMergeAction_1() { return cMergeAction_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//sites=INT
		public Assignment getSitesAssignment_3() { return cSitesAssignment_3; }
		
		//INT
		public RuleCall getSitesINTTerminalRuleCall_3_0() { return cSitesINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.Closure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cClosureKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cClsreKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cSolidusKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Action cClosureAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Closure:
		//    ('closure' | 'clsre' | '/') {Closure} '(' value+=STRING (',' value+=STRING)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//('closure' | 'clsre' | '/') {Closure} '(' value+=STRING (',' value+=STRING)* ')'
		public Group getGroup() { return cGroup; }
		
		//('closure' | 'clsre' | '/')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'closure'
		public Keyword getClosureKeyword_0_0() { return cClosureKeyword_0_0; }
		
		//'clsre'
		public Keyword getClsreKeyword_0_1() { return cClsreKeyword_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_0_2() { return cSolidusKeyword_0_2; }
		
		//{Closure}
		public Action getClosureAction_1() { return cClosureAction_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value+=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
		
		//(',' value+=STRING)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//value+=STRING
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_1_0() { return cValueSTRINGTerminalRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SubstitutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.Substitution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSubstitutionKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSubstKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Action cSubstitutionAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromSTRINGTerminalRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cToAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cToSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cToAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cToAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cToSTRINGTerminalRuleCall_5_2_1_0 = (RuleCall)cToAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Substitution:
		//    ('substitution' | 'subst') {Substitution} '(' from=STRING ',' ('[' to+=STRING (',' to+=STRING)* ']') ')';
		@Override public ParserRule getRule() { return rule; }
		
		//('substitution' | 'subst') {Substitution} '(' from=STRING ',' ('[' to+=STRING (',' to+=STRING)* ']') ')'
		public Group getGroup() { return cGroup; }
		
		//('substitution' | 'subst')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'substitution'
		public Keyword getSubstitutionKeyword_0_0() { return cSubstitutionKeyword_0_0; }
		
		//'subst'
		public Keyword getSubstKeyword_0_1() { return cSubstKeyword_0_1; }
		
		//{Substitution}
		public Action getSubstitutionAction_1() { return cSubstitutionAction_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//from=STRING
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }
		
		//STRING
		public RuleCall getFromSTRINGTerminalRuleCall_3_0() { return cFromSTRINGTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//('[' to+=STRING (',' to+=STRING)* ']')
		public Group getGroup_5() { return cGroup_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }
		
		//to+=STRING
		public Assignment getToAssignment_5_1() { return cToAssignment_5_1; }
		
		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_5_1_0() { return cToSTRINGTerminalRuleCall_5_1_0; }
		
		//(',' to+=STRING)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//to+=STRING
		public Assignment getToAssignment_5_2_1() { return cToAssignment_5_2_1; }
		
		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_5_2_1_0() { return cToSTRINGTerminalRuleCall_5_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_3() { return cRightSquareBracketKeyword_5_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class SiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.Site");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Site:
		//    'id' '(' index=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'id' '(' index=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'id'
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJoinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cJoinAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Join:
		//    'join' {Join} '()';
		@Override public ParserRule getRule() { return rule; }
		
		//'join' {Join} '()'
		public Group getGroup() { return cGroup; }
		
		//'join'
		public Keyword getJoinKeyword_0() { return cJoinKeyword_0; }
		
		//{Join}
		public Action getJoinAction_1() { return cJoinAction_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
	}
	public class BigraphVarReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BigraphVarReference");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueLocalVarDeclCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueLocalVarDeclBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1 = (RuleCall)cValueLocalVarDeclCrossReference_0.eContents().get(1);
		
		//BigraphVarReference:
		////    {BigraphVarReference}
		//    value=[LocalVarDecl|BIGRAPH_VAR_REFERENCE_ID];
		@Override public ParserRule getRule() { return rule; }
		
		////    {BigraphVarReference}
		//    value=[LocalVarDecl|BIGRAPH_VAR_REFERENCE_ID]
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//[LocalVarDecl|BIGRAPH_VAR_REFERENCE_ID]
		public CrossReference getValueLocalVarDeclCrossReference_0() { return cValueLocalVarDeclCrossReference_0; }
		
		//BIGRAPH_VAR_REFERENCE_ID
		public RuleCall getValueLocalVarDeclBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1() { return cValueLocalVarDeclBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1; }
	}
	public class RuleVarReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.RuleVarReference");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueLocalRuleDeclCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueLocalRuleDeclBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1 = (RuleCall)cValueLocalRuleDeclCrossReference_0.eContents().get(1);
		
		//RuleVarReference:
		////    {RuleVarReference}
		//    value=[LocalRuleDecl|BIGRAPH_VAR_REFERENCE_ID];
		@Override public ParserRule getRule() { return rule; }
		
		////    {RuleVarReference}
		//    value=[LocalRuleDecl|BIGRAPH_VAR_REFERENCE_ID]
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//[LocalRuleDecl|BIGRAPH_VAR_REFERENCE_ID]
		public CrossReference getValueLocalRuleDeclCrossReference_0() { return cValueLocalRuleDeclCrossReference_0; }
		
		//BIGRAPH_VAR_REFERENCE_ID
		public RuleCall getValueLocalRuleDeclBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1() { return cValueLocalRuleDeclBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1; }
	}
	public class PredicateVarReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.PredicateVarReference");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueLocalPredicateDeclarationCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueLocalPredicateDeclarationBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1 = (RuleCall)cValueLocalPredicateDeclarationCrossReference_0.eContents().get(1);
		
		//PredicateVarReference:
		////    {PredicateVarReference}
		//    value=[LocalPredicateDeclaration|BIGRAPH_VAR_REFERENCE_ID];
		@Override public ParserRule getRule() { return rule; }
		
		////    {PredicateVarReference}
		//    value=[LocalPredicateDeclaration|BIGRAPH_VAR_REFERENCE_ID]
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//[LocalPredicateDeclaration|BIGRAPH_VAR_REFERENCE_ID]
		public CrossReference getValueLocalPredicateDeclarationCrossReference_0() { return cValueLocalPredicateDeclarationCrossReference_0; }
		
		//BIGRAPH_VAR_REFERENCE_ID
		public RuleCall getValueLocalPredicateDeclarationBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1() { return cValueLocalPredicateDeclarationBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1; }
	}
	public class BRSVarReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BRSVarReference");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueBRSDefinitionCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueBRSDefinitionBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1 = (RuleCall)cValueBRSDefinitionCrossReference_0.eContents().get(1);
		
		//BRSVarReference:
		////    {BRSVarReference}
		//    value=[BRSDefinition|BIGRAPH_VAR_REFERENCE_ID];
		@Override public ParserRule getRule() { return rule; }
		
		////    {BRSVarReference}
		//    value=[BRSDefinition|BIGRAPH_VAR_REFERENCE_ID]
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//[BRSDefinition|BIGRAPH_VAR_REFERENCE_ID]
		public CrossReference getValueBRSDefinitionCrossReference_0() { return cValueBRSDefinitionCrossReference_0; }
		
		//BIGRAPH_VAR_REFERENCE_ID
		public RuleCall getValueBRSDefinitionBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1() { return cValueBRSDefinitionBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1; }
	}
	public class BDSLDocumentReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLDocumentReference");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueBDSLDocumentCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueBDSLDocumentBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1 = (RuleCall)cValueBDSLDocumentCrossReference_0.eContents().get(1);
		
		//BDSLDocumentReference:
		//    value=[BDSLDocument|BIGRAPH_VAR_REFERENCE_ID];
		@Override public ParserRule getRule() { return rule; }
		
		//value=[BDSLDocument|BIGRAPH_VAR_REFERENCE_ID]
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//[BDSLDocument|BIGRAPH_VAR_REFERENCE_ID]
		public CrossReference getValueBDSLDocumentCrossReference_0() { return cValueBDSLDocumentCrossReference_0; }
		
		//BIGRAPH_VAR_REFERENCE_ID
		public RuleCall getValueBDSLDocumentBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1() { return cValueBDSLDocumentBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1; }
	}
	public class BigraphVarDeclOrReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BigraphVarDeclOrReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalVarDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBigraphVarReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BigraphVarDeclOrReference: // dont remove: needed to organize hierarchy
		//    LocalVarDecl | BigraphVarReference;
		@Override public ParserRule getRule() { return rule; }
		
		//// dont remove: needed to organize hierarchy
		//   LocalVarDecl | BigraphVarReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// dont remove: needed to organize hierarchy
		//   LocalVarDecl
		public RuleCall getLocalVarDeclParserRuleCall_0() { return cLocalVarDeclParserRuleCall_0; }
		
		//BigraphVarReference
		public RuleCall getBigraphVarReferenceParserRuleCall_1() { return cBigraphVarReferenceParserRuleCall_1; }
	}
	public class BigraphRuleDeclOrReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BigraphRuleDeclOrReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalRuleDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleVarReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BigraphRuleDeclOrReference: // dont remove: needed to organize hierarchy
		//    LocalRuleDecl | RuleVarReference;
		@Override public ParserRule getRule() { return rule; }
		
		//// dont remove: needed to organize hierarchy
		//   LocalRuleDecl | RuleVarReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// dont remove: needed to organize hierarchy
		//   LocalRuleDecl
		public RuleCall getLocalRuleDeclParserRuleCall_0() { return cLocalRuleDeclParserRuleCall_0; }
		
		//RuleVarReference
		public RuleCall getRuleVarReferenceParserRuleCall_1() { return cRuleVarReferenceParserRuleCall_1; }
	}
	public class BigraphPredDeclOrReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BigraphPredDeclOrReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalPredicateDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPredicateVarReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BigraphPredDeclOrReference: // dont remove: needed to organize hierarchy
		//    LocalPredicateDeclaration | PredicateVarReference;
		@Override public ParserRule getRule() { return rule; }
		
		//// dont remove: needed to organize hierarchy
		//   LocalPredicateDeclaration | PredicateVarReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// dont remove: needed to organize hierarchy
		//   LocalPredicateDeclaration
		public RuleCall getLocalPredicateDeclarationParserRuleCall_0() { return cLocalPredicateDeclarationParserRuleCall_0; }
		
		//PredicateVarReference
		public RuleCall getPredicateVarReferenceParserRuleCall_1() { return cPredicateVarReferenceParserRuleCall_1; }
	}
	public class BigraphBdslVarDeclOrReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BigraphBdslVarDeclOrReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBRSDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBRSVarReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BigraphBdslVarDeclOrReference:
		//    BRSDefinition | BRSVarReference;
		@Override public ParserRule getRule() { return rule; }
		
		//BRSDefinition | BRSVarReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BRSDefinition
		public RuleCall getBRSDefinitionParserRuleCall_0() { return cBRSDefinitionParserRuleCall_0; }
		
		//BRSVarReference
		public RuleCall getBRSVarReferenceParserRuleCall_1() { return cBRSVarReferenceParserRuleCall_1; }
	}
	public class BigraphExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BigraphExpression");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//    ///////////////////////////////////
		//// Bigraph Expression Operations //
		/////////////////////////////////////
		//BigraphExpression:
		//    Addition;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperatorBinaryParallelOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns BigraphExpression:
		//    Multiplication (({Plus.left=current} operator=BinaryParallelOperator) right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication (({Plus.left=current} operator=BinaryParallelOperator) right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(({Plus.left=current} operator=BinaryParallelOperator) right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} operator=BinaryParallelOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0() { return cPlusLeftAction_1_0_0; }
		
		//operator=BinaryParallelOperator
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//BinaryParallelOperator
		public RuleCall getOperatorBinaryParallelOperatorEnumRuleCall_1_0_1_0() { return cOperatorBinaryParallelOperatorEnumRuleCall_1_0_1_0; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperatorBinaryNestingOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns BigraphExpression:
		//    PrimaryExpression (({Multi.left=current} operator=BinaryNestingOperator) right=PrimaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression (({Multi.left=current} operator=BinaryNestingOperator) right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//(({Multi.left=current} operator=BinaryNestingOperator) right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Multi.left=current} operator=BinaryNestingOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0() { return cMultiLeftAction_1_0_0; }
		
		//operator=BinaryNestingOperator
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//BinaryNestingOperator
		public RuleCall getOperatorBinaryNestingOperatorEnumRuleCall_1_0_1_0() { return cOperatorBinaryNestingOperatorEnumRuleCall_1_0_1_0; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cBigraphExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cAbstractBigraphDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryExpression returns BigraphExpression:
		//    '(' BigraphExpression ')' |
		//    //    {BigraphLiteral} value=AbstractBigraphDeclaration
		//    AbstractBigraphDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' BigraphExpression ')' |
		////    {BigraphLiteral} value=AbstractBigraphDeclaration
		//AbstractBigraphDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' BigraphExpression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//BigraphExpression
		public RuleCall getBigraphExpressionParserRuleCall_0_1() { return cBigraphExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		////    {BigraphLiteral} value=AbstractBigraphDeclaration
		//AbstractBigraphDeclaration
		public RuleCall getAbstractBigraphDeclarationParserRuleCall_1() { return cAbstractBigraphDeclarationParserRuleCall_1; }
	}
	public class BDSLReferenceSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLReferenceSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBigraphVarReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleVarReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPredicateVarReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBRSVarReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BDSLReferenceSymbol:
		//    BigraphVarReference | RuleVarReference | PredicateVarReference | BRSVarReference;
		@Override public ParserRule getRule() { return rule; }
		
		//BigraphVarReference | RuleVarReference | PredicateVarReference | BRSVarReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BigraphVarReference
		public RuleCall getBigraphVarReferenceParserRuleCall_0() { return cBigraphVarReferenceParserRuleCall_0; }
		
		//RuleVarReference
		public RuleCall getRuleVarReferenceParserRuleCall_1() { return cRuleVarReferenceParserRuleCall_1; }
		
		//PredicateVarReference
		public RuleCall getPredicateVarReferenceParserRuleCall_2() { return cPredicateVarReferenceParserRuleCall_2; }
		
		//BRSVarReference
		public RuleCall getBRSVarReferenceParserRuleCall_3() { return cBRSVarReferenceParserRuleCall_3; }
	}
	public class AssignmentOrVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.AssignmentOrVariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBDSLVariableDeclaration2ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBDSLReferenceDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AssignmentOrVariableDeclaration:
		//    BDSLVariableDeclaration2 | BDSLReferenceDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//BDSLVariableDeclaration2 | BDSLReferenceDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BDSLVariableDeclaration2
		public RuleCall getBDSLVariableDeclaration2ParserRuleCall_0() { return cBDSLVariableDeclaration2ParserRuleCall_0; }
		
		//BDSLReferenceDeclaration
		public RuleCall getBDSLReferenceDeclarationParserRuleCall_1() { return cBDSLReferenceDeclarationParserRuleCall_1; }
	}
	public class BDSLVariableDeclaration2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLVariableDeclaration2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBDSLVariableDeclaration2Action_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableAbstractNamedSignatureElementParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBDSLExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//BDSLVariableDeclaration2:
		//    {BDSLVariableDeclaration2} (variable=AbstractNamedSignatureElement) ('=' (value=BDSLExpression))?;
		@Override public ParserRule getRule() { return rule; }
		
		//{BDSLVariableDeclaration2} (variable=AbstractNamedSignatureElement) ('=' (value=BDSLExpression))?
		public Group getGroup() { return cGroup; }
		
		//{BDSLVariableDeclaration2}
		public Action getBDSLVariableDeclaration2Action_0() { return cBDSLVariableDeclaration2Action_0; }
		
		//(variable=AbstractNamedSignatureElement)
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//AbstractNamedSignatureElement
		public RuleCall getVariableAbstractNamedSignatureElementParserRuleCall_1_0() { return cVariableAbstractNamedSignatureElementParserRuleCall_1_0; }
		
		//('=' (value=BDSLExpression))?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//(value=BDSLExpression)
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//BDSLExpression
		public RuleCall getValueBDSLExpressionParserRuleCall_2_1_0() { return cValueBDSLExpressionParserRuleCall_2_1_0; }
	}
	public class BDSLReferenceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLReferenceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBDSLReferenceDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetAbstractNamedSignatureElementCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetAbstractNamedSignatureElementBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_1_0_1 = (RuleCall)cTargetAbstractNamedSignatureElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBDSLExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//BDSLReferenceDeclaration:
		//    {BDSLReferenceDeclaration} target=[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID] ('='
		//    (value=BDSLExpression))?;
		@Override public ParserRule getRule() { return rule; }
		
		//{BDSLReferenceDeclaration} target=[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID] ('='
		//(value=BDSLExpression))?
		public Group getGroup() { return cGroup; }
		
		//{BDSLReferenceDeclaration}
		public Action getBDSLReferenceDeclarationAction_0() { return cBDSLReferenceDeclarationAction_0; }
		
		//target=[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID]
		public CrossReference getTargetAbstractNamedSignatureElementCrossReference_1_0() { return cTargetAbstractNamedSignatureElementCrossReference_1_0; }
		
		//BIGRAPH_VAR_REFERENCE_ID
		public RuleCall getTargetAbstractNamedSignatureElementBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_1_0_1() { return cTargetAbstractNamedSignatureElementBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_1_0_1; }
		
		//('='
		//   (value=BDSLExpression))?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//(value=BDSLExpression)
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//BDSLExpression
		public RuleCall getValueBDSLExpressionParserRuleCall_2_1_0() { return cValueBDSLExpressionParserRuleCall_2_1_0; }
	}
	public class BDSLExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLExpression");
		private final RuleCall cBDSLAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BDSLExpression:
		//    BDSLAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//BDSLAssignment
		public RuleCall getBDSLAssignmentParserRuleCall() { return cBDSLAssignmentParserRuleCall; }
	}
	public class BDSLAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBDSLSelectionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBDSLAssignmentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBDSLExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BDSLAssignment returns BDSLExpression:
		//    BDSLSelectionExpression ({BDSLAssignment.left=current} '=' right=BDSLExpression)? // Right associativity
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BDSLSelectionExpression ({BDSLAssignment.left=current} '=' right=BDSLExpression)?
		public Group getGroup() { return cGroup; }
		
		//BDSLSelectionExpression
		public RuleCall getBDSLSelectionExpressionParserRuleCall_0() { return cBDSLSelectionExpressionParserRuleCall_0; }
		
		//({BDSLAssignment.left=current} '=' right=BDSLExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{BDSLAssignment.left=current}
		public Action getBDSLAssignmentLeftAction_1_0() { return cBDSLAssignmentLeftAction_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//right=BDSLExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BDSLExpression
		public RuleCall getRightBDSLExpressionParserRuleCall_1_2_0() { return cRightBDSLExpressionParserRuleCall_1_2_0; }
	}
	public class BDSLReactDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLReactDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRedexAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cRedexAlternatives_0_0 = (Alternatives)cRedexAssignment_0.eContents().get(0);
		private final RuleCall cRedexBigraphExpressionParserRuleCall_0_0_0 = (RuleCall)cRedexAlternatives_0_0.eContents().get(0);
		private final RuleCall cRedexAssignableBigraphExpressionWithExplicitSigParserRuleCall_0_0_1 = (RuleCall)cRedexAlternatives_0_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReactumAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cReactumAlternatives_4_0 = (Alternatives)cReactumAssignment_4.eContents().get(0);
		private final RuleCall cReactumBigraphExpressionParserRuleCall_4_0_0 = (RuleCall)cReactumAlternatives_4_0.eContents().get(0);
		private final RuleCall cReactumAssignableBigraphExpressionWithExplicitSigParserRuleCall_4_0_1 = (RuleCall)cReactumAlternatives_4_0.eContents().get(1);
		
		////BDSLReactDefinition
		////BDSLPredDefinition
		//fragment BDSLReactDefinition:
		//    (redex=(BigraphExpression | AssignableBigraphExpressionWithExplicitSig) '}' ',' '{' reactum=(BigraphExpression |
		//    AssignableBigraphExpressionWithExplicitSig)) //TODO AssignableBigraphExpressionWithExplicitSig
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(redex=(BigraphExpression | AssignableBigraphExpressionWithExplicitSig) '}' ',' '{' reactum=(BigraphExpression |
		//AssignableBigraphExpressionWithExplicitSig))
		public Group getGroup() { return cGroup; }
		
		//redex=(BigraphExpression | AssignableBigraphExpressionWithExplicitSig)
		public Assignment getRedexAssignment_0() { return cRedexAssignment_0; }
		
		//(BigraphExpression | AssignableBigraphExpressionWithExplicitSig)
		public Alternatives getRedexAlternatives_0_0() { return cRedexAlternatives_0_0; }
		
		//BigraphExpression
		public RuleCall getRedexBigraphExpressionParserRuleCall_0_0_0() { return cRedexBigraphExpressionParserRuleCall_0_0_0; }
		
		//AssignableBigraphExpressionWithExplicitSig
		public RuleCall getRedexAssignableBigraphExpressionWithExplicitSigParserRuleCall_0_0_1() { return cRedexAssignableBigraphExpressionWithExplicitSigParserRuleCall_0_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1() { return cRightCurlyBracketKeyword_1; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//reactum=(BigraphExpression |
		//   AssignableBigraphExpressionWithExplicitSig)
		public Assignment getReactumAssignment_4() { return cReactumAssignment_4; }
		
		//(BigraphExpression |
		//    AssignableBigraphExpressionWithExplicitSig)
		public Alternatives getReactumAlternatives_4_0() { return cReactumAlternatives_4_0; }
		
		//BigraphExpression
		public RuleCall getReactumBigraphExpressionParserRuleCall_4_0_0() { return cReactumBigraphExpressionParserRuleCall_4_0_0; }
		
		//AssignableBigraphExpressionWithExplicitSig
		public RuleCall getReactumAssignableBigraphExpressionWithExplicitSigParserRuleCall_4_0_1() { return cReactumAssignableBigraphExpressionWithExplicitSigParserRuleCall_4_0_1; }
	}
	public class BDSLBrsDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLBrsDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBrsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBrsAssignableBigraphExpressionWithExplicitSigParserRuleCall_0_0 = (RuleCall)cBrsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cAgentsKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cAgentsAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cAgentsBigraphVarReferenceParserRuleCall_1_0_3_0 = (RuleCall)cAgentsAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_0_4 = (Group)cGroup_1_0.eContents().get(4);
		private final Keyword cCommaKeyword_1_0_4_0 = (Keyword)cGroup_1_0_4.eContents().get(0);
		private final Assignment cAgentsAssignment_1_0_4_1 = (Assignment)cGroup_1_0_4.eContents().get(1);
		private final RuleCall cAgentsBigraphVarReferenceParserRuleCall_1_0_4_1_0 = (RuleCall)cAgentsAssignment_1_0_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cRulesKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cRulesAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cRulesRuleVarReferenceParserRuleCall_1_1_4_0 = (RuleCall)cRulesAssignment_1_1_4.eContents().get(0);
		private final Group cGroup_1_1_5 = (Group)cGroup_1_1.eContents().get(5);
		private final Keyword cCommaKeyword_1_1_5_0 = (Keyword)cGroup_1_1_5.eContents().get(0);
		private final Assignment cRulesAssignment_1_1_5_1 = (Assignment)cGroup_1_1_5.eContents().get(1);
		private final RuleCall cRulesRuleVarReferenceParserRuleCall_1_1_5_1_0 = (RuleCall)cRulesAssignment_1_1_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_6 = (Keyword)cGroup_1_1.eContents().get(6);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cPredsKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Assignment cPredicatesAssignment_1_2_4 = (Assignment)cGroup_1_2.eContents().get(4);
		private final RuleCall cPredicatesPredicateVarReferenceParserRuleCall_1_2_4_0 = (RuleCall)cPredicatesAssignment_1_2_4.eContents().get(0);
		private final Group cGroup_1_2_5 = (Group)cGroup_1_2.eContents().get(5);
		private final Keyword cCommaKeyword_1_2_5_0 = (Keyword)cGroup_1_2_5.eContents().get(0);
		private final Assignment cPredicatesAssignment_1_2_5_1 = (Assignment)cGroup_1_2_5.eContents().get(1);
		private final RuleCall cPredicatesPredicateVarReferenceParserRuleCall_1_2_5_1_0 = (RuleCall)cPredicatesAssignment_1_2_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_6 = (Keyword)cGroup_1_2.eContents().get(6);
		
		////fragment BDSLBrsDefinition:
		////    brs=AssignableBigraphExpressionWithExplicitSig | (('agents' '=' ("[" agents+=BigraphVarReference? (','
		////    agents+=BigraphVarReference)* "]")) (',' 'rules' '=' ("[" rules+=RuleVarReference? (',' agents+=RuleVarReference)*
		////    "]")) (',' 'preds' '=' ("[" predicates+=PredicateVarReference? (',' predicates+=PredicateVarReference)* "]"))?);
		//fragment BDSLBrsDefinition:
		//    brs=AssignableBigraphExpressionWithExplicitSig |
		//(
		//    ('agents' '=' '[' agents+=BigraphVarReference (',' agents+=BigraphVarReference)* ']')
		//    (',' 'rules' '=' '[' rules+=RuleVarReference (',' rules+=RuleVarReference)* ']')
		//    (',' 'preds' '=' '[' predicates+=PredicateVarReference (',' predicates+=PredicateVarReference)* ']')?
		//)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    brs=AssignableBigraphExpressionWithExplicitSig |
		//(
		//    ('agents' '=' '[' agents+=BigraphVarReference (',' agents+=BigraphVarReference)* ']')
		//    (',' 'rules' '=' '[' rules+=RuleVarReference (',' rules+=RuleVarReference)* ']')
		//    (',' 'preds' '=' '[' predicates+=PredicateVarReference (',' predicates+=PredicateVarReference)* ']')?
		//)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//brs=AssignableBigraphExpressionWithExplicitSig
		public Assignment getBrsAssignment_0() { return cBrsAssignment_0; }
		
		//AssignableBigraphExpressionWithExplicitSig
		public RuleCall getBrsAssignableBigraphExpressionWithExplicitSigParserRuleCall_0_0() { return cBrsAssignableBigraphExpressionWithExplicitSigParserRuleCall_0_0; }
		
		//(
		//    ('agents' '=' '[' agents+=BigraphVarReference (',' agents+=BigraphVarReference)* ']')
		//    (',' 'rules' '=' '[' rules+=RuleVarReference (',' rules+=RuleVarReference)* ']')
		//    (',' 'preds' '=' '[' predicates+=PredicateVarReference (',' predicates+=PredicateVarReference)* ']')?
		//)
		public Group getGroup_1() { return cGroup_1; }
		
		//('agents' '=' '[' agents+=BigraphVarReference (',' agents+=BigraphVarReference)* ']')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'agents'
		public Keyword getAgentsKeyword_1_0_0() { return cAgentsKeyword_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_2() { return cLeftSquareBracketKeyword_1_0_2; }
		
		//agents+=BigraphVarReference
		public Assignment getAgentsAssignment_1_0_3() { return cAgentsAssignment_1_0_3; }
		
		//BigraphVarReference
		public RuleCall getAgentsBigraphVarReferenceParserRuleCall_1_0_3_0() { return cAgentsBigraphVarReferenceParserRuleCall_1_0_3_0; }
		
		//(',' agents+=BigraphVarReference)*
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }
		
		//','
		public Keyword getCommaKeyword_1_0_4_0() { return cCommaKeyword_1_0_4_0; }
		
		//agents+=BigraphVarReference
		public Assignment getAgentsAssignment_1_0_4_1() { return cAgentsAssignment_1_0_4_1; }
		
		//BigraphVarReference
		public RuleCall getAgentsBigraphVarReferenceParserRuleCall_1_0_4_1_0() { return cAgentsBigraphVarReferenceParserRuleCall_1_0_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_5() { return cRightSquareBracketKeyword_1_0_5; }
		
		//(',' 'rules' '=' '[' rules+=RuleVarReference (',' rules+=RuleVarReference)* ']')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//'rules'
		public Keyword getRulesKeyword_1_1_1() { return cRulesKeyword_1_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_2() { return cEqualsSignKeyword_1_1_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_3() { return cLeftSquareBracketKeyword_1_1_3; }
		
		//rules+=RuleVarReference
		public Assignment getRulesAssignment_1_1_4() { return cRulesAssignment_1_1_4; }
		
		//RuleVarReference
		public RuleCall getRulesRuleVarReferenceParserRuleCall_1_1_4_0() { return cRulesRuleVarReferenceParserRuleCall_1_1_4_0; }
		
		//(',' rules+=RuleVarReference)*
		public Group getGroup_1_1_5() { return cGroup_1_1_5; }
		
		//','
		public Keyword getCommaKeyword_1_1_5_0() { return cCommaKeyword_1_1_5_0; }
		
		//rules+=RuleVarReference
		public Assignment getRulesAssignment_1_1_5_1() { return cRulesAssignment_1_1_5_1; }
		
		//RuleVarReference
		public RuleCall getRulesRuleVarReferenceParserRuleCall_1_1_5_1_0() { return cRulesRuleVarReferenceParserRuleCall_1_1_5_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_6() { return cRightSquareBracketKeyword_1_1_6; }
		
		//(',' 'preds' '=' '[' predicates+=PredicateVarReference (',' predicates+=PredicateVarReference)* ']')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//'preds'
		public Keyword getPredsKeyword_1_2_1() { return cPredsKeyword_1_2_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2_2() { return cEqualsSignKeyword_1_2_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2_3() { return cLeftSquareBracketKeyword_1_2_3; }
		
		//predicates+=PredicateVarReference
		public Assignment getPredicatesAssignment_1_2_4() { return cPredicatesAssignment_1_2_4; }
		
		//PredicateVarReference
		public RuleCall getPredicatesPredicateVarReferenceParserRuleCall_1_2_4_0() { return cPredicatesPredicateVarReferenceParserRuleCall_1_2_4_0; }
		
		//(',' predicates+=PredicateVarReference)*
		public Group getGroup_1_2_5() { return cGroup_1_2_5; }
		
		//','
		public Keyword getCommaKeyword_1_2_5_0() { return cCommaKeyword_1_2_5_0; }
		
		//predicates+=PredicateVarReference
		public Assignment getPredicatesAssignment_1_2_5_1() { return cPredicatesAssignment_1_2_5_1; }
		
		//PredicateVarReference
		public RuleCall getPredicatesPredicateVarReferenceParserRuleCall_1_2_5_1_0() { return cPredicatesPredicateVarReferenceParserRuleCall_1_2_5_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2_6() { return cRightSquareBracketKeyword_1_2_6; }
	}
	public class BDSLBigraphDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLBigraphDefinition");
		private final Assignment cDefinitionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionBigraphExpressionParserRuleCall_0 = (RuleCall)cDefinitionAssignment.eContents().get(0);
		
		////('agents' '=' '[' agents+=BigraphVarReference (',' agents+=BigraphVarReference)* ']')
		////('rules' '=' '[' rules+=RuleVarReference (',' rules+=RuleVarReference)* ']')
		////('preds' '=' '[' predicates+=PredicateVarReference (',' predicates+=PredicateVarReference)* ']')?
		//fragment BDSLBigraphDefinition: // this also covers Predicate definitions
		//    definition+=(BigraphExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//// this also covers Predicate definitions
		//   definition+=(BigraphExpression)*
		public Assignment getDefinitionAssignment() { return cDefinitionAssignment; }
		
		//(BigraphExpression)
		public RuleCall getDefinitionBigraphExpressionParserRuleCall_0() { return cDefinitionBigraphExpressionParserRuleCall_0; }
	}
	public class BDSLSelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLSelectionExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBDSLTerminalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cBDSLReactDefinitionParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cBDSLBigraphDefinitionParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cBDSLBrsDefinitionParserRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//BDSLSelectionExpression returns BDSLExpression:
		//    BDSLTerminalExpression |
		//    (('{'
		//    (=> BDSLReactDefinition | => BDSLBigraphDefinition | => BDSLBrsDefinition)
		//    '}'));
		@Override public ParserRule getRule() { return rule; }
		
		//BDSLTerminalExpression |
		//(('{'
		//(=> BDSLReactDefinition | => BDSLBigraphDefinition | => BDSLBrsDefinition)
		//'}'))
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BDSLTerminalExpression
		public RuleCall getBDSLTerminalExpressionParserRuleCall_0() { return cBDSLTerminalExpressionParserRuleCall_0; }
		
		//(('{'
		//(=> BDSLReactDefinition | => BDSLBigraphDefinition | => BDSLBrsDefinition)
		//'}'))
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(=> BDSLReactDefinition | => BDSLBigraphDefinition | => BDSLBrsDefinition)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//=> BDSLReactDefinition
		public RuleCall getBDSLReactDefinitionParserRuleCall_1_1_0() { return cBDSLReactDefinitionParserRuleCall_1_1_0; }
		
		//=> BDSLBigraphDefinition
		public RuleCall getBDSLBigraphDefinitionParserRuleCall_1_1_1() { return cBDSLBigraphDefinitionParserRuleCall_1_1_1; }
		
		//=> BDSLBrsDefinition
		public RuleCall getBDSLBrsDefinitionParserRuleCall_1_1_2() { return cBDSLBrsDefinitionParserRuleCall_1_1_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class BDSLTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignableBigraphExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cBDSLExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//BDSLTerminalExpression returns BDSLExpression:
		////    {BDSLStringConstant} value=STRING |
		////    {BDSLIntConstant} value=INT |
		////    {BDSLBoolConstant} value = ('true' | 'false') |
		////    {BDSLOpenBigraphDefinitionConstant} '{'
		////    | {BDSLCloseBigraphDefinitionConstant} '}'
		//    AssignableBigraphExpression | '(' BDSLExpression ')' //this might be not needed for our case
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////    {BDSLStringConstant} value=STRING |
		////    {BDSLIntConstant} value=INT |
		////    {BDSLBoolConstant} value = ('true' | 'false') |
		////    {BDSLOpenBigraphDefinitionConstant} '{'
		////    | {BDSLCloseBigraphDefinitionConstant} '}'
		//    AssignableBigraphExpression | '(' BDSLExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////    {BDSLStringConstant} value=STRING |
		////    {BDSLIntConstant} value=INT |
		////    {BDSLBoolConstant} value = ('true' | 'false') |
		////    {BDSLOpenBigraphDefinitionConstant} '{'
		////    | {BDSLCloseBigraphDefinitionConstant} '}'
		//    AssignableBigraphExpression
		public RuleCall getAssignableBigraphExpressionParserRuleCall_0() { return cAssignableBigraphExpressionParserRuleCall_0; }
		
		//'(' BDSLExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//BDSLExpression
		public RuleCall getBDSLExpressionParserRuleCall_1_1() { return cBDSLExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ReferenceClassSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.ReferenceClassSymbol");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeAbstractNamedSignatureElementCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeAbstractNamedSignatureElementBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1 = (RuleCall)cTypeAbstractNamedSignatureElementCrossReference_0.eContents().get(1);
		
		//////////////////////////////////////
		//// Global BDSL Methods              //
		//////////////////////////////////////
		//ReferenceClassSymbol:
		//    type=[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID]
		public CrossReference getTypeAbstractNamedSignatureElementCrossReference_0() { return cTypeAbstractNamedSignatureElementCrossReference_0; }
		
		//BIGRAPH_VAR_REFERENCE_ID
		public RuleCall getTypeAbstractNamedSignatureElementBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1() { return cTypeAbstractNamedSignatureElementBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_0_1; }
	}
	public class AssignableBigraphExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.AssignableBigraphExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignableBigraphExpressionWithExplicitSigParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceClassSymbolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AssignableBigraphExpression:
		//    AssignableBigraphExpressionWithExplicitSig | ReferenceClassSymbol //BigraphVarReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignableBigraphExpressionWithExplicitSig | ReferenceClassSymbol
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AssignableBigraphExpressionWithExplicitSig
		public RuleCall getAssignableBigraphExpressionWithExplicitSigParserRuleCall_0() { return cAssignableBigraphExpressionWithExplicitSigParserRuleCall_0; }
		
		//ReferenceClassSymbol
		public RuleCall getReferenceClassSymbolParserRuleCall_1() { return cReferenceClassSymbolParserRuleCall_1; }
	}
	public class AssignableBigraphExpressionWithExplicitSigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.AssignableBigraphExpressionWithExplicitSig");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoadMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreateRandomBigraphMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AssignableBigraphExpressionWithExplicitSig: //TODO rename to methodsomething
		//    LoadMethod | CreateRandomBigraphMethod;
		@Override public ParserRule getRule() { return rule; }
		
		////TODO rename to methodsomething
		//   LoadMethod | CreateRandomBigraphMethod
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////TODO rename to methodsomething
		//   LoadMethod
		public RuleCall getLoadMethodParserRuleCall_0() { return cLoadMethodParserRuleCall_0; }
		
		//CreateRandomBigraphMethod
		public RuleCall getCreateRandomBigraphMethodParserRuleCall_1() { return cCreateRandomBigraphMethodParserRuleCall_1; }
	}
	public class MethodStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.MethodStatements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrintLnParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExportMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExecuteBRSMethodParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLoadMethodParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCreateRandomBigraphMethodParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBdslCallbackMethodsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//MethodStatements:
		//    PrintLn | ExportMethod | ExecuteBRSMethod | LoadMethod | CreateRandomBigraphMethod | BdslCallbackMethods;
		@Override public ParserRule getRule() { return rule; }
		
		//PrintLn | ExportMethod | ExecuteBRSMethod | LoadMethod | CreateRandomBigraphMethod | BdslCallbackMethods
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrintLn
		public RuleCall getPrintLnParserRuleCall_0() { return cPrintLnParserRuleCall_0; }
		
		//ExportMethod
		public RuleCall getExportMethodParserRuleCall_1() { return cExportMethodParserRuleCall_1; }
		
		//ExecuteBRSMethod
		public RuleCall getExecuteBRSMethodParserRuleCall_2() { return cExecuteBRSMethodParserRuleCall_2; }
		
		//LoadMethod
		public RuleCall getLoadMethodParserRuleCall_3() { return cLoadMethodParserRuleCall_3; }
		
		//CreateRandomBigraphMethod
		public RuleCall getCreateRandomBigraphMethodParserRuleCall_4() { return cCreateRandomBigraphMethodParserRuleCall_4; }
		
		//BdslCallbackMethods
		public RuleCall getBdslCallbackMethodsParserRuleCall_5() { return cBdslCallbackMethodsParserRuleCall_5; }
	}
	public class BdslCallbackMethodsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BdslCallbackMethods");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPredicateMatchCallbackParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleMatchCallbackParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBRSStartedCallbackParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBRSFinishedCallbackParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BdslCallbackMethods:
		//    PredicateMatchCallback | RuleMatchCallback | BRSStartedCallback | BRSFinishedCallback;
		@Override public ParserRule getRule() { return rule; }
		
		//PredicateMatchCallback | RuleMatchCallback | BRSStartedCallback | BRSFinishedCallback
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PredicateMatchCallback
		public RuleCall getPredicateMatchCallbackParserRuleCall_0() { return cPredicateMatchCallbackParserRuleCall_0; }
		
		//RuleMatchCallback
		public RuleCall getRuleMatchCallbackParserRuleCall_1() { return cRuleMatchCallbackParserRuleCall_1; }
		
		//BRSStartedCallback
		public RuleCall getBRSStartedCallbackParserRuleCall_2() { return cBRSStartedCallbackParserRuleCall_2; }
		
		//BRSFinishedCallback
		public RuleCall getBRSFinishedCallbackParserRuleCall_3() { return cBRSFinishedCallbackParserRuleCall_3; }
	}
	public class BDSLCallbackCodeBlockFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLCallbackCodeBlockFragment");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(0);
		private final RuleCall cStatementsCallbackStatementsParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//fragment BDSLCallbackCodeBlockFragment *:
		//    statements+=CallbackStatements*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=CallbackStatements*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//CallbackStatements
		public RuleCall getStatementsCallbackStatementsParserRuleCall_0() { return cStatementsCallbackStatementsParserRuleCall_0; }
	}
	public class BRSStartedCallbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BRSStartedCallback");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBRSStartedCallbackAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOnReactiveSystemStartedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBrsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBrsBRSVarReferenceParserRuleCall_3_0 = (RuleCall)cBrsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cBDSLCallbackCodeBlockFragmentParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BRSStartedCallback:
		//    {BRSStartedCallback}
		//    'onReactiveSystemStarted' '(' brs=BRSVarReference ')' '=' '{' BDSLCallbackCodeBlockFragment '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BRSStartedCallback}
		//'onReactiveSystemStarted' '(' brs=BRSVarReference ')' '=' '{' BDSLCallbackCodeBlockFragment '}'
		public Group getGroup() { return cGroup; }
		
		//{BRSStartedCallback}
		public Action getBRSStartedCallbackAction_0() { return cBRSStartedCallbackAction_0; }
		
		//'onReactiveSystemStarted'
		public Keyword getOnReactiveSystemStartedKeyword_1() { return cOnReactiveSystemStartedKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//brs=BRSVarReference
		public Assignment getBrsAssignment_3() { return cBrsAssignment_3; }
		
		//BRSVarReference
		public RuleCall getBrsBRSVarReferenceParserRuleCall_3_0() { return cBrsBRSVarReferenceParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//BDSLCallbackCodeBlockFragment
		public RuleCall getBDSLCallbackCodeBlockFragmentParserRuleCall_7() { return cBDSLCallbackCodeBlockFragmentParserRuleCall_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class BRSFinishedCallbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BRSFinishedCallback");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBRSFinishedCallbackAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOnReactiveSystemFinishedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBrsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBrsBRSVarReferenceParserRuleCall_3_0 = (RuleCall)cBrsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cBDSLCallbackCodeBlockFragmentParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BRSFinishedCallback:
		//    {BRSFinishedCallback}
		//    'onReactiveSystemFinished' '(' brs=BRSVarReference ')' '=' '{' BDSLCallbackCodeBlockFragment '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BRSFinishedCallback}
		//'onReactiveSystemFinished' '(' brs=BRSVarReference ')' '=' '{' BDSLCallbackCodeBlockFragment '}'
		public Group getGroup() { return cGroup; }
		
		//{BRSFinishedCallback}
		public Action getBRSFinishedCallbackAction_0() { return cBRSFinishedCallbackAction_0; }
		
		//'onReactiveSystemFinished'
		public Keyword getOnReactiveSystemFinishedKeyword_1() { return cOnReactiveSystemFinishedKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//brs=BRSVarReference
		public Assignment getBrsAssignment_3() { return cBrsAssignment_3; }
		
		//BRSVarReference
		public RuleCall getBrsBRSVarReferenceParserRuleCall_3_0() { return cBrsBRSVarReferenceParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//BDSLCallbackCodeBlockFragment
		public RuleCall getBDSLCallbackCodeBlockFragmentParserRuleCall_7() { return cBDSLCallbackCodeBlockFragmentParserRuleCall_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class PredicateMatchCallbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.PredicateMatchCallback");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPredicateMatchCallbackAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cListenForPredicateMatchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBrsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBrsBRSVarReferenceParserRuleCall_3_0 = (RuleCall)cBrsAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParamsPredicateVarReferenceParserRuleCall_6_0 = (RuleCall)cParamsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cParamsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cParamsPredicateVarReferenceParserRuleCall_7_1_0 = (RuleCall)cParamsAssignment_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final RuleCall cBDSLCallbackCodeBlockFragmentParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//PredicateMatchCallback:
		//    {PredicateMatchCallback}
		//    'listenForPredicateMatch' '(' brs=BRSVarReference ','
		//    '['
		//    params+=PredicateVarReference (','
		//    params+=PredicateVarReference)*
		//    ']'
		//    ')' '=' '{'
		//    BDSLCallbackCodeBlockFragment
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PredicateMatchCallback}
		//'listenForPredicateMatch' '(' brs=BRSVarReference ','
		//'['
		//params+=PredicateVarReference (','
		//params+=PredicateVarReference)*
		//']'
		//')' '=' '{'
		//BDSLCallbackCodeBlockFragment
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{PredicateMatchCallback}
		public Action getPredicateMatchCallbackAction_0() { return cPredicateMatchCallbackAction_0; }
		
		//'listenForPredicateMatch'
		public Keyword getListenForPredicateMatchKeyword_1() { return cListenForPredicateMatchKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//brs=BRSVarReference
		public Assignment getBrsAssignment_3() { return cBrsAssignment_3; }
		
		//BRSVarReference
		public RuleCall getBrsBRSVarReferenceParserRuleCall_3_0() { return cBrsBRSVarReferenceParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//params+=PredicateVarReference
		public Assignment getParamsAssignment_6() { return cParamsAssignment_6; }
		
		//PredicateVarReference
		public RuleCall getParamsPredicateVarReferenceParserRuleCall_6_0() { return cParamsPredicateVarReferenceParserRuleCall_6_0; }
		
		//(','
		//   params+=PredicateVarReference)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//params+=PredicateVarReference
		public Assignment getParamsAssignment_7_1() { return cParamsAssignment_7_1; }
		
		//PredicateVarReference
		public RuleCall getParamsPredicateVarReferenceParserRuleCall_7_1_0() { return cParamsPredicateVarReferenceParserRuleCall_7_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//BDSLCallbackCodeBlockFragment
		public RuleCall getBDSLCallbackCodeBlockFragmentParserRuleCall_12() { return cBDSLCallbackCodeBlockFragmentParserRuleCall_12; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class RuleMatchCallbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.RuleMatchCallback");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleMatchCallbackAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cListenForRuleMatchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBrsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBrsBRSVarReferenceParserRuleCall_3_0 = (RuleCall)cBrsAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParamsRuleVarReferenceParserRuleCall_6_0 = (RuleCall)cParamsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cParamsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cParamsRuleVarReferenceParserRuleCall_7_1_0 = (RuleCall)cParamsAssignment_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final RuleCall cBDSLCallbackCodeBlockFragmentParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//RuleMatchCallback:
		//    {RuleMatchCallback}
		//    'listenForRuleMatch' '(' brs=BRSVarReference ','
		//    '['
		//    params+=RuleVarReference (','
		//    params+=RuleVarReference)*
		//    ']'
		//    ')' '=' '{'
		//    BDSLCallbackCodeBlockFragment
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{RuleMatchCallback}
		//'listenForRuleMatch' '(' brs=BRSVarReference ','
		//'['
		//params+=RuleVarReference (','
		//params+=RuleVarReference)*
		//']'
		//')' '=' '{'
		//BDSLCallbackCodeBlockFragment
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{RuleMatchCallback}
		public Action getRuleMatchCallbackAction_0() { return cRuleMatchCallbackAction_0; }
		
		//'listenForRuleMatch'
		public Keyword getListenForRuleMatchKeyword_1() { return cListenForRuleMatchKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//brs=BRSVarReference
		public Assignment getBrsAssignment_3() { return cBrsAssignment_3; }
		
		//BRSVarReference
		public RuleCall getBrsBRSVarReferenceParserRuleCall_3_0() { return cBrsBRSVarReferenceParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//params+=RuleVarReference
		public Assignment getParamsAssignment_6() { return cParamsAssignment_6; }
		
		//RuleVarReference
		public RuleCall getParamsRuleVarReferenceParserRuleCall_6_0() { return cParamsRuleVarReferenceParserRuleCall_6_0; }
		
		//(','
		//   params+=RuleVarReference)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//params+=RuleVarReference
		public Assignment getParamsAssignment_7_1() { return cParamsAssignment_7_1; }
		
		//RuleVarReference
		public RuleCall getParamsRuleVarReferenceParserRuleCall_7_1_0() { return cParamsRuleVarReferenceParserRuleCall_7_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//BDSLCallbackCodeBlockFragment
		public RuleCall getBDSLCallbackCodeBlockFragmentParserRuleCall_12() { return cBDSLCallbackCodeBlockFragmentParserRuleCall_12; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class PrintLnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.PrintLn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintlnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cPrintLnAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextPrintableExpressionParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cModeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cModeOutputModeModelEnumRuleCall_4_1_0 = (RuleCall)cModeAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PrintLn:
		//    'println' {PrintLn} '(' text=(PrintableExpression) (',' mode=OutputModeModel)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'println' {PrintLn} '(' text=(PrintableExpression) (',' mode=OutputModeModel)? ')'
		public Group getGroup() { return cGroup; }
		
		//'println'
		public Keyword getPrintlnKeyword_0() { return cPrintlnKeyword_0; }
		
		//{PrintLn}
		public Action getPrintLnAction_1() { return cPrintLnAction_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//text=(PrintableExpression)
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }
		
		//(PrintableExpression)
		public RuleCall getTextPrintableExpressionParserRuleCall_3_0() { return cTextPrintableExpressionParserRuleCall_3_0; }
		
		//(',' mode=OutputModeModel)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//mode=OutputModeModel
		public Assignment getModeAssignment_4_1() { return cModeAssignment_4_1; }
		
		//OutputModeModel
		public RuleCall getModeOutputModeModelEnumRuleCall_4_1_0() { return cModeOutputModeModelEnumRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class PrintableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.PrintableExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final RuleCall cBigraphVarReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrintableExpression:
		//    ({StringLiteral} value=STRING) | (BigraphVarReference);
		@Override public ParserRule getRule() { return rule; }
		
		//({StringLiteral} value=STRING) | (BigraphVarReference)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//({StringLiteral} value=STRING)
		public Group getGroup_0() { return cGroup_0; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_0_0() { return cStringLiteralAction_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }
		
		//(BigraphVarReference)
		public RuleCall getBigraphVarReferenceParserRuleCall_1() { return cBigraphVarReferenceParserRuleCall_1; }
	}
	public class ExportMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.ExportMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cExportMethodAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableReferenceClassSymbolParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cAsKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cFormatAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cFormatExportFormatEnumRuleCall_4_3_0 = (RuleCall)cFormatAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cResourcePathKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cResourcePathAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cResourcePathSTRINGTerminalRuleCall_5_3_0 = (RuleCall)cResourcePathAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ExportMethod:
		//    'export' {ExportMethod} '('
		//    (variable=ReferenceClassSymbol)
		//    (',' 'as' '=' format=ExportFormat)?
		//    (',' 'resourcePath' '=' resourcePath=STRING)?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'export' {ExportMethod} '('
		//(variable=ReferenceClassSymbol)
		//(',' 'as' '=' format=ExportFormat)?
		//(',' 'resourcePath' '=' resourcePath=STRING)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//'export'
		public Keyword getExportKeyword_0() { return cExportKeyword_0; }
		
		//{ExportMethod}
		public Action getExportMethodAction_1() { return cExportMethodAction_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(variable=ReferenceClassSymbol)
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//ReferenceClassSymbol
		public RuleCall getVariableReferenceClassSymbolParserRuleCall_3_0() { return cVariableReferenceClassSymbolParserRuleCall_3_0; }
		
		//(',' 'as' '=' format=ExportFormat)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//'as'
		public Keyword getAsKeyword_4_1() { return cAsKeyword_4_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_2() { return cEqualsSignKeyword_4_2; }
		
		//format=ExportFormat
		public Assignment getFormatAssignment_4_3() { return cFormatAssignment_4_3; }
		
		//ExportFormat
		public RuleCall getFormatExportFormatEnumRuleCall_4_3_0() { return cFormatExportFormatEnumRuleCall_4_3_0; }
		
		//(',' 'resourcePath' '=' resourcePath=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//'resourcePath'
		public Keyword getResourcePathKeyword_5_1() { return cResourcePathKeyword_5_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_2() { return cEqualsSignKeyword_5_2; }
		
		//resourcePath=STRING
		public Assignment getResourcePathAssignment_5_3() { return cResourcePathAssignment_5_3; }
		
		//STRING
		public RuleCall getResourcePathSTRINGTerminalRuleCall_5_3_0() { return cResourcePathSTRINGTerminalRuleCall_5_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ExecuteBRSMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.ExecuteBRSMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cExecuteBRSMethodAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBrsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBrsBRSVarReferenceParserRuleCall_3_0 = (RuleCall)cBrsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExecuteBRSMethod:
		//    'execute' {ExecuteBRSMethod} '(' ((brs=BRSVarReference)) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'execute' {ExecuteBRSMethod} '(' ((brs=BRSVarReference)) ')'
		public Group getGroup() { return cGroup; }
		
		//'execute'
		public Keyword getExecuteKeyword_0() { return cExecuteKeyword_0; }
		
		//{ExecuteBRSMethod}
		public Action getExecuteBRSMethodAction_1() { return cExecuteBRSMethodAction_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//((brs=BRSVarReference))
		public Assignment getBrsAssignment_3() { return cBrsAssignment_3; }
		
		//BRSVarReference
		public RuleCall getBrsBRSVarReferenceParserRuleCall_3_0() { return cBrsBRSVarReferenceParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LoadMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.LoadMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoadMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLoadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSigKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSigAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cSigSignatureCrossReference_3_2_0 = (CrossReference)cSigAssignment_3_2.eContents().get(0);
		private final RuleCall cSigSignatureIDTerminalRuleCall_3_2_0_1 = (RuleCall)cSigSignatureCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cAsKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cFormatAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cFormatLoadFormatEnumRuleCall_4_3_0 = (RuleCall)cFormatAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cResourcePathKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cResourcePathAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cResourcePathSTRINGTerminalRuleCall_5_3_0 = (RuleCall)cResourcePathAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LoadMethod returns AssignableBigraphExpressionWithExplicitSig:
		//    {LoadMethod}
		//    'load' '(' ('sig' '=' sig=[Signature])? (',' 'as' '=' format=LoadFormat)? (',' 'resourcePath' '='
		//    resourcePath=STRING)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{LoadMethod}
		//'load' '(' ('sig' '=' sig=[Signature])? (',' 'as' '=' format=LoadFormat)? (',' 'resourcePath' '='
		//resourcePath=STRING)? ')'
		public Group getGroup() { return cGroup; }
		
		//{LoadMethod}
		public Action getLoadMethodAction_0() { return cLoadMethodAction_0; }
		
		//'load'
		public Keyword getLoadKeyword_1() { return cLoadKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//('sig' '=' sig=[Signature])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'sig'
		public Keyword getSigKeyword_3_0() { return cSigKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//sig=[Signature]
		public Assignment getSigAssignment_3_2() { return cSigAssignment_3_2; }
		
		//[Signature]
		public CrossReference getSigSignatureCrossReference_3_2_0() { return cSigSignatureCrossReference_3_2_0; }
		
		//ID
		public RuleCall getSigSignatureIDTerminalRuleCall_3_2_0_1() { return cSigSignatureIDTerminalRuleCall_3_2_0_1; }
		
		//(',' 'as' '=' format=LoadFormat)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//'as'
		public Keyword getAsKeyword_4_1() { return cAsKeyword_4_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_2() { return cEqualsSignKeyword_4_2; }
		
		//format=LoadFormat
		public Assignment getFormatAssignment_4_3() { return cFormatAssignment_4_3; }
		
		//LoadFormat
		public RuleCall getFormatLoadFormatEnumRuleCall_4_3_0() { return cFormatLoadFormatEnumRuleCall_4_3_0; }
		
		//(',' 'resourcePath' '='
		//   resourcePath=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//'resourcePath'
		public Keyword getResourcePathKeyword_5_1() { return cResourcePathKeyword_5_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_2() { return cEqualsSignKeyword_5_2; }
		
		//resourcePath=STRING
		public Assignment getResourcePathAssignment_5_3() { return cResourcePathAssignment_5_3; }
		
		//STRING
		public RuleCall getResourcePathSTRINGTerminalRuleCall_5_3_0() { return cResourcePathSTRINGTerminalRuleCall_5_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class CreateRandomBigraphMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.CreateRandomBigraphMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreateRandomBigraphMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRandomBigraphKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSigKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSigAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cSigSignatureCrossReference_3_2_0 = (CrossReference)cSigAssignment_3_2.eContents().get(0);
		private final RuleCall cSigSignatureIDTerminalRuleCall_3_2_0_1 = (RuleCall)cSigSignatureCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cNKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cNAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cNINTTerminalRuleCall_4_3_0 = (RuleCall)cNAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cTKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cTAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cTINTTerminalRuleCall_5_3_0 = (RuleCall)cTAssignment_5_3.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cPKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cEqualsSignKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cPAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cPFLOATParserRuleCall_6_3_0 = (RuleCall)cPAssignment_6_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CreateRandomBigraphMethod returns AssignableBigraphExpressionWithExplicitSig:
		//    {CreateRandomBigraphMethod}
		//    'randomBigraph' '('
		//    ('sig' '=' sig=[Signature])?
		//    (',' 'n' '=' n=INT)?
		//    (',' 't' '=' t=INT)?
		//    (',' 'p' '=' p=FLOAT)?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{CreateRandomBigraphMethod}
		//'randomBigraph' '('
		//('sig' '=' sig=[Signature])?
		//(',' 'n' '=' n=INT)?
		//(',' 't' '=' t=INT)?
		//(',' 'p' '=' p=FLOAT)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{CreateRandomBigraphMethod}
		public Action getCreateRandomBigraphMethodAction_0() { return cCreateRandomBigraphMethodAction_0; }
		
		//'randomBigraph'
		public Keyword getRandomBigraphKeyword_1() { return cRandomBigraphKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//('sig' '=' sig=[Signature])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'sig'
		public Keyword getSigKeyword_3_0() { return cSigKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//sig=[Signature]
		public Assignment getSigAssignment_3_2() { return cSigAssignment_3_2; }
		
		//[Signature]
		public CrossReference getSigSignatureCrossReference_3_2_0() { return cSigSignatureCrossReference_3_2_0; }
		
		//ID
		public RuleCall getSigSignatureIDTerminalRuleCall_3_2_0_1() { return cSigSignatureIDTerminalRuleCall_3_2_0_1; }
		
		//(',' 'n' '=' n=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//'n'
		public Keyword getNKeyword_4_1() { return cNKeyword_4_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_2() { return cEqualsSignKeyword_4_2; }
		
		//n=INT
		public Assignment getNAssignment_4_3() { return cNAssignment_4_3; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_4_3_0() { return cNINTTerminalRuleCall_4_3_0; }
		
		//(',' 't' '=' t=INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//'t'
		public Keyword getTKeyword_5_1() { return cTKeyword_5_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_2() { return cEqualsSignKeyword_5_2; }
		
		//t=INT
		public Assignment getTAssignment_5_3() { return cTAssignment_5_3; }
		
		//INT
		public RuleCall getTINTTerminalRuleCall_5_3_0() { return cTINTTerminalRuleCall_5_3_0; }
		
		//(',' 'p' '=' p=FLOAT)?
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//'p'
		public Keyword getPKeyword_6_1() { return cPKeyword_6_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_2() { return cEqualsSignKeyword_6_2; }
		
		//p=FLOAT
		public Assignment getPAssignment_6_3() { return cPAssignment_6_3; }
		
		//FLOAT
		public RuleCall getPFLOATParserRuleCall_6_3_0() { return cPFLOATParserRuleCall_6_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class AbstractMainStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.AbstractMainStatements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodStatementsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentOrVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUDFOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//    ////////////////////////////////////
		//// Main Block and Main Statements //
		//////////////////////////////////////
		//AbstractMainStatements:
		//    MethodStatements | AssignmentOrVariableDeclaration | UDFOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//MethodStatements | AssignmentOrVariableDeclaration | UDFOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MethodStatements
		public RuleCall getMethodStatementsParserRuleCall_0() { return cMethodStatementsParserRuleCall_0; }
		
		//AssignmentOrVariableDeclaration
		public RuleCall getAssignmentOrVariableDeclarationParserRuleCall_1() { return cAssignmentOrVariableDeclarationParserRuleCall_1; }
		
		//UDFOperation
		public RuleCall getUDFOperationParserRuleCall_2() { return cUDFOperationParserRuleCall_2; }
	}
	public class CallbackStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.CallbackStatements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodStatementsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUDFOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CallbackStatements:
		//    MethodStatements | UDFOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//MethodStatements | UDFOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MethodStatements
		public RuleCall getMethodStatementsParserRuleCall_0() { return cMethodStatementsParserRuleCall_0; }
		
		//UDFOperation
		public RuleCall getUDFOperationParserRuleCall_1() { return cUDFOperationParserRuleCall_1; }
	}
	public class UDFOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.UDFOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUDFOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionUdfCallExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UDFOperation:
		//    {UDFOperation}
		//    'j' '{' expression+=UdfCallExpression* '}' //body=XBlockExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{UDFOperation}
		//'j' '{' expression+=UdfCallExpression* '}'
		public Group getGroup() { return cGroup; }
		
		//{UDFOperation}
		public Action getUDFOperationAction_0() { return cUDFOperationAction_0; }
		
		//'j'
		public Keyword getJKeyword_1() { return cJKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//expression+=UdfCallExpression*
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//UdfCallExpression
		public RuleCall getExpressionUdfCallExpressionParserRuleCall_3_0() { return cExpressionUdfCallExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class UdfCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.UdfCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUdfCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeJvmTypeCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cParamsUDFArgumentTypesCrossReference_2_1_1_0 = (CrossReference)cParamsAssignment_2_1_1.eContents().get(0);
		private final RuleCall cParamsUDFArgumentTypesBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cParamsUDFArgumentTypesCrossReference_2_1_1_0.eContents().get(1);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final CrossReference cParamsUDFArgumentTypesCrossReference_2_1_2_1_0 = (CrossReference)cParamsAssignment_2_1_2_1.eContents().get(0);
		private final RuleCall cParamsUDFArgumentTypesBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_2_1_2_1_0_1 = (RuleCall)cParamsUDFArgumentTypesCrossReference_2_1_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//UdfCallExpression returns XExpression:
		//    {UdfCallExpression}
		//    //    (=>(type=JvmTypeReference name=QualifiedName) | name=QualifiedName)
		//    (type=[jvmTypes::JvmType|QualifiedName])
		//    //    name=FQN //QualifiedName
		//    ('()'
		//    | ('('
		//    ////        (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		//    params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID] (','
		//    params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID])*
		//    ')'));
		@Override public ParserRule getRule() { return rule; }
		
		//{UdfCallExpression}
		////    (=>(type=JvmTypeReference name=QualifiedName) | name=QualifiedName)
		//(type=[jvmTypes::JvmType|QualifiedName])
		////    name=FQN //QualifiedName
		//('()'
		//| ('('
		//////        (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		//params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID] (','
		//params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID])*
		//')'))
		public Group getGroup() { return cGroup; }
		
		//{UdfCallExpression}
		public Action getUdfCallExpressionAction_0() { return cUdfCallExpressionAction_0; }
		
		////    (=>(type=JvmTypeReference name=QualifiedName) | name=QualifiedName)
		//(type=[jvmTypes::JvmType|QualifiedName])
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_1_0() { return cTypeJvmTypeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_1_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_1_0_1; }
		
		////    name=FQN //QualifiedName
		//('()'
		//| ('('
		//////        (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		//params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID] (','
		//params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID])*
		//')'))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_0() { return cLeftParenthesisRightParenthesisKeyword_2_0; }
		
		//('('
		//   ////        (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		//   params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID] (','
		//   params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID])*
		//   ')')
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//////        (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		//params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID]
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }
		
		//[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID]
		public CrossReference getParamsUDFArgumentTypesCrossReference_2_1_1_0() { return cParamsUDFArgumentTypesCrossReference_2_1_1_0; }
		
		//BIGRAPH_VAR_REFERENCE_ID
		public RuleCall getParamsUDFArgumentTypesBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_2_1_1_0_1() { return cParamsUDFArgumentTypesBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_2_1_1_0_1; }
		
		//(','
		//   params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID])*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }
		
		//params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID]
		public Assignment getParamsAssignment_2_1_2_1() { return cParamsAssignment_2_1_2_1; }
		
		//[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID]
		public CrossReference getParamsUDFArgumentTypesCrossReference_2_1_2_1_0() { return cParamsUDFArgumentTypesCrossReference_2_1_2_1_0; }
		
		//BIGRAPH_VAR_REFERENCE_ID
		public RuleCall getParamsUDFArgumentTypesBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_2_1_2_1_0_1() { return cParamsUDFArgumentTypesBIGRAPH_VAR_REFERENCE_IDTerminalRuleCall_2_1_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_3() { return cRightParenthesisKeyword_2_1_3; }
	}
	public class UDFArgumentTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.UDFArgumentTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractNamedSignatureElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBDSLDocumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UDFArgumentTypes:
		//    AbstractNamedSignatureElement | BDSLDocument;
		@Override public ParserRule getRule() { return rule; }
		
		//AbstractNamedSignatureElement | BDSLDocument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AbstractNamedSignatureElement
		public RuleCall getAbstractNamedSignatureElementParserRuleCall_0() { return cAbstractNamedSignatureElementParserRuleCall_0; }
		
		//BDSLDocument
		public RuleCall getBDSLDocumentParserRuleCall_1() { return cBDSLDocumentParserRuleCall_1; }
	}
	public class BDSLBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BDSLBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBDSLBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsAbstractMainStatementsParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BDSLBlock:
		//    {BDSLBlock} '{' statements+=AbstractMainStatements* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BDSLBlock} '{' statements+=AbstractMainStatements* '}'
		public Group getGroup() { return cGroup; }
		
		//{BDSLBlock}
		public Action getBDSLBlockAction_0() { return cBDSLBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=AbstractMainStatements*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//AbstractMainStatements
		public RuleCall getStatementsAbstractMainStatementsParserRuleCall_2_0() { return cStatementsAbstractMainStatementsParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	public class VariableCreationTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.VariableCreationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINSTANTIATEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINSTANTIATEDInstanceKeyword_0_0 = (Keyword)cINSTANTIATEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOADEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOADEDLoadedKeyword_1_0 = (Keyword)cLOADEDEnumLiteralDeclaration_1.eContents().get(0);
		
		//    //////////////////////////
		//// Enums                //
		////////////////////////////
		//enum VariableCreationType:
		//    INSTANTIATED='instance' | LOADED='loaded';
		public EnumRule getRule() { return rule; }
		
		//INSTANTIATED='instance' | LOADED='loaded'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INSTANTIATED='instance'
		public EnumLiteralDeclaration getINSTANTIATEDEnumLiteralDeclaration_0() { return cINSTANTIATEDEnumLiteralDeclaration_0; }
		
		//'instance'
		public Keyword getINSTANTIATEDInstanceKeyword_0_0() { return cINSTANTIATEDInstanceKeyword_0_0; }
		
		//LOADED='loaded'
		public EnumLiteralDeclaration getLOADEDEnumLiteralDeclaration_1() { return cLOADEDEnumLiteralDeclaration_1; }
		
		//'loaded'
		public Keyword getLOADEDLoadedKeyword_1_0() { return cLOADEDLoadedKeyword_1_0; }
	}
	public class BinaryParallelOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BinaryParallelOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNSETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNSETUNSETKeyword_0_0 = (Keyword)cUNSETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMERGEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMERGEVerticalLineKeyword_1_0 = (Keyword)cMERGEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPARALLELEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPARALLELVerticalLineVerticalLineKeyword_2_0 = (Keyword)cPARALLELEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BinaryParallelOperator:
		//    UNSET | MERGE='|' | PARALLEL='||';
		public EnumRule getRule() { return rule; }
		
		//UNSET | MERGE='|' | PARALLEL='||'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNSET
		public EnumLiteralDeclaration getUNSETEnumLiteralDeclaration_0() { return cUNSETEnumLiteralDeclaration_0; }
		
		public Keyword getUNSETUNSETKeyword_0_0() { return cUNSETUNSETKeyword_0_0; }
		
		//MERGE='|'
		public EnumLiteralDeclaration getMERGEEnumLiteralDeclaration_1() { return cMERGEEnumLiteralDeclaration_1; }
		
		//'|'
		public Keyword getMERGEVerticalLineKeyword_1_0() { return cMERGEVerticalLineKeyword_1_0; }
		
		//PARALLEL='||'
		public EnumLiteralDeclaration getPARALLELEnumLiteralDeclaration_2() { return cPARALLELEnumLiteralDeclaration_2; }
		
		//'||'
		public Keyword getPARALLELVerticalLineVerticalLineKeyword_2_0() { return cPARALLELVerticalLineVerticalLineKeyword_2_0; }
	}
	public class BinaryNestingOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BinaryNestingOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNSET2EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNSET2UNSET2Keyword_0_0 = (Keyword)cUNSET2EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNESTINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNESTINGHyphenMinusKeyword_1_0 = (Keyword)cNESTINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPOSITIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOMPOSITIONAsteriskKeyword_2_0 = (Keyword)cCOMPOSITIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BinaryNestingOperator:
		//    UNSET2 | NESTING='-' | COMPOSITION='*' //we cannot use a simple '.' right now
		//;
		public EnumRule getRule() { return rule; }
		
		//UNSET2 | NESTING='-' | COMPOSITION='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNSET2
		public EnumLiteralDeclaration getUNSET2EnumLiteralDeclaration_0() { return cUNSET2EnumLiteralDeclaration_0; }
		
		public Keyword getUNSET2UNSET2Keyword_0_0() { return cUNSET2UNSET2Keyword_0_0; }
		
		//NESTING='-'
		public EnumLiteralDeclaration getNESTINGEnumLiteralDeclaration_1() { return cNESTINGEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getNESTINGHyphenMinusKeyword_1_0() { return cNESTINGHyphenMinusKeyword_1_0; }
		
		//COMPOSITION='*'
		public EnumLiteralDeclaration getCOMPOSITIONEnumLiteralDeclaration_2() { return cCOMPOSITIONEnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getCOMPOSITIONAsteriskKeyword_2_0() { return cCOMPOSITIONAsteriskKeyword_2_0; }
	}
	public class ControlTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.ControlType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cACTIVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cACTIVEActiveKeyword_0_0 = (Keyword)cACTIVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cATOMICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cATOMICAtomicKeyword_1_0 = (Keyword)cATOMICEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPASSIVEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPASSIVEPassiveKeyword_2_0 = (Keyword)cPASSIVEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ControlType:
		//    ACTIVE='active' | ATOMIC='atomic' | PASSIVE='passive';
		public EnumRule getRule() { return rule; }
		
		//ACTIVE='active' | ATOMIC='atomic' | PASSIVE='passive'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ACTIVE='active'
		public EnumLiteralDeclaration getACTIVEEnumLiteralDeclaration_0() { return cACTIVEEnumLiteralDeclaration_0; }
		
		//'active'
		public Keyword getACTIVEActiveKeyword_0_0() { return cACTIVEActiveKeyword_0_0; }
		
		//ATOMIC='atomic'
		public EnumLiteralDeclaration getATOMICEnumLiteralDeclaration_1() { return cATOMICEnumLiteralDeclaration_1; }
		
		//'atomic'
		public Keyword getATOMICAtomicKeyword_1_0() { return cATOMICAtomicKeyword_1_0; }
		
		//PASSIVE='passive'
		public EnumLiteralDeclaration getPASSIVEEnumLiteralDeclaration_2() { return cPASSIVEEnumLiteralDeclaration_2; }
		
		//'passive'
		public Keyword getPASSIVEPassiveKeyword_2_0() { return cPASSIVEPassiveKeyword_2_0; }
	}
	public class PredicateTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.PredicateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPARTIALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPARTIALPartialKeyword_0_0 = (Keyword)cPARTIALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cISOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cISOIsoKeyword_1_0 = (Keyword)cISOEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PredicateType:
		//    PARTIAL='partial' | ISO='iso';
		public EnumRule getRule() { return rule; }
		
		//PARTIAL='partial' | ISO='iso'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PARTIAL='partial'
		public EnumLiteralDeclaration getPARTIALEnumLiteralDeclaration_0() { return cPARTIALEnumLiteralDeclaration_0; }
		
		//'partial'
		public Keyword getPARTIALPartialKeyword_0_0() { return cPARTIALPartialKeyword_0_0; }
		
		//ISO='iso'
		public EnumLiteralDeclaration getISOEnumLiteralDeclaration_1() { return cISOEnumLiteralDeclaration_1; }
		
		//'iso'
		public Keyword getISOIsoKeyword_1_0() { return cISOIsoKeyword_1_0; }
	}
	public class ExportFormatElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.ExportFormat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cXMIEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cXMIXmiKeyword_0_0 = (Keyword)cXMIEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cECOREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cECOREEcoreKeyword_1_0 = (Keyword)cECOREEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBIGRAPHEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBIGRAPHERBigrapherKeyword_2_0 = (Keyword)cBIGRAPHEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBIGMCEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBIGMCBigmcKeyword_3_0 = (Keyword)cBIGMCEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPNGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPNGPngKeyword_4_0 = (Keyword)cPNGEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ExportFormat:
		//    XMI='xmi' | ECORE='ecore' | BIGRAPHER='bigrapher' | BIGMC='bigmc' | PNG='png';
		public EnumRule getRule() { return rule; }
		
		//XMI='xmi' | ECORE='ecore' | BIGRAPHER='bigrapher' | BIGMC='bigmc' | PNG='png'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XMI='xmi'
		public EnumLiteralDeclaration getXMIEnumLiteralDeclaration_0() { return cXMIEnumLiteralDeclaration_0; }
		
		//'xmi'
		public Keyword getXMIXmiKeyword_0_0() { return cXMIXmiKeyword_0_0; }
		
		//ECORE='ecore'
		public EnumLiteralDeclaration getECOREEnumLiteralDeclaration_1() { return cECOREEnumLiteralDeclaration_1; }
		
		//'ecore'
		public Keyword getECOREEcoreKeyword_1_0() { return cECOREEcoreKeyword_1_0; }
		
		//BIGRAPHER='bigrapher'
		public EnumLiteralDeclaration getBIGRAPHEREnumLiteralDeclaration_2() { return cBIGRAPHEREnumLiteralDeclaration_2; }
		
		//'bigrapher'
		public Keyword getBIGRAPHERBigrapherKeyword_2_0() { return cBIGRAPHERBigrapherKeyword_2_0; }
		
		//BIGMC='bigmc'
		public EnumLiteralDeclaration getBIGMCEnumLiteralDeclaration_3() { return cBIGMCEnumLiteralDeclaration_3; }
		
		//'bigmc'
		public Keyword getBIGMCBigmcKeyword_3_0() { return cBIGMCBigmcKeyword_3_0; }
		
		//PNG='png'
		public EnumLiteralDeclaration getPNGEnumLiteralDeclaration_4() { return cPNGEnumLiteralDeclaration_4; }
		
		//'png'
		public Keyword getPNGPngKeyword_4_0() { return cPNGPngKeyword_4_0; }
	}
	public class LoadFormatElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.LoadFormat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cXMIEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cXMIXmiKeyword_0_0 = (Keyword)cXMIEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cECOREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cECOREEcoreKeyword_1_0 = (Keyword)cECOREEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LoadFormat:
		//    XMI='xmi' | ECORE='ecore';
		public EnumRule getRule() { return rule; }
		
		//XMI='xmi' | ECORE='ecore'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XMI='xmi'
		public EnumLiteralDeclaration getXMIEnumLiteralDeclaration_0() { return cXMIEnumLiteralDeclaration_0; }
		
		//'xmi'
		public Keyword getXMIXmiKeyword_0_0() { return cXMIXmiKeyword_0_0; }
		
		//ECORE='ecore'
		public EnumLiteralDeclaration getECOREEnumLiteralDeclaration_1() { return cECOREEnumLiteralDeclaration_1; }
		
		//'ecore'
		public Keyword getECOREEcoreKeyword_1_0() { return cECOREEcoreKeyword_1_0; }
	}
	public class DataSinkElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.DataSink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTDOUTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTDOUTConsoleKeyword_0_0 = (Keyword)cSTDOUTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOCAL_FILEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOCAL_FILEFileKeyword_1_0 = (Keyword)cLOCAL_FILEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDBEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDBCdoKeyword_2_0 = (Keyword)cDBEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DataSink:
		//    STDOUT='console' | LOCAL_FILE='file' | DB='cdo';
		public EnumRule getRule() { return rule; }
		
		//STDOUT='console' | LOCAL_FILE='file' | DB='cdo'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STDOUT='console'
		public EnumLiteralDeclaration getSTDOUTEnumLiteralDeclaration_0() { return cSTDOUTEnumLiteralDeclaration_0; }
		
		//'console'
		public Keyword getSTDOUTConsoleKeyword_0_0() { return cSTDOUTConsoleKeyword_0_0; }
		
		//LOCAL_FILE='file'
		public EnumLiteralDeclaration getLOCAL_FILEEnumLiteralDeclaration_1() { return cLOCAL_FILEEnumLiteralDeclaration_1; }
		
		//'file'
		public Keyword getLOCAL_FILEFileKeyword_1_0() { return cLOCAL_FILEFileKeyword_1_0; }
		
		//DB='cdo'
		public EnumLiteralDeclaration getDBEnumLiteralDeclaration_2() { return cDBEnumLiteralDeclaration_2; }
		
		//'cdo'
		public Keyword getDBCdoKeyword_2_0() { return cDBCdoKeyword_2_0; }
	}
	public class DataSourceElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.DataSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNSPECIFIEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNSPECIFIEDUnspecifiedKeyword_0_0 = (Keyword)cUNSPECIFIEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOCAL_FILEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOCAL_FILEFileKeyword_1_0 = (Keyword)cLOCAL_FILEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDBEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDBCdoKeyword_2_0 = (Keyword)cDBEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCLASSPATHEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCLASSPATHClasspathKeyword_3_0 = (Keyword)cCLASSPATHEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DataSource:
		//    UNSPECIFIED='unspecified' | LOCAL_FILE='file' | DB='cdo' | CLASSPATH='classpath';
		public EnumRule getRule() { return rule; }
		
		//UNSPECIFIED='unspecified' | LOCAL_FILE='file' | DB='cdo' | CLASSPATH='classpath'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNSPECIFIED='unspecified'
		public EnumLiteralDeclaration getUNSPECIFIEDEnumLiteralDeclaration_0() { return cUNSPECIFIEDEnumLiteralDeclaration_0; }
		
		//'unspecified'
		public Keyword getUNSPECIFIEDUnspecifiedKeyword_0_0() { return cUNSPECIFIEDUnspecifiedKeyword_0_0; }
		
		//LOCAL_FILE='file'
		public EnumLiteralDeclaration getLOCAL_FILEEnumLiteralDeclaration_1() { return cLOCAL_FILEEnumLiteralDeclaration_1; }
		
		//'file'
		public Keyword getLOCAL_FILEFileKeyword_1_0() { return cLOCAL_FILEFileKeyword_1_0; }
		
		//DB='cdo'
		public EnumLiteralDeclaration getDBEnumLiteralDeclaration_2() { return cDBEnumLiteralDeclaration_2; }
		
		//'cdo'
		public Keyword getDBCdoKeyword_2_0() { return cDBCdoKeyword_2_0; }
		
		//CLASSPATH='classpath'
		public EnumLiteralDeclaration getCLASSPATHEnumLiteralDeclaration_3() { return cCLASSPATHEnumLiteralDeclaration_3; }
		
		//'classpath'
		public Keyword getCLASSPATHClasspathKeyword_3_0() { return cCLASSPATHClasspathKeyword_3_0; }
	}
	public class OutputModeModelElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.OutputModeModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINSTANCE_MODELEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINSTANCE_MODELXmiKeyword_0_0 = (Keyword)cINSTANCE_MODELEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMETA_MODELEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMETA_MODELEcoreKeyword_1_0 = (Keyword)cMETA_MODELEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OutputModeModel:
		//    INSTANCE_MODEL='xmi' | META_MODEL='ecore';
		public EnumRule getRule() { return rule; }
		
		//INSTANCE_MODEL='xmi' | META_MODEL='ecore'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INSTANCE_MODEL='xmi'
		public EnumLiteralDeclaration getINSTANCE_MODELEnumLiteralDeclaration_0() { return cINSTANCE_MODELEnumLiteralDeclaration_0; }
		
		//'xmi'
		public Keyword getINSTANCE_MODELXmiKeyword_0_0() { return cINSTANCE_MODELXmiKeyword_0_0; }
		
		//META_MODEL='ecore'
		public EnumLiteralDeclaration getMETA_MODELEnumLiteralDeclaration_1() { return cMETA_MODELEnumLiteralDeclaration_1; }
		
		//'ecore'
		public Keyword getMETA_MODELEcoreKeyword_1_0() { return cMETA_MODELEcoreKeyword_1_0; }
	}
	
	private final BDSLDocumentElements pBDSLDocument;
	private final QualifiedNameWithWildcardOptionalElements pQualifiedNameWithWildcardOptional;
	private final FQNElements pFQN;
	private final TerminalRule tBIGRAPH_VAR_REFERENCE_ID;
	private final BDSLDocumentImportElements pBDSLDocumentImport;
	private final BDSLUdfImportElements pBDSLUdfImport;
	private final TerminalRule tINT;
	private final FLOATElements pFLOAT;
	private final BDSLNameSigDeclFragElements pBDSLNameSigDeclFrag;
	private final BDSLSiteVarsAndControlVarFragElements pBDSLSiteVarsAndControlVarFrag;
	private final AbstractElementElements pAbstractElement;
	private final AbstractNamedSignatureElementElements pAbstractNamedSignatureElement;
	private final MainElementElements pMainElement;
	private final MAIN_KEYWORDElements pMAIN_KEYWORD;
	private final IdOrKwElements pIdOrKw;
	private final KEYWORDElements pKEYWORD;
	private final VAR_DECL_KEWORDSElements pVAR_DECL_KEWORDS;
	private final METHOD_KEYWORDElements pMETHOD_KEYWORD;
	private final SignatureElements pSignature;
	private final ControlDefElements pControlDef;
	private final LocalVarDeclElements pLocalVarDecl;
	private final LVD2Elements pLVD2;
	private final AbstractBigraphDeclarationElements pAbstractBigraphDeclaration;
	private final NodeExpressionCallElements pNodeExpressionCall;
	private final NameConstantElements pNameConstant;
	private final SiteVarsElements pSiteVars;
	private final LocalRuleDeclElements pLocalRuleDecl;
	private final LocalPredicateDeclarationElements pLocalPredicateDeclaration;
	private final BRSDefinitionElements pBRSDefinition;
	private final ElementaryBigraphsElements pElementaryBigraphs;
	private final BarrenElements pBarren;
	private final MergeElements pMerge;
	private final ClosureElements pClosure;
	private final SubstitutionElements pSubstitution;
	private final SiteElements pSite;
	private final JoinElements pJoin;
	private final BigraphVarReferenceElements pBigraphVarReference;
	private final RuleVarReferenceElements pRuleVarReference;
	private final PredicateVarReferenceElements pPredicateVarReference;
	private final BRSVarReferenceElements pBRSVarReference;
	private final BDSLDocumentReferenceElements pBDSLDocumentReference;
	private final BigraphVarDeclOrReferenceElements pBigraphVarDeclOrReference;
	private final BigraphRuleDeclOrReferenceElements pBigraphRuleDeclOrReference;
	private final BigraphPredDeclOrReferenceElements pBigraphPredDeclOrReference;
	private final BigraphBdslVarDeclOrReferenceElements pBigraphBdslVarDeclOrReference;
	private final BigraphExpressionElements pBigraphExpression;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final BDSLReferenceSymbolElements pBDSLReferenceSymbol;
	private final AssignmentOrVariableDeclarationElements pAssignmentOrVariableDeclaration;
	private final BDSLVariableDeclaration2Elements pBDSLVariableDeclaration2;
	private final BDSLReferenceDeclarationElements pBDSLReferenceDeclaration;
	private final BDSLExpressionElements pBDSLExpression;
	private final BDSLAssignmentElements pBDSLAssignment;
	private final BDSLReactDefinitionElements pBDSLReactDefinition;
	private final BDSLBrsDefinitionElements pBDSLBrsDefinition;
	private final BDSLBigraphDefinitionElements pBDSLBigraphDefinition;
	private final BDSLSelectionExpressionElements pBDSLSelectionExpression;
	private final BDSLTerminalExpressionElements pBDSLTerminalExpression;
	private final ReferenceClassSymbolElements pReferenceClassSymbol;
	private final AssignableBigraphExpressionElements pAssignableBigraphExpression;
	private final AssignableBigraphExpressionWithExplicitSigElements pAssignableBigraphExpressionWithExplicitSig;
	private final MethodStatementsElements pMethodStatements;
	private final BdslCallbackMethodsElements pBdslCallbackMethods;
	private final BDSLCallbackCodeBlockFragmentElements pBDSLCallbackCodeBlockFragment;
	private final BRSStartedCallbackElements pBRSStartedCallback;
	private final BRSFinishedCallbackElements pBRSFinishedCallback;
	private final PredicateMatchCallbackElements pPredicateMatchCallback;
	private final RuleMatchCallbackElements pRuleMatchCallback;
	private final PrintLnElements pPrintLn;
	private final PrintableExpressionElements pPrintableExpression;
	private final ExportMethodElements pExportMethod;
	private final ExecuteBRSMethodElements pExecuteBRSMethod;
	private final LoadMethodElements pLoadMethod;
	private final CreateRandomBigraphMethodElements pCreateRandomBigraphMethod;
	private final AbstractMainStatementsElements pAbstractMainStatements;
	private final CallbackStatementsElements pCallbackStatements;
	private final UDFOperationElements pUDFOperation;
	private final UdfCallExpressionElements pUdfCallExpression;
	private final UDFArgumentTypesElements pUDFArgumentTypes;
	private final BDSLBlockElements pBDSLBlock;
	private final VariableCreationTypeElements eVariableCreationType;
	private final BinaryParallelOperatorElements eBinaryParallelOperator;
	private final BinaryNestingOperatorElements eBinaryNestingOperator;
	private final ControlTypeElements eControlType;
	private final PredicateTypeElements ePredicateType;
	private final ExportFormatElements eExportFormat;
	private final LoadFormatElements eLoadFormat;
	private final DataSinkElements eDataSink;
	private final DataSourceElements eDataSource;
	private final OutputModeModelElements eOutputModeModel;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public BDSLGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pBDSLDocument = new BDSLDocumentElements();
		this.pQualifiedNameWithWildcardOptional = new QualifiedNameWithWildcardOptionalElements();
		this.pFQN = new FQNElements();
		this.tBIGRAPH_VAR_REFERENCE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.BIGRAPH_VAR_REFERENCE_ID");
		this.pBDSLDocumentImport = new BDSLDocumentImportElements();
		this.pBDSLUdfImport = new BDSLUdfImportElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.bigraphs.dsl.BDSL.INT");
		this.pFLOAT = new FLOATElements();
		this.pBDSLNameSigDeclFrag = new BDSLNameSigDeclFragElements();
		this.pBDSLSiteVarsAndControlVarFrag = new BDSLSiteVarsAndControlVarFragElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pAbstractNamedSignatureElement = new AbstractNamedSignatureElementElements();
		this.pMainElement = new MainElementElements();
		this.pMAIN_KEYWORD = new MAIN_KEYWORDElements();
		this.pIdOrKw = new IdOrKwElements();
		this.pKEYWORD = new KEYWORDElements();
		this.pVAR_DECL_KEWORDS = new VAR_DECL_KEWORDSElements();
		this.pMETHOD_KEYWORD = new METHOD_KEYWORDElements();
		this.pSignature = new SignatureElements();
		this.pControlDef = new ControlDefElements();
		this.pLocalVarDecl = new LocalVarDeclElements();
		this.pLVD2 = new LVD2Elements();
		this.pAbstractBigraphDeclaration = new AbstractBigraphDeclarationElements();
		this.pNodeExpressionCall = new NodeExpressionCallElements();
		this.pNameConstant = new NameConstantElements();
		this.pSiteVars = new SiteVarsElements();
		this.pLocalRuleDecl = new LocalRuleDeclElements();
		this.pLocalPredicateDeclaration = new LocalPredicateDeclarationElements();
		this.pBRSDefinition = new BRSDefinitionElements();
		this.pElementaryBigraphs = new ElementaryBigraphsElements();
		this.pBarren = new BarrenElements();
		this.pMerge = new MergeElements();
		this.pClosure = new ClosureElements();
		this.pSubstitution = new SubstitutionElements();
		this.pSite = new SiteElements();
		this.pJoin = new JoinElements();
		this.pBigraphVarReference = new BigraphVarReferenceElements();
		this.pRuleVarReference = new RuleVarReferenceElements();
		this.pPredicateVarReference = new PredicateVarReferenceElements();
		this.pBRSVarReference = new BRSVarReferenceElements();
		this.pBDSLDocumentReference = new BDSLDocumentReferenceElements();
		this.pBigraphVarDeclOrReference = new BigraphVarDeclOrReferenceElements();
		this.pBigraphRuleDeclOrReference = new BigraphRuleDeclOrReferenceElements();
		this.pBigraphPredDeclOrReference = new BigraphPredDeclOrReferenceElements();
		this.pBigraphBdslVarDeclOrReference = new BigraphBdslVarDeclOrReferenceElements();
		this.pBigraphExpression = new BigraphExpressionElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pBDSLReferenceSymbol = new BDSLReferenceSymbolElements();
		this.pAssignmentOrVariableDeclaration = new AssignmentOrVariableDeclarationElements();
		this.pBDSLVariableDeclaration2 = new BDSLVariableDeclaration2Elements();
		this.pBDSLReferenceDeclaration = new BDSLReferenceDeclarationElements();
		this.pBDSLExpression = new BDSLExpressionElements();
		this.pBDSLAssignment = new BDSLAssignmentElements();
		this.pBDSLReactDefinition = new BDSLReactDefinitionElements();
		this.pBDSLBrsDefinition = new BDSLBrsDefinitionElements();
		this.pBDSLBigraphDefinition = new BDSLBigraphDefinitionElements();
		this.pBDSLSelectionExpression = new BDSLSelectionExpressionElements();
		this.pBDSLTerminalExpression = new BDSLTerminalExpressionElements();
		this.pReferenceClassSymbol = new ReferenceClassSymbolElements();
		this.pAssignableBigraphExpression = new AssignableBigraphExpressionElements();
		this.pAssignableBigraphExpressionWithExplicitSig = new AssignableBigraphExpressionWithExplicitSigElements();
		this.pMethodStatements = new MethodStatementsElements();
		this.pBdslCallbackMethods = new BdslCallbackMethodsElements();
		this.pBDSLCallbackCodeBlockFragment = new BDSLCallbackCodeBlockFragmentElements();
		this.pBRSStartedCallback = new BRSStartedCallbackElements();
		this.pBRSFinishedCallback = new BRSFinishedCallbackElements();
		this.pPredicateMatchCallback = new PredicateMatchCallbackElements();
		this.pRuleMatchCallback = new RuleMatchCallbackElements();
		this.pPrintLn = new PrintLnElements();
		this.pPrintableExpression = new PrintableExpressionElements();
		this.pExportMethod = new ExportMethodElements();
		this.pExecuteBRSMethod = new ExecuteBRSMethodElements();
		this.pLoadMethod = new LoadMethodElements();
		this.pCreateRandomBigraphMethod = new CreateRandomBigraphMethodElements();
		this.pAbstractMainStatements = new AbstractMainStatementsElements();
		this.pCallbackStatements = new CallbackStatementsElements();
		this.pUDFOperation = new UDFOperationElements();
		this.pUdfCallExpression = new UdfCallExpressionElements();
		this.pUDFArgumentTypes = new UDFArgumentTypesElements();
		this.pBDSLBlock = new BDSLBlockElements();
		this.eVariableCreationType = new VariableCreationTypeElements();
		this.eBinaryParallelOperator = new BinaryParallelOperatorElements();
		this.eBinaryNestingOperator = new BinaryNestingOperatorElements();
		this.eControlType = new ControlTypeElements();
		this.ePredicateType = new PredicateTypeElements();
		this.eExportFormat = new ExportFormatElements();
		this.eLoadFormat = new LoadFormatElements();
		this.eDataSink = new DataSinkElements();
		this.eDataSource = new DataSourceElements();
		this.eOutputModeModel = new OutputModeModelElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.bigraphs.dsl.BDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//// types are in italic font
	//BDSLDocument:
	//// first imports and signatures
	////        (importDeclarations+=XImportDeclaration*)
	////    importSection=XImportSection?
	//    ('namespace' name=QualifiedName)? (importDeclarationsBdsl+=BDSLDocumentImport | importDeclarationsUdf+=BDSLUdfImport)*
	//    // signature definitions
	//    signature+=(Signature)*
	//    // and unordered group of global and local statements
	//    ((statements+=(AbstractElement)*) & (main=MainElement)?);
	public BDSLDocumentElements getBDSLDocumentAccess() {
		return pBDSLDocument;
	}
	
	public ParserRule getBDSLDocumentRule() {
		return getBDSLDocumentAccess().getRule();
	}
	
	//    //FqnWithWildCard:
	////    QualifiedName ('.*')?;
	//QualifiedNameWithWildcardOptional:
	//    QualifiedName ('.' '*')?;
	public QualifiedNameWithWildcardOptionalElements getQualifiedNameWithWildcardOptionalAccess() {
		return pQualifiedNameWithWildcardOptional;
	}
	
	public ParserRule getQualifiedNameWithWildcardOptionalRule() {
		return getQualifiedNameWithWildcardOptionalAccess().getRule();
	}
	
	//FQN:
	//    ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	// // TODO: could be now also IdOrKw instead of ID
	////terminal DOLLAR: '$';
	//terminal BIGRAPH_VAR_REFERENCE_ID returns ecore::EString:
	//    ('$' ID ('.' ID)*) //cannot reference to FQN directly,
	//;
	public TerminalRule getBIGRAPH_VAR_REFERENCE_IDRule() {
		return tBIGRAPH_VAR_REFERENCE_ID;
	}
	
	//BDSLDocumentImport:
	//    {BDSLDocumentImport} 'import:bdsl' importedNamespace=QualifiedNameWithWildcardOptional;
	public BDSLDocumentImportElements getBDSLDocumentImportAccess() {
		return pBDSLDocumentImport;
	}
	
	public ParserRule getBDSLDocumentImportRule() {
		return getBDSLDocumentImportAccess().getRule();
	}
	
	//BDSLUdfImport:
	//    {BDSLUdfImport} 'import:udf' importedNamespace=QualifiedNameWithWildcardOptional;
	public BDSLUdfImportElements getBDSLUdfImportAccess() {
		return pBDSLUdfImport;
	}
	
	public ParserRule getBDSLUdfImportRule() {
		return getBDSLUdfImportAccess().getRule();
	}
	
	//    //terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	//terminal INT returns ecore::EInt:
	//    ('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//FLOAT returns ecore::EFloat:
	//    INT '.' INT;
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//fragment BDSLNameSigDeclFrag *:
	//    name=ID ("(" sig=[Signature] ")")?;
	public BDSLNameSigDeclFragElements getBDSLNameSigDeclFragAccess() {
		return pBDSLNameSigDeclFrag;
	}
	
	public ParserRule getBDSLNameSigDeclFragRule() {
		return getBDSLNameSigDeclFragAccess().getRule();
	}
	
	//fragment BDSLSiteVarsAndControlVarFrag *:
	//    (("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ':' controlType=[ControlVariable|FQN])?;
	public BDSLSiteVarsAndControlVarFragElements getBDSLSiteVarsAndControlVarFragAccess() {
		return pBDSLSiteVarsAndControlVarFrag;
	}
	
	public ParserRule getBDSLSiteVarsAndControlVarFragRule() {
		return getBDSLSiteVarsAndControlVarFragAccess().getRule();
	}
	
	//AbstractElement:
	//    AssignmentOrVariableDeclaration | BdslCallbackMethods;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//AbstractNamedSignatureElement: //TODO rename to namedelement
	//    LocalVarDecl | LocalRuleDecl | LocalPredicateDeclaration | BRSDefinition;
	public AbstractNamedSignatureElementElements getAbstractNamedSignatureElementAccess() {
		return pAbstractNamedSignatureElement;
	}
	
	public ParserRule getAbstractNamedSignatureElementRule() {
		return getAbstractNamedSignatureElementAccess().getRule();
	}
	
	//MainElement:
	//    MAIN_KEYWORD {MainElement} body=BDSLBlock;
	public MainElementElements getMainElementAccess() {
		return pMainElement;
	}
	
	public ParserRule getMainElementRule() {
		return getMainElementAccess().getRule();
	}
	
	// //value+=(AbstractMainStatements)*
	//MAIN_KEYWORD:
	//    "main" "=";
	public MAIN_KEYWORDElements getMAIN_KEYWORDAccess() {
		return pMAIN_KEYWORD;
	}
	
	public ParserRule getMAIN_KEYWORDRule() {
		return getMAIN_KEYWORDAccess().getRule();
	}
	
	//IdOrKw:
	//    ID | KEYWORD;
	public IdOrKwElements getIdOrKwAccess() {
		return pIdOrKw;
	}
	
	public ParserRule getIdOrKwRule() {
		return getIdOrKwAccess().getRule();
	}
	
	//KEYWORD:
	//    MAIN_KEYWORD
	//    | METHOD_KEYWORD
	//    | VAR_DECL_KEWORDS;
	public KEYWORDElements getKEYWORDAccess() {
		return pKEYWORD;
	}
	
	public ParserRule getKEYWORDRule() {
		return getKEYWORDAccess().getRule();
	}
	
	//VAR_DECL_KEWORDS:
	//    'react'
	//    | 'val'
	//    | 'pred'
	//    | 'brs'
	//    | 'signature';
	public VAR_DECL_KEWORDSElements getVAR_DECL_KEWORDSAccess() {
		return pVAR_DECL_KEWORDS;
	}
	
	public ParserRule getVAR_DECL_KEWORDSRule() {
		return getVAR_DECL_KEWORDSAccess().getRule();
	}
	
	//METHOD_KEYWORD:
	//    'load'
	//    | 'randomBigraph'
	//    | 'export'
	//    | 'execute'
	//    | 'println';
	public METHOD_KEYWORDElements getMETHOD_KEYWORDAccess() {
		return pMETHOD_KEYWORD;
	}
	
	public ParserRule getMETHOD_KEYWORDRule() {
		return getMETHOD_KEYWORDAccess().getRule();
	}
	
	//    // Creates a signature class with the same name: shortcut for "signature returns signature"
	//Signature:
	//    {Signature}
	//    'signature'
	//    name=ID
	//    ('{' (controls+=ControlDef)+ '}')?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//ControlDef returns ControlVariable:
	//    {ControlVariable} type=ControlType? (('ctrl' name=ID 'arity' arity=INT) | (name=ID ':' arity=INT));
	public ControlDefElements getControlDefAccess() {
		return pControlDef;
	}
	
	public ParserRule getControlDefRule() {
		return getControlDefAccess().getRule();
	}
	
	//    ///////////////////////////////////
	//// Bigraphs                         //
	/////////////////////////////////////
	//LocalVarDecl:
	//    'val' {LocalVarDecl} BDSLNameSigDeclFrag BDSLSiteVarsAndControlVarFrag;
	public LocalVarDeclElements getLocalVarDeclAccess() {
		return pLocalVarDecl;
	}
	
	public ParserRule getLocalVarDeclRule() {
		return getLocalVarDeclAccess().getRule();
	}
	
	//LVD2 returns LocalVarDecl:
	//    {LVD2} 'val' name=ID BDSLSiteVarsAndControlVarFrag '=' '{' BDSLBigraphDefinition '}';
	public LVD2Elements getLVD2Access() {
		return pLVD2;
	}
	
	public ParserRule getLVD2Rule() {
		return getLVD2Access().getRule();
	}
	
	//AbstractBigraphDeclaration:
	//    BigraphVarReference | NodeExpressionCall | LVD2 | ElementaryBigraphs;
	public AbstractBigraphDeclarationElements getAbstractBigraphDeclarationAccess() {
		return pAbstractBigraphDeclaration;
	}
	
	public ParserRule getAbstractBigraphDeclarationRule() {
		return getAbstractBigraphDeclarationAccess().getRule();
	}
	
	//NodeExpressionCall:
	//    value=[ControlVariable|FQN] ("[" links+=NameConstant? (',' links+=NameConstant)* "]")?;
	public NodeExpressionCallElements getNodeExpressionCallAccess() {
		return pNodeExpressionCall;
	}
	
	public ParserRule getNodeExpressionCallRule() {
		return getNodeExpressionCallAccess().getRule();
	}
	
	//NameConstant:
	//    {NameConstant} value=STRING;
	public NameConstantElements getNameConstantAccess() {
		return pNameConstant;
	}
	
	public ParserRule getNameConstantRule() {
		return getNameConstantAccess().getRule();
	}
	
	//    //TODO: change to linkNamevars or so
	//SiteVars:
	//    name=ID;
	public SiteVarsElements getSiteVarsAccess() {
		return pSiteVars;
	}
	
	public ParserRule getSiteVarsRule() {
		return getSiteVarsAccess().getRule();
	}
	
	//LocalRuleDecl:
	//    "react" {LocalRuleDecl} BDSLNameSigDeclFrag;
	public LocalRuleDeclElements getLocalRuleDeclAccess() {
		return pLocalRuleDecl;
	}
	
	public ParserRule getLocalRuleDeclRule() {
		return getLocalRuleDeclAccess().getRule();
	}
	
	//LocalPredicateDeclaration:
	//    'pred' {LocalPredicateDeclaration} BDSLNameSigDeclFrag (':' type=PredicateType)?;
	public LocalPredicateDeclarationElements getLocalPredicateDeclarationAccess() {
		return pLocalPredicateDeclaration;
	}
	
	public ParserRule getLocalPredicateDeclarationRule() {
		return getLocalPredicateDeclarationAccess().getRule();
	}
	
	//BRSDefinition:
	//    'brs' {BRSDefinition} BDSLNameSigDeclFrag;
	public BRSDefinitionElements getBRSDefinitionAccess() {
		return pBRSDefinition;
	}
	
	public ParserRule getBRSDefinitionRule() {
		return getBRSDefinitionAccess().getRule();
	}
	
	//ElementaryBigraphs:
	//    Site | Barren | Merge | Closure | Substitution | Join;
	public ElementaryBigraphsElements getElementaryBigraphsAccess() {
		return pElementaryBigraphs;
	}
	
	public ParserRule getElementaryBigraphsRule() {
		return getElementaryBigraphsAccess().getRule();
	}
	
	//Barren:
	//    ('barren' | 'brn') {Barren} '()';
	public BarrenElements getBarrenAccess() {
		return pBarren;
	}
	
	public ParserRule getBarrenRule() {
		return getBarrenAccess().getRule();
	}
	
	//Merge:
	//    'merge' {Merge} '(' sites=INT ')';
	public MergeElements getMergeAccess() {
		return pMerge;
	}
	
	public ParserRule getMergeRule() {
		return getMergeAccess().getRule();
	}
	
	//Closure:
	//    ('closure' | 'clsre' | '/') {Closure} '(' value+=STRING (',' value+=STRING)* ')';
	public ClosureElements getClosureAccess() {
		return pClosure;
	}
	
	public ParserRule getClosureRule() {
		return getClosureAccess().getRule();
	}
	
	//Substitution:
	//    ('substitution' | 'subst') {Substitution} '(' from=STRING ',' ('[' to+=STRING (',' to+=STRING)* ']') ')';
	public SubstitutionElements getSubstitutionAccess() {
		return pSubstitution;
	}
	
	public ParserRule getSubstitutionRule() {
		return getSubstitutionAccess().getRule();
	}
	
	//Site:
	//    'id' '(' index=INT ')';
	public SiteElements getSiteAccess() {
		return pSite;
	}
	
	public ParserRule getSiteRule() {
		return getSiteAccess().getRule();
	}
	
	//Join:
	//    'join' {Join} '()';
	public JoinElements getJoinAccess() {
		return pJoin;
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}
	
	//BigraphVarReference:
	////    {BigraphVarReference}
	//    value=[LocalVarDecl|BIGRAPH_VAR_REFERENCE_ID];
	public BigraphVarReferenceElements getBigraphVarReferenceAccess() {
		return pBigraphVarReference;
	}
	
	public ParserRule getBigraphVarReferenceRule() {
		return getBigraphVarReferenceAccess().getRule();
	}
	
	//RuleVarReference:
	////    {RuleVarReference}
	//    value=[LocalRuleDecl|BIGRAPH_VAR_REFERENCE_ID];
	public RuleVarReferenceElements getRuleVarReferenceAccess() {
		return pRuleVarReference;
	}
	
	public ParserRule getRuleVarReferenceRule() {
		return getRuleVarReferenceAccess().getRule();
	}
	
	//PredicateVarReference:
	////    {PredicateVarReference}
	//    value=[LocalPredicateDeclaration|BIGRAPH_VAR_REFERENCE_ID];
	public PredicateVarReferenceElements getPredicateVarReferenceAccess() {
		return pPredicateVarReference;
	}
	
	public ParserRule getPredicateVarReferenceRule() {
		return getPredicateVarReferenceAccess().getRule();
	}
	
	//BRSVarReference:
	////    {BRSVarReference}
	//    value=[BRSDefinition|BIGRAPH_VAR_REFERENCE_ID];
	public BRSVarReferenceElements getBRSVarReferenceAccess() {
		return pBRSVarReference;
	}
	
	public ParserRule getBRSVarReferenceRule() {
		return getBRSVarReferenceAccess().getRule();
	}
	
	//BDSLDocumentReference:
	//    value=[BDSLDocument|BIGRAPH_VAR_REFERENCE_ID];
	public BDSLDocumentReferenceElements getBDSLDocumentReferenceAccess() {
		return pBDSLDocumentReference;
	}
	
	public ParserRule getBDSLDocumentReferenceRule() {
		return getBDSLDocumentReferenceAccess().getRule();
	}
	
	//BigraphVarDeclOrReference: // dont remove: needed to organize hierarchy
	//    LocalVarDecl | BigraphVarReference;
	public BigraphVarDeclOrReferenceElements getBigraphVarDeclOrReferenceAccess() {
		return pBigraphVarDeclOrReference;
	}
	
	public ParserRule getBigraphVarDeclOrReferenceRule() {
		return getBigraphVarDeclOrReferenceAccess().getRule();
	}
	
	//BigraphRuleDeclOrReference: // dont remove: needed to organize hierarchy
	//    LocalRuleDecl | RuleVarReference;
	public BigraphRuleDeclOrReferenceElements getBigraphRuleDeclOrReferenceAccess() {
		return pBigraphRuleDeclOrReference;
	}
	
	public ParserRule getBigraphRuleDeclOrReferenceRule() {
		return getBigraphRuleDeclOrReferenceAccess().getRule();
	}
	
	//BigraphPredDeclOrReference: // dont remove: needed to organize hierarchy
	//    LocalPredicateDeclaration | PredicateVarReference;
	public BigraphPredDeclOrReferenceElements getBigraphPredDeclOrReferenceAccess() {
		return pBigraphPredDeclOrReference;
	}
	
	public ParserRule getBigraphPredDeclOrReferenceRule() {
		return getBigraphPredDeclOrReferenceAccess().getRule();
	}
	
	//BigraphBdslVarDeclOrReference:
	//    BRSDefinition | BRSVarReference;
	public BigraphBdslVarDeclOrReferenceElements getBigraphBdslVarDeclOrReferenceAccess() {
		return pBigraphBdslVarDeclOrReference;
	}
	
	public ParserRule getBigraphBdslVarDeclOrReferenceRule() {
		return getBigraphBdslVarDeclOrReferenceAccess().getRule();
	}
	
	//    ///////////////////////////////////
	//// Bigraph Expression Operations //
	/////////////////////////////////////
	//BigraphExpression:
	//    Addition;
	public BigraphExpressionElements getBigraphExpressionAccess() {
		return pBigraphExpression;
	}
	
	public ParserRule getBigraphExpressionRule() {
		return getBigraphExpressionAccess().getRule();
	}
	
	//Addition returns BigraphExpression:
	//    Multiplication (({Plus.left=current} operator=BinaryParallelOperator) right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns BigraphExpression:
	//    PrimaryExpression (({Multi.left=current} operator=BinaryNestingOperator) right=PrimaryExpression)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//PrimaryExpression returns BigraphExpression:
	//    '(' BigraphExpression ')' |
	//    //    {BigraphLiteral} value=AbstractBigraphDeclaration
	//    AbstractBigraphDeclaration;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//BDSLReferenceSymbol:
	//    BigraphVarReference | RuleVarReference | PredicateVarReference | BRSVarReference;
	public BDSLReferenceSymbolElements getBDSLReferenceSymbolAccess() {
		return pBDSLReferenceSymbol;
	}
	
	public ParserRule getBDSLReferenceSymbolRule() {
		return getBDSLReferenceSymbolAccess().getRule();
	}
	
	//AssignmentOrVariableDeclaration:
	//    BDSLVariableDeclaration2 | BDSLReferenceDeclaration;
	public AssignmentOrVariableDeclarationElements getAssignmentOrVariableDeclarationAccess() {
		return pAssignmentOrVariableDeclaration;
	}
	
	public ParserRule getAssignmentOrVariableDeclarationRule() {
		return getAssignmentOrVariableDeclarationAccess().getRule();
	}
	
	//BDSLVariableDeclaration2:
	//    {BDSLVariableDeclaration2} (variable=AbstractNamedSignatureElement) ('=' (value=BDSLExpression))?;
	public BDSLVariableDeclaration2Elements getBDSLVariableDeclaration2Access() {
		return pBDSLVariableDeclaration2;
	}
	
	public ParserRule getBDSLVariableDeclaration2Rule() {
		return getBDSLVariableDeclaration2Access().getRule();
	}
	
	//BDSLReferenceDeclaration:
	//    {BDSLReferenceDeclaration} target=[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID] ('='
	//    (value=BDSLExpression))?;
	public BDSLReferenceDeclarationElements getBDSLReferenceDeclarationAccess() {
		return pBDSLReferenceDeclaration;
	}
	
	public ParserRule getBDSLReferenceDeclarationRule() {
		return getBDSLReferenceDeclarationAccess().getRule();
	}
	
	//BDSLExpression:
	//    BDSLAssignment;
	public BDSLExpressionElements getBDSLExpressionAccess() {
		return pBDSLExpression;
	}
	
	public ParserRule getBDSLExpressionRule() {
		return getBDSLExpressionAccess().getRule();
	}
	
	//BDSLAssignment returns BDSLExpression:
	//    BDSLSelectionExpression ({BDSLAssignment.left=current} '=' right=BDSLExpression)? // Right associativity
	//;
	public BDSLAssignmentElements getBDSLAssignmentAccess() {
		return pBDSLAssignment;
	}
	
	public ParserRule getBDSLAssignmentRule() {
		return getBDSLAssignmentAccess().getRule();
	}
	
	////BDSLReactDefinition
	////BDSLPredDefinition
	//fragment BDSLReactDefinition:
	//    (redex=(BigraphExpression | AssignableBigraphExpressionWithExplicitSig) '}' ',' '{' reactum=(BigraphExpression |
	//    AssignableBigraphExpressionWithExplicitSig)) //TODO AssignableBigraphExpressionWithExplicitSig
	//;
	public BDSLReactDefinitionElements getBDSLReactDefinitionAccess() {
		return pBDSLReactDefinition;
	}
	
	public ParserRule getBDSLReactDefinitionRule() {
		return getBDSLReactDefinitionAccess().getRule();
	}
	
	////fragment BDSLBrsDefinition:
	////    brs=AssignableBigraphExpressionWithExplicitSig | (('agents' '=' ("[" agents+=BigraphVarReference? (','
	////    agents+=BigraphVarReference)* "]")) (',' 'rules' '=' ("[" rules+=RuleVarReference? (',' agents+=RuleVarReference)*
	////    "]")) (',' 'preds' '=' ("[" predicates+=PredicateVarReference? (',' predicates+=PredicateVarReference)* "]"))?);
	//fragment BDSLBrsDefinition:
	//    brs=AssignableBigraphExpressionWithExplicitSig |
	//(
	//    ('agents' '=' '[' agents+=BigraphVarReference (',' agents+=BigraphVarReference)* ']')
	//    (',' 'rules' '=' '[' rules+=RuleVarReference (',' rules+=RuleVarReference)* ']')
	//    (',' 'preds' '=' '[' predicates+=PredicateVarReference (',' predicates+=PredicateVarReference)* ']')?
	//)
	//;
	public BDSLBrsDefinitionElements getBDSLBrsDefinitionAccess() {
		return pBDSLBrsDefinition;
	}
	
	public ParserRule getBDSLBrsDefinitionRule() {
		return getBDSLBrsDefinitionAccess().getRule();
	}
	
	////('agents' '=' '[' agents+=BigraphVarReference (',' agents+=BigraphVarReference)* ']')
	////('rules' '=' '[' rules+=RuleVarReference (',' rules+=RuleVarReference)* ']')
	////('preds' '=' '[' predicates+=PredicateVarReference (',' predicates+=PredicateVarReference)* ']')?
	//fragment BDSLBigraphDefinition: // this also covers Predicate definitions
	//    definition+=(BigraphExpression)*;
	public BDSLBigraphDefinitionElements getBDSLBigraphDefinitionAccess() {
		return pBDSLBigraphDefinition;
	}
	
	public ParserRule getBDSLBigraphDefinitionRule() {
		return getBDSLBigraphDefinitionAccess().getRule();
	}
	
	//BDSLSelectionExpression returns BDSLExpression:
	//    BDSLTerminalExpression |
	//    (('{'
	//    (=> BDSLReactDefinition | => BDSLBigraphDefinition | => BDSLBrsDefinition)
	//    '}'));
	public BDSLSelectionExpressionElements getBDSLSelectionExpressionAccess() {
		return pBDSLSelectionExpression;
	}
	
	public ParserRule getBDSLSelectionExpressionRule() {
		return getBDSLSelectionExpressionAccess().getRule();
	}
	
	//BDSLTerminalExpression returns BDSLExpression:
	////    {BDSLStringConstant} value=STRING |
	////    {BDSLIntConstant} value=INT |
	////    {BDSLBoolConstant} value = ('true' | 'false') |
	////    {BDSLOpenBigraphDefinitionConstant} '{'
	////    | {BDSLCloseBigraphDefinitionConstant} '}'
	//    AssignableBigraphExpression | '(' BDSLExpression ')' //this might be not needed for our case
	//;
	public BDSLTerminalExpressionElements getBDSLTerminalExpressionAccess() {
		return pBDSLTerminalExpression;
	}
	
	public ParserRule getBDSLTerminalExpressionRule() {
		return getBDSLTerminalExpressionAccess().getRule();
	}
	
	//////////////////////////////////////
	//// Global BDSL Methods              //
	//////////////////////////////////////
	//ReferenceClassSymbol:
	//    type=[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID];
	public ReferenceClassSymbolElements getReferenceClassSymbolAccess() {
		return pReferenceClassSymbol;
	}
	
	public ParserRule getReferenceClassSymbolRule() {
		return getReferenceClassSymbolAccess().getRule();
	}
	
	//AssignableBigraphExpression:
	//    AssignableBigraphExpressionWithExplicitSig | ReferenceClassSymbol //BigraphVarReference
	//;
	public AssignableBigraphExpressionElements getAssignableBigraphExpressionAccess() {
		return pAssignableBigraphExpression;
	}
	
	public ParserRule getAssignableBigraphExpressionRule() {
		return getAssignableBigraphExpressionAccess().getRule();
	}
	
	//AssignableBigraphExpressionWithExplicitSig: //TODO rename to methodsomething
	//    LoadMethod | CreateRandomBigraphMethod;
	public AssignableBigraphExpressionWithExplicitSigElements getAssignableBigraphExpressionWithExplicitSigAccess() {
		return pAssignableBigraphExpressionWithExplicitSig;
	}
	
	public ParserRule getAssignableBigraphExpressionWithExplicitSigRule() {
		return getAssignableBigraphExpressionWithExplicitSigAccess().getRule();
	}
	
	//MethodStatements:
	//    PrintLn | ExportMethod | ExecuteBRSMethod | LoadMethod | CreateRandomBigraphMethod | BdslCallbackMethods;
	public MethodStatementsElements getMethodStatementsAccess() {
		return pMethodStatements;
	}
	
	public ParserRule getMethodStatementsRule() {
		return getMethodStatementsAccess().getRule();
	}
	
	//BdslCallbackMethods:
	//    PredicateMatchCallback | RuleMatchCallback | BRSStartedCallback | BRSFinishedCallback;
	public BdslCallbackMethodsElements getBdslCallbackMethodsAccess() {
		return pBdslCallbackMethods;
	}
	
	public ParserRule getBdslCallbackMethodsRule() {
		return getBdslCallbackMethodsAccess().getRule();
	}
	
	//fragment BDSLCallbackCodeBlockFragment *:
	//    statements+=CallbackStatements*;
	public BDSLCallbackCodeBlockFragmentElements getBDSLCallbackCodeBlockFragmentAccess() {
		return pBDSLCallbackCodeBlockFragment;
	}
	
	public ParserRule getBDSLCallbackCodeBlockFragmentRule() {
		return getBDSLCallbackCodeBlockFragmentAccess().getRule();
	}
	
	//BRSStartedCallback:
	//    {BRSStartedCallback}
	//    'onReactiveSystemStarted' '(' brs=BRSVarReference ')' '=' '{' BDSLCallbackCodeBlockFragment '}';
	public BRSStartedCallbackElements getBRSStartedCallbackAccess() {
		return pBRSStartedCallback;
	}
	
	public ParserRule getBRSStartedCallbackRule() {
		return getBRSStartedCallbackAccess().getRule();
	}
	
	//BRSFinishedCallback:
	//    {BRSFinishedCallback}
	//    'onReactiveSystemFinished' '(' brs=BRSVarReference ')' '=' '{' BDSLCallbackCodeBlockFragment '}';
	public BRSFinishedCallbackElements getBRSFinishedCallbackAccess() {
		return pBRSFinishedCallback;
	}
	
	public ParserRule getBRSFinishedCallbackRule() {
		return getBRSFinishedCallbackAccess().getRule();
	}
	
	//PredicateMatchCallback:
	//    {PredicateMatchCallback}
	//    'listenForPredicateMatch' '(' brs=BRSVarReference ','
	//    '['
	//    params+=PredicateVarReference (','
	//    params+=PredicateVarReference)*
	//    ']'
	//    ')' '=' '{'
	//    BDSLCallbackCodeBlockFragment
	//    '}';
	public PredicateMatchCallbackElements getPredicateMatchCallbackAccess() {
		return pPredicateMatchCallback;
	}
	
	public ParserRule getPredicateMatchCallbackRule() {
		return getPredicateMatchCallbackAccess().getRule();
	}
	
	//RuleMatchCallback:
	//    {RuleMatchCallback}
	//    'listenForRuleMatch' '(' brs=BRSVarReference ','
	//    '['
	//    params+=RuleVarReference (','
	//    params+=RuleVarReference)*
	//    ']'
	//    ')' '=' '{'
	//    BDSLCallbackCodeBlockFragment
	//    '}';
	public RuleMatchCallbackElements getRuleMatchCallbackAccess() {
		return pRuleMatchCallback;
	}
	
	public ParserRule getRuleMatchCallbackRule() {
		return getRuleMatchCallbackAccess().getRule();
	}
	
	//PrintLn:
	//    'println' {PrintLn} '(' text=(PrintableExpression) (',' mode=OutputModeModel)? ')';
	public PrintLnElements getPrintLnAccess() {
		return pPrintLn;
	}
	
	public ParserRule getPrintLnRule() {
		return getPrintLnAccess().getRule();
	}
	
	//PrintableExpression:
	//    ({StringLiteral} value=STRING) | (BigraphVarReference);
	public PrintableExpressionElements getPrintableExpressionAccess() {
		return pPrintableExpression;
	}
	
	public ParserRule getPrintableExpressionRule() {
		return getPrintableExpressionAccess().getRule();
	}
	
	//ExportMethod:
	//    'export' {ExportMethod} '('
	//    (variable=ReferenceClassSymbol)
	//    (',' 'as' '=' format=ExportFormat)?
	//    (',' 'resourcePath' '=' resourcePath=STRING)?
	//    ')';
	public ExportMethodElements getExportMethodAccess() {
		return pExportMethod;
	}
	
	public ParserRule getExportMethodRule() {
		return getExportMethodAccess().getRule();
	}
	
	//ExecuteBRSMethod:
	//    'execute' {ExecuteBRSMethod} '(' ((brs=BRSVarReference)) ')';
	public ExecuteBRSMethodElements getExecuteBRSMethodAccess() {
		return pExecuteBRSMethod;
	}
	
	public ParserRule getExecuteBRSMethodRule() {
		return getExecuteBRSMethodAccess().getRule();
	}
	
	//LoadMethod returns AssignableBigraphExpressionWithExplicitSig:
	//    {LoadMethod}
	//    'load' '(' ('sig' '=' sig=[Signature])? (',' 'as' '=' format=LoadFormat)? (',' 'resourcePath' '='
	//    resourcePath=STRING)? ')';
	public LoadMethodElements getLoadMethodAccess() {
		return pLoadMethod;
	}
	
	public ParserRule getLoadMethodRule() {
		return getLoadMethodAccess().getRule();
	}
	
	//CreateRandomBigraphMethod returns AssignableBigraphExpressionWithExplicitSig:
	//    {CreateRandomBigraphMethod}
	//    'randomBigraph' '('
	//    ('sig' '=' sig=[Signature])?
	//    (',' 'n' '=' n=INT)?
	//    (',' 't' '=' t=INT)?
	//    (',' 'p' '=' p=FLOAT)?
	//    ')';
	public CreateRandomBigraphMethodElements getCreateRandomBigraphMethodAccess() {
		return pCreateRandomBigraphMethod;
	}
	
	public ParserRule getCreateRandomBigraphMethodRule() {
		return getCreateRandomBigraphMethodAccess().getRule();
	}
	
	//    ////////////////////////////////////
	//// Main Block and Main Statements //
	//////////////////////////////////////
	//AbstractMainStatements:
	//    MethodStatements | AssignmentOrVariableDeclaration | UDFOperation;
	public AbstractMainStatementsElements getAbstractMainStatementsAccess() {
		return pAbstractMainStatements;
	}
	
	public ParserRule getAbstractMainStatementsRule() {
		return getAbstractMainStatementsAccess().getRule();
	}
	
	//CallbackStatements:
	//    MethodStatements | UDFOperation;
	public CallbackStatementsElements getCallbackStatementsAccess() {
		return pCallbackStatements;
	}
	
	public ParserRule getCallbackStatementsRule() {
		return getCallbackStatementsAccess().getRule();
	}
	
	//UDFOperation:
	//    {UDFOperation}
	//    'j' '{' expression+=UdfCallExpression* '}' //body=XBlockExpression
	//;
	public UDFOperationElements getUDFOperationAccess() {
		return pUDFOperation;
	}
	
	public ParserRule getUDFOperationRule() {
		return getUDFOperationAccess().getRule();
	}
	
	//UdfCallExpression returns XExpression:
	//    {UdfCallExpression}
	//    //    (=>(type=JvmTypeReference name=QualifiedName) | name=QualifiedName)
	//    (type=[jvmTypes::JvmType|QualifiedName])
	//    //    name=FQN //QualifiedName
	//    ('()'
	//    | ('('
	//    ////        (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
	//    params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID] (','
	//    params+=[UDFArgumentTypes|BIGRAPH_VAR_REFERENCE_ID])*
	//    ')'));
	public UdfCallExpressionElements getUdfCallExpressionAccess() {
		return pUdfCallExpression;
	}
	
	public ParserRule getUdfCallExpressionRule() {
		return getUdfCallExpressionAccess().getRule();
	}
	
	//UDFArgumentTypes:
	//    AbstractNamedSignatureElement | BDSLDocument;
	public UDFArgumentTypesElements getUDFArgumentTypesAccess() {
		return pUDFArgumentTypes;
	}
	
	public ParserRule getUDFArgumentTypesRule() {
		return getUDFArgumentTypesAccess().getRule();
	}
	
	//BDSLBlock:
	//    {BDSLBlock} '{' statements+=AbstractMainStatements* '}';
	public BDSLBlockElements getBDSLBlockAccess() {
		return pBDSLBlock;
	}
	
	public ParserRule getBDSLBlockRule() {
		return getBDSLBlockAccess().getRule();
	}
	
	//    //////////////////////////
	//// Enums                //
	////////////////////////////
	//enum VariableCreationType:
	//    INSTANTIATED='instance' | LOADED='loaded';
	public VariableCreationTypeElements getVariableCreationTypeAccess() {
		return eVariableCreationType;
	}
	
	public EnumRule getVariableCreationTypeRule() {
		return getVariableCreationTypeAccess().getRule();
	}
	
	//enum BinaryParallelOperator:
	//    UNSET | MERGE='|' | PARALLEL='||';
	public BinaryParallelOperatorElements getBinaryParallelOperatorAccess() {
		return eBinaryParallelOperator;
	}
	
	public EnumRule getBinaryParallelOperatorRule() {
		return getBinaryParallelOperatorAccess().getRule();
	}
	
	//enum BinaryNestingOperator:
	//    UNSET2 | NESTING='-' | COMPOSITION='*' //we cannot use a simple '.' right now
	//;
	public BinaryNestingOperatorElements getBinaryNestingOperatorAccess() {
		return eBinaryNestingOperator;
	}
	
	public EnumRule getBinaryNestingOperatorRule() {
		return getBinaryNestingOperatorAccess().getRule();
	}
	
	//enum ControlType:
	//    ACTIVE='active' | ATOMIC='atomic' | PASSIVE='passive';
	public ControlTypeElements getControlTypeAccess() {
		return eControlType;
	}
	
	public EnumRule getControlTypeRule() {
		return getControlTypeAccess().getRule();
	}
	
	//enum PredicateType:
	//    PARTIAL='partial' | ISO='iso';
	public PredicateTypeElements getPredicateTypeAccess() {
		return ePredicateType;
	}
	
	public EnumRule getPredicateTypeRule() {
		return getPredicateTypeAccess().getRule();
	}
	
	//enum ExportFormat:
	//    XMI='xmi' | ECORE='ecore' | BIGRAPHER='bigrapher' | BIGMC='bigmc' | PNG='png';
	public ExportFormatElements getExportFormatAccess() {
		return eExportFormat;
	}
	
	public EnumRule getExportFormatRule() {
		return getExportFormatAccess().getRule();
	}
	
	//enum LoadFormat:
	//    XMI='xmi' | ECORE='ecore';
	public LoadFormatElements getLoadFormatAccess() {
		return eLoadFormat;
	}
	
	public EnumRule getLoadFormatRule() {
		return getLoadFormatAccess().getRule();
	}
	
	//enum DataSink:
	//    STDOUT='console' | LOCAL_FILE='file' | DB='cdo';
	public DataSinkElements getDataSinkAccess() {
		return eDataSink;
	}
	
	public EnumRule getDataSinkRule() {
		return getDataSinkAccess().getRule();
	}
	
	//enum DataSource:
	//    UNSPECIFIED='unspecified' | LOCAL_FILE='file' | DB='cdo' | CLASSPATH='classpath';
	public DataSourceElements getDataSourceAccess() {
		return eDataSource;
	}
	
	public EnumRule getDataSourceRule() {
		return getDataSourceAccess().getRule();
	}
	
	//enum OutputModeModel:
	//    INSTANCE_MODEL='xmi' | META_MODEL='ecore';
	public OutputModeModelElements getOutputModeModelAccess() {
		return eOutputModeModel;
	}
	
	public EnumRule getOutputModeModelRule() {
		return getOutputModeModelAccess().getRule();
	}
	
	//XExpression returns XExpression :
	//    XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment returns XExpression :
	//    {XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |
	//    XOrExpression (
	//        =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//    )?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//    '='
	//;
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//    '+=' | '-=' | '*=' | '/=' | '%=' |
	//    '<' '<' '=' |
	//    '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression returns XExpression:
	//    XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//    '||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression returns XExpression:
	//    XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//    '&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression returns XExpression:
	//    XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//    rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//    '==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression returns XExpression:
	//    XOtherOperatorExpression
	//    (=>({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//     =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//    '>=' | '<' '=' | '>' | '<' ;
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression returns XExpression:
	//    XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//    rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//      '->'
	//    | '..<'
	//    | '>' '..'
	//    | '..'
	//    | '=>'
	//    | '>' (=>('>' '>') | '>')
	//    | '<' (=>('<' '<') | '<' | '=>')
	//    | '<>'
	//    | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression returns XExpression:
	//    XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//    rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//    '+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression returns XExpression:
	//    XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]) rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//    '*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation returns XExpression:
	//    {XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//    | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//    "!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression returns XExpression:
	//    XPostfixOperation (=>({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	//;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation returns XExpression:
	//    XMemberFeatureCall =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	//;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//    "++" | "--"
	//;
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall returns XExpression:
	//    XPrimaryExpression
	//    (=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//    |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
	//        ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//        feature=[types::JvmIdentifiableElement|IdOrSuper] (
	//            =>explicitOperationCall?='('
	//                (
	//                    memberCallArguments+=XShortClosure
	//                  | memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                )?
	//            ')')?
	//            memberCallArguments+=XClosure?
	//        )*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression returns XExpression:
	//    XConstructorCall |
	//    XBlockExpression |
	//    XSwitchExpression |
	//    XSynchronizedExpression |
	//    XFeatureCall |
	//    XLiteral |
	//    XIfExpression |
	//    XForLoopExpression |
	//    XBasicForLoopExpression |
	//    XWhileExpression |
	//    XDoWhileExpression |
	//    XThrowExpression |
	//    XReturnExpression |
	//    XTryCatchFinallyExpression |
	//    XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral returns XExpression:
	//    XCollectionLiteral |
	//    XClosure |
	//    XBooleanLiteral |
	//    XNumberLiteral |
	//    XNullLiteral |
	//    XStringLiteral |
	//    XTypeLiteral
	//;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//    XSetLiteral | XListLiteral
	//;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//    {XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	//;
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//    {XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	//;
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure returns XExpression:
	//    =>({XClosure}
	//    '[')
	//        =>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')?
	//        expression=XExpressionInClosure
	//    ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure returns XExpression:
	//    {XBlockExpression}
	//    (expressions+=XExpressionOrVarDeclaration ';'?)*
	//;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure returns XExpression:
	//    =>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression returns XExpression:
	//    '(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression returns XExpression:
	//    {XIfExpression}
	//    'if' '(' if=XExpression ')'
	//    then=XExpression
	//    (=>'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression returns XExpression:
	//    {XSwitchExpression}
	//    'switch' (=>('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//        | =>(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//    (cases+=XCasePart)*
	//    ('default' ':' default=XExpression )?
	//    '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//    {XCasePart}
	//    typeGuard=JvmTypeReference? ('case' case=XExpression)?
	//        (':' then=XExpression | fallThrough?=',') ;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression returns XExpression:
	//    =>({XForLoopExpression}
	//    'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression returns XExpression:
	//    {XBasicForLoopExpression}
	//    'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//        expression=XExpression? ';'
	//        (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression returns XExpression:
	//    {XWhileExpression}
	//    'while' '(' predicate=XExpression ')'
	//        body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression returns XExpression:
	//    {XDoWhileExpression}
	//    'do'
	//        body=XExpression
	//    'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression returns XExpression:
	//    {XBlockExpression}
	//    '{'
	//        (expressions+=XExpressionOrVarDeclaration ';'?)*
	//    '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration returns XExpression:
	//    XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration returns XExpression:
	//    {XVariableDeclaration}
	//    (writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter returns types::JvmFormalParameter:
	//    (parameterType=JvmTypeReference)? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//    parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall returns XExpression:
	//    {XFeatureCall}
	//    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    feature=[types::JvmIdentifiableElement|IdOrSuper]
	//    (=>explicitOperationCall?='('
	//        (
	//            featureCallArguments+=XShortClosure
	//          | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	//        )?
	//    ')')?
	//    featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//    ValidID | 'extends' | 'static' | 'import' | 'extension'
	//;
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper :
	//    FeatureCallID | 'super'
	//;
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall returns XExpression:
	//    {XConstructorCall}
	//    'new' constructor=[types::JvmConstructor|QualifiedName]
	//    (=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    (=>explicitConstructorCall?='('
	//        (
	//            arguments+=XShortClosure
	//          | arguments+=XExpression (',' arguments+=XExpression)*
	//        )?
	//    ')')?
	//    arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral returns XExpression :
	//    {XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral returns XExpression :
	//    {XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral returns XExpression :
	//    {XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral returns XExpression:
	//    {XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral returns XExpression :
	//    {XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] (arrayDimensions+=ArrayBrackets)* ')'
	//;
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression returns XExpression :
	//    {XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression returns XExpression :
	//    {XReturnExpression} 'return' (->expression=XExpression)?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression returns XExpression:
	//    {XTryCatchFinallyExpression}
	//    'try'
	//        expression=XExpression
	//    (
	//        catchClauses+=XCatchClause+
	//        (=>'finally' finallyExpression=XExpression)?
	//    |    'finally' finallyExpression=XExpression
	//    );
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression returns XExpression:
	//    =>({XSynchronizedExpression}
	//    'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause :
	//    =>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//    ValidID (=>'.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//    (ValidID '::')+
	//;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//    ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+
	//    ('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal DECIMAL:
	//    INT
	//    (('e'|'E') ('+'|'-')? INT)?
	//    (('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//    JvmParameterizedTypeReference =>({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//    | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets :
	//    '[' ']'
	//;
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//    ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//    type=[JvmType|QualifiedName] (
	//        =>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>'
	//        (=>({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*
	//    )?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference returns JvmTypeReference:
	//    JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//    {JvmWildcardTypeReference} '?' (
	//      constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*
	//    | constraints+=JvmLowerBound (constraints+=JvmLowerBoundAnded)*
	//    )?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound :
	//    'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded returns JvmUpperBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound :
	//    'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded returns JvmLowerBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter :
	//    name=ValidID
	//    (constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard :
	//    QualifiedName  '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//    ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//    importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//    'import' (
	//        (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
	//        | importedType=[JvmDeclaredType|QualifiedName]
	//        | importedNamespace=QualifiedNameWithWildcard) ';'?
	//;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//    (ValidID '.')+
	//;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//    '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'? |
	//            "'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT: '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS: (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
