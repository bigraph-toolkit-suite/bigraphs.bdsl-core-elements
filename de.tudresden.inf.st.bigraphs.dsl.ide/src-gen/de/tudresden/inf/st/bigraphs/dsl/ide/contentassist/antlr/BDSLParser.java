/*
 * generated by Xtext 2.21.0
 */
package de.tudresden.inf.st.bigraphs.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.tudresden.inf.st.bigraphs.dsl.ide.contentassist.antlr.internal.InternalBDSLParser;
import de.tudresden.inf.st.bigraphs.dsl.services.BDSLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getLinkNamesAccess().getAlternatives(), "rule__LinkNames__Alternatives");
			builder.put(grammarAccess.getAbstractBigraphDeclarationAccess().getAlternatives(), "rule__AbstractBigraphDeclaration__Alternatives");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getAbstractMainStatementsAccess().getAlternatives(), "rule__AbstractMainStatements__Alternatives");
			builder.put(grammarAccess.getPrintableExpressionAccess().getAlternatives(), "rule__PrintableExpression__Alternatives");
			builder.put(grammarAccess.getBinaryParallelOperatorAccess().getAlternatives(), "rule__BinaryParallelOperator__Alternatives");
			builder.put(grammarAccess.getBinaryNestingOperatorAccess().getAlternatives(), "rule__BinaryNestingOperator__Alternatives");
			builder.put(grammarAccess.getControlTypeAccess().getAlternatives(), "rule__ControlType__Alternatives");
			builder.put(grammarAccess.getBRSModelAccess().getGroup(), "rule__BRSModel__Group__0");
			builder.put(grammarAccess.getBRSModelImportAccess().getGroup(), "rule__BRSModelImport__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
			builder.put(grammarAccess.getFqnWithWildCardAccess().getGroup(), "rule__FqnWithWildCard__Group__0");
			builder.put(grammarAccess.getBigraphVarReferenceIDAccess().getGroup(), "rule__BigraphVarReferenceID__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getMainElementAccess().getGroup(), "rule__MainElement__Group__0");
			builder.put(grammarAccess.getSignatureAccess().getGroup(), "rule__Signature__Group__0");
			builder.put(grammarAccess.getSignatureAccess().getGroup_3(), "rule__Signature__Group_3__0");
			builder.put(grammarAccess.getControlDefAccess().getGroup(), "rule__ControlDef__Group__0");
			builder.put(grammarAccess.getLinkNamesAccess().getGroup_1(), "rule__LinkNames__Group_1__0");
			builder.put(grammarAccess.getLVD2Access().getGroup(), "rule__LVD2__Group__0");
			builder.put(grammarAccess.getLocalVarDeclAccess().getGroup(), "rule__LocalVarDecl__Group__0");
			builder.put(grammarAccess.getLocalVarDeclAccess().getGroup_2(), "rule__LocalVarDecl__Group_2__0");
			builder.put(grammarAccess.getLocalVarDeclAccess().getGroup_2_1(), "rule__LocalVarDecl__Group_2_1__0");
			builder.put(grammarAccess.getLocalVarDeclAccess().getGroup_2_2(), "rule__LocalVarDecl__Group_2_2__0");
			builder.put(grammarAccess.getLocalVarDeclAccess().getGroup_2_2_0(), "rule__LocalVarDecl__Group_2_2_0__0");
			builder.put(grammarAccess.getLocalVarDeclAccess().getGroup_2_2_0_2(), "rule__LocalVarDecl__Group_2_2_0_2__0");
			builder.put(grammarAccess.getLocalVarDeclAccess().getGroup_2_3(), "rule__LocalVarDecl__Group_2_3__0");
			builder.put(grammarAccess.getNodeExpressionCallAccess().getGroup(), "rule__NodeExpressionCall__Group__0");
			builder.put(grammarAccess.getNodeExpressionCallAccess().getGroup_1(), "rule__NodeExpressionCall__Group_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1_0(), "rule__Addition__Group_1_0__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1_0(), "rule__Multiplication__Group_1_0__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
			builder.put(grammarAccess.getMainDeclarationAccess().getGroup(), "rule__MainDeclaration__Group__0");
			builder.put(grammarAccess.getPrintLnAccess().getGroup(), "rule__PrintLn__Group__0");
			builder.put(grammarAccess.getBRSModelAccess().getSignatureAssignment_0(), "rule__BRSModel__SignatureAssignment_0");
			builder.put(grammarAccess.getBRSModelAccess().getStatementsAssignment_1_0(), "rule__BRSModel__StatementsAssignment_1_0");
			builder.put(grammarAccess.getBRSModelAccess().getMainAssignment_1_1(), "rule__BRSModel__MainAssignment_1_1");
			builder.put(grammarAccess.getBRSModelImportAccess().getImportedNamespaceAssignment_1(), "rule__BRSModelImport__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getMainElementAccess().getValueAssignment_4(), "rule__MainElement__ValueAssignment_4");
			builder.put(grammarAccess.getSignatureAccess().getNameAssignment_2(), "rule__Signature__NameAssignment_2");
			builder.put(grammarAccess.getSignatureAccess().getControlsAssignment_3_1(), "rule__Signature__ControlsAssignment_3_1");
			builder.put(grammarAccess.getControlDefAccess().getTypeAssignment_1(), "rule__ControlDef__TypeAssignment_1");
			builder.put(grammarAccess.getControlDefAccess().getNameAssignment_3(), "rule__ControlDef__NameAssignment_3");
			builder.put(grammarAccess.getControlDefAccess().getArityAssignment_5(), "rule__ControlDef__ArityAssignment_5");
			builder.put(grammarAccess.getArityValueAccess().getValueAssignment(), "rule__ArityValue__ValueAssignment");
			builder.put(grammarAccess.getControlVariableAccess().getNameAssignment(), "rule__ControlVariable__NameAssignment");
			builder.put(grammarAccess.getNameConstantAccess().getValueAssignment(), "rule__NameConstant__ValueAssignment");
			builder.put(grammarAccess.getSiteVarsAccess().getNameAssignment(), "rule__SiteVars__NameAssignment");
			builder.put(grammarAccess.getLVD2Access().getNameAssignment_2(), "rule__LVD2__NameAssignment_2");
			builder.put(grammarAccess.getLVD2Access().getTypeAssignment_4(), "rule__LVD2__TypeAssignment_4");
			builder.put(grammarAccess.getLVD2Access().getDefinitionAssignment_7(), "rule__LVD2__DefinitionAssignment_7");
			builder.put(grammarAccess.getLocalVarDeclAccess().getNameAssignment_2_0(), "rule__LocalVarDecl__NameAssignment_2_0");
			builder.put(grammarAccess.getLocalVarDeclAccess().getSigAssignment_2_1_1(), "rule__LocalVarDecl__SigAssignment_2_1_1");
			builder.put(grammarAccess.getLocalVarDeclAccess().getSiteArgsAssignment_2_2_0_1(), "rule__LocalVarDecl__SiteArgsAssignment_2_2_0_1");
			builder.put(grammarAccess.getLocalVarDeclAccess().getSiteArgsAssignment_2_2_0_2_1(), "rule__LocalVarDecl__SiteArgsAssignment_2_2_0_2_1");
			builder.put(grammarAccess.getLocalVarDeclAccess().getTypeAssignment_2_2_2(), "rule__LocalVarDecl__TypeAssignment_2_2_2");
			builder.put(grammarAccess.getLocalVarDeclAccess().getDefinitionAssignment_2_3_2(), "rule__LocalVarDecl__DefinitionAssignment_2_3_2");
			builder.put(grammarAccess.getBigraphVarReferenceAccess().getValueAssignment(), "rule__BigraphVarReference__ValueAssignment");
			builder.put(grammarAccess.getNodeExpressionCallAccess().getValueAssignment_0(), "rule__NodeExpressionCall__ValueAssignment_0");
			builder.put(grammarAccess.getNodeExpressionCallAccess().getLinksAssignment_1_1(), "rule__NodeExpressionCall__LinksAssignment_1_1");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAssignment_1_0_1(), "rule__Addition__OperatorAssignment_1_0_1");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_1(), "rule__Addition__RightAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_0_1(), "rule__Multiplication__OperatorAssignment_1_0_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1(), "rule__Multiplication__RightAssignment_1_1");
			builder.put(grammarAccess.getMainDeclarationAccess().getDefinitionAssignment_1(), "rule__MainDeclaration__DefinitionAssignment_1");
			builder.put(grammarAccess.getPrintLnAccess().getTextAssignment_2(), "rule__PrintLn__TextAssignment_2");
			builder.put(grammarAccess.getBRSModelAccess().getUnorderedGroup_1(), "rule__BRSModel__UnorderedGroup_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BDSLGrammarAccess grammarAccess;

	@Override
	protected InternalBDSLParser createParser() {
		InternalBDSLParser result = new InternalBDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
