grammar de.tudresden.inf.st.bigraphs.dsl.BDSL with org.eclipse.xtext.common.Terminals

import "platform:/resource/BigraphBaseModel/model/bigraphBaseModel.ecore" as bigraph
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate bDSL "http://www.tudresden.de/inf/st/bigraphs/dsl/BDSL"

//types are in italic font
BRSModel:
	signature+=(Signature)*
	// unordered group
	((statements+=(AbstractElement)*) & (main=MainElement))

	//brs etc.
;

BRSModelImport:
	'import' importedNamespace=FqnWithWildCard;

FQN:
	ID ('.' ID)*;

FqnWithWildCard:
	FQN ('.*')?;

BigraphVarReferenceID hidden():
	('$' FQN); //returns ecore::EString 
//EInt returns ecore::EInt:
//	'-'? INT;


//terminal INT_POSITIVE returns ecore::EInt: ('1'..'9')+;
//terminal INT_SITE returns ecore::EInt: ('1'..'9');
EString returns ecore::EString:
	STRING | ID;

AbstractElement:
	LocalVarDecl | LocalRuleDecl | LocalPredicateDeclaration
	// and rules
;

MainElement:
	"main" "=" '{' {MainElement} value+=(AbstractMainStatements)* '}';

	//creates a signature class with the same name: shortcut for "signature returns signature"
Signature:
	{Signature}
	'signature'
	name=ID
	('{' (controls+=ControlDef)+ '}')?;

ControlDef returns ControlVariable:
//	{ControlDef}
	{ControlVariable} type=ControlType? 'ctrl' name=ID 'arity' arity=INT;

	//ArityValue returns ecore::EInt:
//	INT
//;

//	value=EInt;

//ControlVariable returns bigraph::BNode:
//	name=ID;

NameConstant:
	value=EString;

LinkNames:
	(NameConstant) | (NameConstant ",");

	//TODO: change to linkNamevars or so
SiteVars:
	name=ID;

Site:
	'id' '(' index=INT ')';
	//(args+=LVD2)*
LVD2:
	{LocalVarDecl} "val" name=ID ':' type=[ControlVariable|FQN] '=' "{" definition+=(BigraphExpression)* "}";

	//
LocalVarDecl:
//	('(' args+=DeclaredParameter (',' args+=DeclaredParameter)* ')')?
	"val" {LocalVarDecl} (name=ID ("(" sig=[Signature] ")")? (("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ':'
	type=[ControlVariable|FQN])?
	("="
	"{"
	//		(args+=LocalVarDecl)*
	definition+=(BigraphExpression)*
	"}")
	//		definition=BigraphExpression ";"
);

LocalRuleDecl:
	"react" {LocalRuleDecl} name=ID ("(" sig=[Signature] ")")?
	("="
	"{"
	//		(args+=LocalVarDecl)*
	redex=BigraphExpression
	"}"
	','
	'{'
	reactum=BigraphExpression
	'}');
	
LocalPredicateDeclaration:
	'pred' {LocalPredicateDeclaration} name=ID ("(" sig=[Signature] ")")? (':' type=PredicateType)? '=' '{'
	definition=BigraphExpression
	'}'
;

ElementaryBigraphs:
	Barren | Merge
;

Barren:
	{Barren} 'barren()'
;

Merge:
	{Merge} 'merge' '(' sites=INT ')'
;
	//BigraphExpressionOrBigraphReference:
//	BigraphVarReference
//;

//// "var" name=ID ":" type=Type ("=" init=Expr)?;
//LocalVarDecl:
////	('(' args+=DeclaredParameter (',' args+=DeclaredParameter)* ')')?
//	{LocalVarDecl} "var" name=ID ("(" sig=[Signature] ")")? ("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ("="
//	definition=BigraphExpression ";");
BigraphVarReference:
	value=[LocalVarDecl|BigraphVarReferenceID];

RuleVarReference:
	value=[LocalRuleDecl|BigraphVarReferenceID];

PredicateVarReference:
	value=[LocalPredicateDeclaration|BigraphVarReferenceID]
;	
	


AbstractBigraphDeclaration:
	BigraphVarReference | NodeExpressionCall | LVD2 | Site | ElementaryBigraphs;

NodeExpressionCall:
	value=[ControlVariable|FQN] ('[' links+=LinkNames* ']')?;

BigraphExpression:
	Addition;

	//Addition returns BigraphExpression:
//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '||') right=Multiplication)*;
//
//Multiplication returns BigraphExpression:
//	PrimaryExpression (({Multi.left=current} '.' | {Div.left=current} '*') right=PrimaryExpression)*;
//	
Addition returns BigraphExpression:
	Multiplication (({Plus.left=current} operator=BinaryParallelOperator) right=Multiplication)*;

Multiplication returns BigraphExpression:
	PrimaryExpression (({Multi.left=current} operator=BinaryNestingOperator) right=PrimaryExpression)*;

PrimaryExpression returns BigraphExpression:
	'(' BigraphExpression ')' |
	//	{BigraphLiteral} value=AbstractBigraphDeclaration
	AbstractBigraphDeclaration;

	//terminal CHAR: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö');
//terminal BASICID: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö')*;
//terminal STRING: '"' -> '"';
//terminal WS: (' '|'\t')+;
//terminal ANY_OTHER: .;m
//MainDeclaration:
//	{MainDeclaration} definition=AbstractMainStatements ';';

AbstractMainStatements:
	BigraphVarReference | BRSDefinition | PrintLn;

BRSDefinition:
	{BRSDefinition} 'brs' '{'
	('agents' '=' ("[" agents+=BigraphVarReference? (',' agents+=BigraphVarReference)* "]")?) ','
	('rules' '=' ("[" rules+=RuleVarReference? (',' agents+=RuleVarReference)* "]")?) ','
	('preds' '=' ("[" predicates+=PredicateVarReference? (',' predicates+=PredicateVarReference)* "]")?)
	'}';

PrintLn:
	{PrintLn} 'println' '(' text=(PrintableExpression) (',' mode=OutputModeModel)? ')';

PrintableExpression:
	({StringLiteral} value=STRING) | (BigraphVarReference);

enum BinaryParallelOperator:
	UNSET | MERGE='|' | PARALLEL='||';

enum BinaryNestingOperator:
	UNSET2 | NESTING='-' | COMPOSITION='*' //we cannot use a simple '.' right now
;

enum ControlType:
	ATOMIC='atomic' | ACTIVE='active' | PASSIVE='passive';
	
enum PredicateType:
	PARTIAL='partial' | ISO='iso' 
;

enum OutputModeModel:
	INSTANCE_MODEL='xmi' | META_MODEL='ecore';
