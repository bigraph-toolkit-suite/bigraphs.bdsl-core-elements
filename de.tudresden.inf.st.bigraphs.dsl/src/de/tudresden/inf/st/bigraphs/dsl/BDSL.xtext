grammar de.tudresden.inf.st.bigraphs.dsl.BDSL with org.eclipse.xtext.common.Terminals

import "platform:/resource/BigraphBaseModel/model/bigraphBaseModel.ecore" as bigraph
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate bDSL "http://www.tudresden.de/inf/st/bigraphs/dsl/BDSL"

// types are in italic font
BDSLDocument:
	// first imports and signatures 
	signature+=(Signature)*
	
	// and unordered group of global and local statements
	((statements+=(AbstractElement)*) & (main=MainElement))
;

BDSLDocumentImport:
	'import' importedNamespace=FqnWithWildCard;

FQN:
	ID ('.' ID)*; // TODO: could be now also IdOrKw instead of ID

FqnWithWildCard:
	FQN ('.*')?;

BigraphVarReferenceID hidden():
	('$' FQN); 
	
fragment BDSLNameSigDeclFrag *:
	name=ID ("(" sig=[Signature] ")")?
;

fragment BDSLSiteVarsAndControlVarFrag *:
	(("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ':' controlType=[ControlVariable|FQN])?
;

AbstractElement:
	BDSLVariableDeclaration | AbstractElementsWithNameAndSig
;

AbstractElementsWithNameAndSig:
	LocalVarDecl | LocalRuleDecl | LocalPredicateDeclaration | BRSDefinition
;

MainElement:
	MainKeyword {MainElement} body=BDSLBlock; //value+=(AbstractMainStatements)* 

MainKeyword:
	"main" "="
;

IdOrKw :
	ID | KEYWORD
;

KEYWORD :
	MainKeyword
	| "react"
	| "signature"
;

METHOD_KEYWORD:
	'load' 
	| "export"
	| "execute"
	| "println"
;

// Creates a signature class with the same name: shortcut for "signature returns signature"
Signature:
	{Signature}
	'signature'
	name=ID
	('{' (controls+=ControlDef)+ '}')?
;

ControlDef returns ControlVariable:
	{ControlVariable} type=ControlType? 'ctrl' name=ID 'arity' arity=INT
;

///////////////////////////////////
// Bigraphs						 //
///////////////////////////////////

LocalVarDecl:
	'val' {LocalVarDecl} BDSLNameSigDeclFrag BDSLSiteVarsAndControlVarFrag
;

LVD2 returns LocalVarDecl:
	{LVD2} "val" name=ID BDSLSiteVarsAndControlVarFrag '=' "{" definition+=(BigraphExpression)* "}"
;

AbstractBigraphDeclaration:
	BigraphVarReference | NodeExpressionCall | LVD2 | Site | ElementaryBigraphs
;

NodeExpressionCall:
	value=[ControlVariable|FQN] ("[" links+=NameConstant? (',' links+=NameConstant)* "]")?
;

NameConstant:
	{NameConstant} name=STRING;

//TODO: change to linkNamevars or so
SiteVars:
	name=ID;

Site:
	'id' '(' index=INT ')';

LocalRuleDecl:
	"react" {LocalRuleDecl} BDSLNameSigDeclFrag
	("="
	"{" redex=BigraphExpression "}"
	','
	'{' reactum=BigraphExpression '}'
	)
;
	
LocalPredicateDeclaration:
	'pred' {LocalPredicateDeclaration} BDSLNameSigDeclFrag (':' type=PredicateType)? '=' '{' definition=BigraphExpression '}'
;

ElementaryBigraphs:
	Barren | Merge | Closure | Substitution
;

Barren:
	'barren' {Barren} '()'
;

Merge:
	'merge' {Merge} '(' sites=INT ')'
;

Closure:
	('closure' | 'clsre' | '/') {Closure} '(' value+=STRING (',' value+=STRING)* ')'
;

Substitution:
	('substitution' | 'subst') {Substitution} '(' from=STRING ',' ('[' to+=STRING (',' to+=STRING)* ']') ')'
;


BigraphVarReference:
//	{BigraphVarReference}
	value=[LocalVarDecl|BigraphVarReferenceID];

RuleVarReference:
//	{RuleVarReference}
	value=[LocalRuleDecl|BigraphVarReferenceID];

PredicateVarReference:
//	{PredicateVarReference}
	value=[LocalPredicateDeclaration|BigraphVarReferenceID];	

BRSVarReference:
//	{BRSVarReference}
	value=[BRSDefinition|BigraphVarReferenceID];
	
BigraphVarDeclOrReference: // dont remove: needed to organize hierarchy
	LocalVarDecl | BigraphVarReference
;


///////////////////////////////////
// Bigraph Expression Operations //
///////////////////////////////////

BigraphExpression:
	Addition;

Addition returns BigraphExpression:
	Multiplication (({Plus.left=current} operator=BinaryParallelOperator) right=Multiplication)*;

Multiplication returns BigraphExpression:
	PrimaryExpression (({Multi.left=current} operator=BinaryNestingOperator) right=PrimaryExpression)*;

PrimaryExpression returns BigraphExpression:
	'(' BigraphExpression ')' |
	//	{BigraphLiteral} value=AbstractBigraphDeclaration
	AbstractBigraphDeclaration;




BDSLVariableDeclaration:
	(type=LocalVarDecl | (type=BigraphVarReference)) '=' 
	(
		expression=BDSLExpression | 
//		(methodinvocation?= METHOD_KEYWORD? (expression+=BDSLExpression)) | 
		
		('{' definition+=(BigraphExpression)* '}')
	)

;


// analogeous: BDSLReact var decl and predvardecl

BDSLExpression:
	BDSLAssignment
;

BDSLAssignment returns BDSLExpression:
	BDSLSelectionExpression
	({BDSLAssignment.left=current} '=' right=BDSLExpression)? // Right associativity	
;

BDSLSelectionExpression returns BDSLExpression:
	BDSLTerminalExpression
//	(
//	{SJMemberSelection.receiver=current} '.'
//	member=[SJMember]
//	(methodinvocation?='('
//	(args+=SJExpression (',' args+=SJExpression)*)? ')'
//	)?
//	)*
// see "Implementing Domain Specific Languages with Xtext and Xtend - Second Edition"
;

BDSLTerminalExpression returns BDSLExpression:
//	{BDSLStringConstant} value=STRING |
//	{BDSLIntConstant} value=INT |
//	{BDSLBoolConstant} value = ('true' | 'false') |
	AssignableBigraphExpression |
	'(' BDSLExpression ')'
;

////////////////////////////////////
// Global BDSL Methods			  //
////////////////////////////////////

AssignableBigraphExpression:
	LoadMethod | BigraphVarReference
;

MethodStatements:
	PrintLn | ExportMethod | ExecuteBRSMethod | LoadMethod
;

PrintLn:
	'println' {PrintLn} '(' text=(PrintableExpression) (',' mode=OutputModeModel)? ')';

PrintableExpression:
	({StringLiteral} value=STRING) | (BigraphVarReference);
	
ExportMethod:
	'export' {ExportMethod} '(' ((brs=BRSVarReference)) (',' 'as' '=' format=ExportFormat)? (',' 'to' '=' sink=DataSink (',' 'resourcePath' '=' resourcePath=STRING)?)? ')'
;

ExecuteBRSMethod:
	'execute' {ExecuteBRSMethod} '(' ((brs=BRSVarReference)) ')'
;

LoadMethod:
	{LoadMethod}
	'load' '(' ('sig' '=' sig=[Signature])? (',' 'as' '=' format=LoadFormat)? (',' 'resourcePath' '=' resourcePath=STRING)? ')'
;


////////////////////////////////////
// Main Block and Main Statements //
////////////////////////////////////

AbstractMainStatements:
	BRSDefinition | MethodStatements | BDSLVariableDeclaration;


BDSLBlock:
	{BDSLBlock} '{' statements += AbstractMainStatements* '}' ;


BRSDefinition:
	'brs' {BRSDefinition} BDSLNameSigDeclFrag '{'
	('agents' '=' ("[" agents+=BigraphVarReference? (',' agents+=BigraphVarReference)* "]"))?
	(',' 'rules' '=' ("[" rules+=RuleVarReference? (',' agents+=RuleVarReference)* "]"))?
	(',' 'preds' '=' ("[" predicates+=PredicateVarReference? (',' predicates+=PredicateVarReference)* "]"))?
	'}';


//////////////////////////
// Enums				//
//////////////////////////

enum VariableCreationType:
	INSTANTIATED='instance' | LOADED='loaded'
;

enum BinaryParallelOperator:
	UNSET | MERGE='|' | PARALLEL='||';

enum BinaryNestingOperator:
	UNSET2 | NESTING='-' | COMPOSITION='*' //we cannot use a simple '.' right now
;

enum ControlType:
	ATOMIC='atomic' | ACTIVE='active' | PASSIVE='passive';
	
enum PredicateType:
	PARTIAL='partial' | ISO='iso' 
;

enum ExportFormat:
	XMI='xmi' | ECORE='ecore' | BIGRAPHER='bigrapher' | BIGMC='bigmc'
;

enum LoadFormat:
	XMI='xmi' | ECORE='ecore'
;

enum DataSink:
	STDOUT='console' | LOCAL_FILE='file' | DB='cdo'
;

enum DataSource:
	UNSPECIFIED='unspecified' | LOCAL_FILE='file' | DB='cdo' | CLASSPATH='classpath'
;

enum OutputModeModel:
	INSTANCE_MODEL='xmi' | META_MODEL='ecore';
	
	
	
//terminal CHAR: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö');
//terminal BASICID: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö')*;
//terminal STRING: '"' -> '"';
//terminal WS: (' '|'\t')+;
//terminal ANY_OTHER: .;m
	
