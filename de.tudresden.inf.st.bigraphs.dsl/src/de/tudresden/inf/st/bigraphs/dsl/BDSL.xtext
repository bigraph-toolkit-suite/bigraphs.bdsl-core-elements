grammar de.tudresden.inf.st.bigraphs.dsl.BDSL with org.eclipse.xtext.common.Terminals

import "platform:/resource/BigraphBaseModel/model/bigraphBaseModel.ecore" as bigraph
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate bDSL "http://www.tudresden.de/inf/st/bigraphs/dsl/BDSL"

// types are in italic font
BRSModel:
	signature+=(Signature)*
	// unordered group
	((statements+=(AbstractElement)*) & (main=MainElement))

	//brs etc.
;

BRSModelImport:
	'import' importedNamespace=FqnWithWildCard;

FQN:
	ID ('.' ID)*; // TODO: could be now also IdOrKw instead of ID

FqnWithWildCard:
	FQN ('.*')?;

BigraphVarReferenceID hidden():
	('$' FQN); 
	

AbstractElement:
	LocalVarDecl | LocalRuleDecl | LocalPredicateDeclaration
	// and rules
;

MainElement:
	MainKeyword {MainElement} body=BDSLBlock; //value+=(AbstractMainStatements)* 

MainKeyword:
	"main" "="
;

IdOrKw :
	ID | KEYWORD
;

KEYWORD :
	MainKeyword
	| "react"
	| "signature"
;

// Creates a signature class with the same name: shortcut for "signature returns signature"
Signature:
	{Signature}
	'signature'
	name=ID
	('{' (controls+=ControlDef)+ '}')?;

ControlDef returns ControlVariable:
	{ControlVariable} type=ControlType? 'ctrl' name=ID 'arity' arity=INT;



NameConstant:
	{NameConstant} name=STRING;

	//TODO: change to linkNamevars or so
SiteVars:
	name=ID;

Site:
	'id' '(' index=INT ')';
	
LVD2:
	{LocalVarDecl} "val" name=ID ':' controlType=[ControlVariable|FQN] '=' "{" definition+=(BigraphExpression)* "}";

//BigraphVariableTypes:
//	BigraphVariable | ReactionRuleVariable
//;
//
BigraphVariable:
	{BigraphVariable}
////	'bigraph' //type=[BigraphVariable]
	name=ID
	sig=[Signature]
	{BigraphVariable.type=current}
;
//
//ReactionRuleVariable:
//	{ReactionRuleVariable}
////	'reactionrule' //type=[ReactionRuleVariable] 
//	{ReactionRuleVariable.type=current}
//;

//TODO: integrate BigraphAssignmentExpr in LocalVarDecl
LocalVarDecl returns BigraphVariable:
	"val" {LocalVarDecl} (creationType=VariableCreationType)? (name=ID ("(" sig=[Signature] ")")? (("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ':'
	controlType=[ControlVariable|FQN])?
	("="
	"{"
	definition+=(BigraphExpression)*
	"}")
);

LocalRuleDecl:
	"react" {LocalRuleDecl} name=ID ("(" sig=[Signature] ")")?
	("="
	"{"
	redex=BigraphExpression
	"}"
	','
	'{'
	reactum=BigraphExpression
	'}');
	
LocalPredicateDeclaration:
	'pred' {LocalPredicateDeclaration} name=ID ("(" sig=[Signature] ")")? (':' type=PredicateType)? '=' '{'
	definition=BigraphExpression
	'}'
;

ElementaryBigraphs:
	Barren | Merge | Closure | Substitution
;

Barren:
	'barren' {Barren} '()'
;

Merge:
	'merge' {Merge} '(' sites=INT ')'
;

Closure:
	('closure' | 'clsre' | '/') {Closure} '(' value+=STRING (',' value+=STRING)* ')'
;

Substitution:
	('substitution' | 'subst') {Substitution} '(' from=STRING ',' ('[' to+=STRING (',' to+=STRING)* ']') ')'
;


BigraphVarReference: //; returns BigraphVariable:
//	{BigraphVarReference}
	value=[LocalVarDecl|BigraphVarReferenceID];

RuleVarReference: //; returns ReactionRuleVariable:
//	{RuleVarReference}
	value=[LocalRuleDecl|BigraphVarReferenceID];

PredicateVarReference:
//	{PredicateVarReference}
	value=[LocalPredicateDeclaration|BigraphVarReferenceID]
;	

BRSVarReference:
//	{BRSVarReference}
	value=[BRSDefinition|BigraphVarReferenceID]
;
	


AbstractBigraphDeclaration:
	BigraphVarReference | NodeExpressionCall | LVD2 | Site | ElementaryBigraphs;

NodeExpressionCall:
	value=[ControlVariable|FQN] ("[" links+=NameConstant? (',' links+=NameConstant)* "]")?
;



BigraphExpression:
	Addition;

Addition returns BigraphExpression:
	Multiplication (({Plus.left=current} operator=BinaryParallelOperator) right=Multiplication)*;

Multiplication returns BigraphExpression:
	PrimaryExpression (({Multi.left=current} operator=BinaryNestingOperator) right=PrimaryExpression)*;

PrimaryExpression returns BigraphExpression:
	'(' BigraphExpression ')' |
	//	{BigraphLiteral} value=AbstractBigraphDeclaration
	AbstractBigraphDeclaration;


//fragment BDSLTypedDeclaration *:
////	(("val" reference=BigraphAssignmentExpr "=") | (reference=BigraphVarReference "="))?
////////	'val' type=[LocalVarDecl] name=ID 
//	(('val' reference=BigraphAssignmentExpr)? | (reference=BigraphVarReference)?)
////////	(('val' {LocalVarDecl} name=ID (creationType=VariableCreationType)? "=") | (type=BigraphVarReference "="))? 
//;

BigraphAssignmentExpr: //; returns BigraphVariable:
	'val' {LocalVarDecl} name=ID (creationType=VariableCreationType)?
;

BigraphVarDeclOrReference:
	LocalVarDecl | BigraphVarReference
;

BDSLVariableDeclaration:
// (("val" reference=BigraphAssignmentExpr "=") | (reference=BigraphVarReference "="))? 
 (type=BigraphAssignmentExpr | type=BigraphVarReference) '=' expression=BDSLExpression
// (('val' reference=BigraphAssignmentExpr)? | (reference=BigraphVarReference)?) '=' expression=BDSLExpression
;

BDSLExpression:
	BDSLAssignment
;

BDSLAssignment returns BDSLExpression:
//	{BDSLAssignment}
	BDSLSelectionExpression
	({BDSLAssignment.left=current} '=' right=BDSLExpression)? // Right associativity	
;

BDSLSelectionExpression returns BDSLExpression:
	BDSLTerminalExpression
;

BDSLTerminalExpression returns BDSLExpression:
//	{BDSLStringConstant} value=STRING |
//	{BDSLIntConstant} value=INT |
//	{BDSLBoolConstant} value = ('true' | 'false') |
	AssignableBigraphExpression |
	'(' BDSLExpression ')'
;

AssignableBigraphExpression:
	LoadMethod | BigraphVarReference
;


AbstractMainStatements:
	BRSDefinition | MethodStatements | BDSLVariableDeclaration;

MethodStatements:
	PrintLn | ExportMethod | LoadMethod
;

BDSLBlock:
	{BDSLBlock} '{' statements += AbstractMainStatements* '}' ;


BRSDefinition:
	{BRSDefinition} 'brs' name=ID '{'
	('agents' '=' ("[" agents+=BigraphVarReference? (',' agents+=BigraphVarReference)* "]"))?
	(',' 'rules' '=' ("[" rules+=RuleVarReference? (',' agents+=RuleVarReference)* "]"))?
	(',' 'preds' '=' ("[" predicates+=PredicateVarReference? (',' predicates+=PredicateVarReference)* "]"))?
	'}';

PrintLn:
	'println' {PrintLn} '(' text=(PrintableExpression) (',' mode=OutputModeModel)? ')';

PrintableExpression:
	({StringLiteral} value=STRING) | (BigraphVarReference);
	
ExportMethod:
	'export' {ExportMethod} '(' ((brs=BRSVarReference)) (',' 'as' '=' format=ExportFormat)? (',' 'to' '=' sink=DataSink (',' 'filename' '=' filename=STRING)?)? ')'
;

LoadMethod:
	{LoadMethod}
	'load' '(' ('sig' '=' sig=[Signature])? (',' 'as' '=' format=LoadFormat)? (',' 'resourcePath' '=' resourcePath=STRING)? ')'
;






enum VariableCreationType:
	INSTANTIATED='instance' | LOADED='loaded'
;

enum BinaryParallelOperator:
	UNSET | MERGE='|' | PARALLEL='||';

enum BinaryNestingOperator:
	UNSET2 | NESTING='-' | COMPOSITION='*' //we cannot use a simple '.' right now
;

enum ControlType:
	ATOMIC='atomic' | ACTIVE='active' | PASSIVE='passive';
	
enum PredicateType:
	PARTIAL='partial' | ISO='iso' 
;

enum ExportFormat:
	XMI='xmi' | ECORE='ecore' | BIGRAPHER='bigrapher' | BIGMC='bigmc'
;

enum LoadFormat:
	XMI='xmi' | ECORE='ecore'
;

enum DataSink:
	STDOUT='console' | FILE='file' | DB='cdo'
;

enum DataSource:
	LOCAL_FILE='file' | DB='cdo' | CLASSPATH='classpath'
;

enum OutputModeModel:
	INSTANCE_MODEL='xmi' | META_MODEL='ecore';
	
	
	
//terminal CHAR: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö');
//terminal BASICID: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö')*;
//terminal STRING: '"' -> '"';
//terminal WS: (' '|'\t')+;
//terminal ANY_OTHER: .;m
	
