grammar de.tudresden.inf.st.bigraphs.dsl.BDSL with org.eclipse.xtext.xbase.Xbase //with org.eclipse.xtext.xbase.Xtype //with org.eclipse.xtext.common.Terminals //

import "platform:/resource/BigraphBaseModel/model/bigraphBaseModel.ecore" as bigraph
//import "http://www.tudresden.de/inf/st/bigraphs/dsl/BDSL" as bdsl
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
//import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

generate bDSL "http://www.tudresden.de/inf/st/bigraphs/dsl/BDSL"


// types are in italic font
BDSLDocument:
// first imports and signatures 
//		(importDeclarations+=XImportDeclaration*)
//	importSection=XImportSection?
	(importDeclarationsBdsl+=BDSLDocumentImport | importDeclarationsUdf+=BDSLUdfImport)*

	// signature definitions
	signature+=(Signature)*

	// and unordered group of global and local statements
	((statements+=(AbstractElement)*) & (main=MainElement));

FqnWithWildCard:
	FQN ('.*')?;

FQN:
	ID ('.' ID)*; // TODO: could be now also IdOrKw instead of ID

//terminal DOLLAR: '$';
terminal BIGRAPH_VAR_REFERENCE_ID returns ecore::EString:
	('$' ID ('.' ID)*)	//cannot reference to FQN directly
;

BDSLDocumentImport:
	{BDSLDocumentImport} 'import:bdsl' importedNamespace=FqnWithWildCard;

BDSLUdfImport:
	{BDSLUdfImport} 'import:udf' importedNamespace=FqnWithWildCard;

//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INT returns ecore::EInt: ('0'..'9')+;

FLOAT returns ecore::EFloat:
	INT '.' INT;

fragment BDSLNameSigDeclFrag *:
	name=ID ("(" sig=[Signature] ")")?;

fragment BDSLSiteVarsAndControlVarFrag *:
	(("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ':' controlType=[ControlVariable|FQN])?;

AbstractElement:
	AssignmentOrVariableDeclaration;

AbstractNamedSignatureElement: //TODO rename to namedelement
	LocalVarDecl | LocalRuleDecl | LocalPredicateDeclaration | BRSDefinition;

MainElement:
	MAIN_KEYWORD {MainElement} body=BDSLBlock; //value+=(AbstractMainStatements)* 
MAIN_KEYWORD:
	"main" "=";

IdOrKw:
	ID | KEYWORD;

KEYWORD:
	MAIN_KEYWORD
	| METHOD_KEYWORD
	| VAR_DECL_KEWORDS;

VAR_DECL_KEWORDS:
	'react'
	| 'val'
	| 'pred'
	| 'brs'
	| 'signature';

METHOD_KEYWORD:
	'load'
	| 'randomBigraph'
	| 'export'
	| 'execute'
	| 'println';

	// Creates a signature class with the same name: shortcut for "signature returns signature"
Signature:
	{Signature}
	'signature'
	name=ID
	('{' (controls+=ControlDef)+ '}')?;

ControlDef returns ControlVariable:
	{ControlVariable} type=ControlType? 'ctrl' name=ID 'arity' arity=INT;

	///////////////////////////////////
// Bigraphs						 //
///////////////////////////////////
LocalVarDecl:
	'val' {LocalVarDecl} BDSLNameSigDeclFrag BDSLSiteVarsAndControlVarFrag;

LVD2 returns LocalVarDecl:
	{LVD2} 'val' name=ID BDSLSiteVarsAndControlVarFrag '=' '{' BDSLBigraphDefinition '}';

AbstractBigraphDeclaration:
	BigraphVarReference | NodeExpressionCall | LVD2 | ElementaryBigraphs;

NodeExpressionCall:
	value=[ControlVariable|FQN] ("[" links+=NameConstant? (',' links+=NameConstant)* "]")?;

NameConstant:
	{NameConstant} name=STRING;

	//TODO: change to linkNamevars or so
SiteVars:
	name=ID;

Site:
	'id' '(' index=INT ')';

LocalRuleDecl:
	"react" {LocalRuleDecl} BDSLNameSigDeclFrag;

LocalPredicateDeclaration:
	'pred' {LocalPredicateDeclaration} BDSLNameSigDeclFrag (':' type=PredicateType)?;

BRSDefinition:
	'brs' {BRSDefinition} BDSLNameSigDeclFrag;

ElementaryBigraphs:
	Site | Barren | Merge | Closure | Substitution;

Barren:
	'barren' {Barren} '()';

Merge:
	'merge' {Merge} '(' sites=INT ')';

Closure:
	('closure' | 'clsre' | '/') {Closure} '(' value+=STRING (',' value+=STRING)* ')';

Substitution:
	('substitution' | 'subst') {Substitution} '(' from=STRING ',' ('[' to+=STRING (',' to+=STRING)* ']') ')';

BigraphVarReference:
//	{BigraphVarReference}
	value=[LocalVarDecl|BIGRAPH_VAR_REFERENCE_ID];

RuleVarReference:
//	{RuleVarReference}
	value=[LocalRuleDecl|BIGRAPH_VAR_REFERENCE_ID];

PredicateVarReference:
//	{PredicateVarReference}
	value=[LocalPredicateDeclaration|BIGRAPH_VAR_REFERENCE_ID];

BRSVarReference:
//	{BRSVarReference}
	value=[BRSDefinition|BIGRAPH_VAR_REFERENCE_ID];

BigraphVarDeclOrReference: // dont remove: needed to organize hierarchy
	LocalVarDecl | BigraphVarReference;

BigraphRuleDeclOrReference: // dont remove: needed to organize hierarchy
	LocalRuleDecl | RuleVarReference;

BigraphPredDeclOrReference: // dont remove: needed to organize hierarchy
	LocalPredicateDeclaration | PredicateVarReference;

BigraphBdslVarDeclOrReference:
	BRSDefinition | BRSVarReference;

	///////////////////////////////////
// Bigraph Expression Operations //
///////////////////////////////////

BigraphExpression:
	Addition;

Addition returns BigraphExpression:
	Multiplication (({Plus.left=current} operator=BinaryParallelOperator) right=Multiplication)*;

Multiplication returns BigraphExpression:
	PrimaryExpression (({Multi.left=current} operator=BinaryNestingOperator) right=PrimaryExpression)*;

PrimaryExpression returns BigraphExpression:
	'(' BigraphExpression ')' |
	//	{BigraphLiteral} value=AbstractBigraphDeclaration
	AbstractBigraphDeclaration;

BDSLReferenceSymbol:
	BigraphVarReference | RuleVarReference | PredicateVarReference | BRSVarReference;

AssignmentOrVariableDeclaration:
	BDSLVariableDeclaration2 | BDSLReferenceDeclaration;

BDSLVariableDeclaration2:
	{BDSLVariableDeclaration2} (variable=AbstractNamedSignatureElement) ('=' (value=BDSLExpression))?;

BDSLReferenceDeclaration:
	{BDSLReferenceDeclaration} target=[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID] ('=' (value=BDSLExpression))?;

BDSLExpression:
	BDSLAssignment;

BDSLAssignment returns BDSLExpression:
	BDSLSelectionExpression ({BDSLAssignment.left=current} '=' right=BDSLExpression)? // Right associativity	
;

//BDSLReactDefinition
//BDSLPredDefinition
fragment BDSLReactDefinition:
	(redex=(BigraphExpression | AssignableBigraphExpressionWithExplicitSig) '}' ',' '{' reactum=(BigraphExpression |
	AssignableBigraphExpressionWithExplicitSig)) //TODO AssignableBigraphExpressionWithExplicitSig
;

fragment BDSLBrsDefinition:
	brs=AssignableBigraphExpressionWithExplicitSig | (('agents' '=' ("[" agents+=BigraphVarReference? (','
	agents+=BigraphVarReference)* "]")) (',' 'rules' '=' ("[" rules+=RuleVarReference? (',' agents+=RuleVarReference)*
	"]")) (',' 'preds' '=' ("[" predicates+=PredicateVarReference? (',' predicates+=PredicateVarReference)* "]"))?);

fragment BDSLBigraphDefinition: // this also covers Predicate definitions
	definition+=(BigraphExpression)*;

BDSLSelectionExpression returns BDSLExpression:
	BDSLTerminalExpression |
	(('{'
	(=> BDSLReactDefinition | => BDSLBigraphDefinition | => BDSLBrsDefinition)
	'}'));

BDSLTerminalExpression returns BDSLExpression:
//	{BDSLStringConstant} value=STRING |
//	{BDSLIntConstant} value=INT |
//	{BDSLBoolConstant} value = ('true' | 'false') |
//	{BDSLOpenBigraphDefinitionConstant} '{'
//	| {BDSLCloseBigraphDefinitionConstant} '}'
	AssignableBigraphExpression | '(' BDSLExpression ')' //this might be not needed for our case
;

////////////////////////////////////
// Global BDSL Methods			  //
////////////////////////////////////

ReferenceClassSymbol:
	type=[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID];

AssignableBigraphExpression:
	AssignableBigraphExpressionWithExplicitSig | ReferenceClassSymbol //BigraphVarReference
;

AssignableBigraphExpressionWithExplicitSig: //TODO rename to methodsomething
	LoadMethod | CreateRandomBigraphMethod;

MethodStatements:
	PrintLn | ExportMethod | ExecuteBRSMethod | LoadMethod | CreateRandomBigraphMethod;

PrintLn:
	'println' {PrintLn} '(' text=(PrintableExpression) (',' mode=OutputModeModel)? ')';

PrintableExpression:
	({StringLiteral} value=STRING) | (BigraphVarReference);

ExportMethod:
	'export' {ExportMethod} '(' ((brs=BRSVarReference)) (',' 'as' '=' format=ExportFormat)? (',' 'to' '=' sink=DataSink
	(',' 'resourcePath' '=' resourcePath=STRING)?)? ')';

ExecuteBRSMethod:
	'execute' {ExecuteBRSMethod} '(' ((brs=BRSVarReference)) ')';

LoadMethod returns AssignableBigraphExpressionWithExplicitSig:
	{LoadMethod}
	'load' '(' ('sig' '=' sig=[Signature])? (',' 'as' '=' format=LoadFormat)? (',' 'resourcePath' '='
	resourcePath=STRING)? ')';

CreateRandomBigraphMethod returns AssignableBigraphExpressionWithExplicitSig:
	{CreateRandomBigraphMethod}
	'randomBigraph' '('
	('sig' '=' sig=[Signature])?
	(',' 'n' '=' n=INT)?
	(',' 't' '=' t=INT)?
	(',' 'p' '=' p=FLOAT)?
	')';

	////////////////////////////////////
// Main Block and Main Statements //
////////////////////////////////////
AbstractMainStatements:
	MethodStatements | AssignmentOrVariableDeclaration | UDFOperation //| BDSLVariableDeclaration // | BDSLReactionDeclaration
;

UDFOperation:
	{UDFOperation}
	'j' '{' expression+=UdfCallExpression* '}' //body=XBlockExpression
;

//DataType:
//  'datatype' name=ID 
//  'mapped-to' javaType=[jvmTypes::JvmType|FQN];

UdfCallExpression returns XExpression:
	{UdfCallExpression}
	//	(=>(type=JvmTypeReference name=QualifiedName) | name=QualifiedName)
	(type=[jvmTypes::JvmType|FQN]) //QualifiedName
//	name=FQN //QualifiedName
	( '()'
	| ('('
	////		(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
	params+=[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID] (','
	params+=[AbstractNamedSignatureElement|BIGRAPH_VAR_REFERENCE_ID])*
	')'));

ClosedBrackets hidden():
	'(' ')';

BDSLBlock:
	{BDSLBlock} '{' statements+=AbstractMainStatements* '}';

	//////////////////////////
// Enums				//
//////////////////////////
enum VariableCreationType:
	INSTANTIATED='instance' | LOADED='loaded';

enum BinaryParallelOperator:
	UNSET | MERGE='|' | PARALLEL='||';

enum BinaryNestingOperator:
	UNSET2 | NESTING='-' | COMPOSITION='*' //we cannot use a simple '.' right now
;

enum ControlType:
	ATOMIC='atomic' | ACTIVE='active' | PASSIVE='passive';

enum PredicateType:
	PARTIAL='partial' | ISO='iso';

enum ExportFormat:
	XMI='xmi' | ECORE='ecore' | BIGRAPHER='bigrapher' | BIGMC='bigmc';

enum LoadFormat:
	XMI='xmi' | ECORE='ecore';

enum DataSink:
	STDOUT='console' | LOCAL_FILE='file' | DB='cdo';

enum DataSource:
	UNSPECIFIED='unspecified' | LOCAL_FILE='file' | DB='cdo' | CLASSPATH='classpath';

enum OutputModeModel:
	INSTANCE_MODEL='xmi' | META_MODEL='ecore';

	//terminal CHAR: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö');
//terminal BASICID: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö')*;
//terminal STRING: '"' -> '"';
//terminal WS: (' '|'\t')+;
//terminal ANY_OTHER: .;
	
