/*
 * generated by Xtext 2.21.0
 */
package de.tudresden.inf.st.bigraphs.dsl.serializer;

import com.google.inject.Inject;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.BDSLPackage;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.BRSDefinition;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.BRSModel;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.BRSModelImport;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.BigraphVarReference;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.ControlVariable;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.LocalRuleDecl;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.LocalVarDecl;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.MainDeclaration;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.MainElement;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.Multi;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.NameConstant;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.NodeExpressionCall;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.Plus;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.PrintLn;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.RuleVarReference;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.Signature;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.Site;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.SiteVars;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.StringLiteral;
import de.tudresden.inf.st.bigraphs.dsl.services.BDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BDSLPackage.BRS_DEFINITION:
				sequence_BRSDefinition(context, (BRSDefinition) semanticObject); 
				return; 
			case BDSLPackage.BRS_MODEL:
				sequence_BRSModel(context, (BRSModel) semanticObject); 
				return; 
			case BDSLPackage.BRS_MODEL_IMPORT:
				sequence_BRSModelImport(context, (BRSModelImport) semanticObject); 
				return; 
			case BDSLPackage.BIGRAPH_VAR_REFERENCE:
				sequence_BigraphVarReference(context, (BigraphVarReference) semanticObject); 
				return; 
			case BDSLPackage.CONTROL_VARIABLE:
				sequence_ControlDef(context, (ControlVariable) semanticObject); 
				return; 
			case BDSLPackage.LOCAL_RULE_DECL:
				sequence_LocalRuleDecl(context, (LocalRuleDecl) semanticObject); 
				return; 
			case BDSLPackage.LOCAL_VAR_DECL:
				if (rule == grammarAccess.getLVD2Rule()
						|| rule == grammarAccess.getAbstractBigraphDeclarationRule()
						|| rule == grammarAccess.getBigraphExpressionRule()
						|| rule == grammarAccess.getAdditionRule()
						|| action == grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0()
						|| rule == grammarAccess.getMultiplicationRule()
						|| action == grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()) {
					sequence_LVD2(context, (LocalVarDecl) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAbstractElementRule()
						|| rule == grammarAccess.getLocalVarDeclRule()) {
					sequence_LocalVarDecl(context, (LocalVarDecl) semanticObject); 
					return; 
				}
				else break;
			case BDSLPackage.MAIN_DECLARATION:
				sequence_MainDeclaration(context, (MainDeclaration) semanticObject); 
				return; 
			case BDSLPackage.MAIN_ELEMENT:
				sequence_MainElement(context, (MainElement) semanticObject); 
				return; 
			case BDSLPackage.MULTI:
				sequence_Multiplication(context, (Multi) semanticObject); 
				return; 
			case BDSLPackage.NAME_CONSTANT:
				sequence_NameConstant(context, (NameConstant) semanticObject); 
				return; 
			case BDSLPackage.NODE_EXPRESSION_CALL:
				sequence_NodeExpressionCall(context, (NodeExpressionCall) semanticObject); 
				return; 
			case BDSLPackage.PLUS:
				sequence_Addition(context, (Plus) semanticObject); 
				return; 
			case BDSLPackage.PRINT_LN:
				sequence_PrintLn(context, (PrintLn) semanticObject); 
				return; 
			case BDSLPackage.RULE_VAR_REFERENCE:
				sequence_RuleVarReference(context, (RuleVarReference) semanticObject); 
				return; 
			case BDSLPackage.SIGNATURE:
				sequence_Signature(context, (Signature) semanticObject); 
				return; 
			case BDSLPackage.SITE:
				sequence_Site(context, (Site) semanticObject); 
				return; 
			case BDSLPackage.SITE_VARS:
				sequence_SiteVars(context, (SiteVars) semanticObject); 
				return; 
			case BDSLPackage.STRING_LITERAL:
				sequence_PrintableExpression(context, (StringLiteral) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BigraphExpression returns Plus
	 *     Addition returns Plus
	 *     Addition.Plus_1_0_0 returns Plus
	 *     Multiplication returns Plus
	 *     Multiplication.Multi_1_0_0 returns Plus
	 *     PrimaryExpression returns Plus
	 *
	 * Constraint:
	 *     (left=Addition_Plus_1_0_0 operator=BinaryParallelOperator right=Multiplication)
	 */
	protected void sequence_Addition(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.PLUS__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.PLUS__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAdditionAccess().getOperatorBinaryParallelOperatorEnumRuleCall_1_0_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractMainStatements returns BRSDefinition
	 *     BRSDefinition returns BRSDefinition
	 *
	 * Constraint:
	 *     (agents+=BigraphVarReference? agents+=BigraphVarReference* rules+=RuleVarReference? agents+=RuleVarReference*)
	 */
	protected void sequence_BRSDefinition(ISerializationContext context, BRSDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BRSModelImport returns BRSModelImport
	 *
	 * Constraint:
	 *     importedNamespace=FqnWithWildCard
	 */
	protected void sequence_BRSModelImport(ISerializationContext context, BRSModelImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.BRS_MODEL_IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.BRS_MODEL_IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBRSModelImportAccess().getImportedNamespaceFqnWithWildCardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BRSModel returns BRSModel
	 *
	 * Constraint:
	 *     (signature+=Signature+ | (signature+=Signature+ (statements+=AbstractElement | main=MainElement)+))?
	 */
	protected void sequence_BRSModel(ISerializationContext context, BRSModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BigraphVarReference returns BigraphVarReference
	 *     AbstractBigraphDeclaration returns BigraphVarReference
	 *     BigraphExpression returns BigraphVarReference
	 *     Addition returns BigraphVarReference
	 *     Addition.Plus_1_0_0 returns BigraphVarReference
	 *     Multiplication returns BigraphVarReference
	 *     Multiplication.Multi_1_0_0 returns BigraphVarReference
	 *     PrimaryExpression returns BigraphVarReference
	 *     AbstractMainStatements returns BigraphVarReference
	 *     PrintableExpression returns BigraphVarReference
	 *
	 * Constraint:
	 *     value=[LocalVarDecl|BigraphVarReferenceID]
	 */
	protected void sequence_BigraphVarReference(ISerializationContext context, BigraphVarReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.BIGRAPH_VAR_REFERENCE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.BIGRAPH_VAR_REFERENCE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBigraphVarReferenceAccess().getValueLocalVarDeclBigraphVarReferenceIDParserRuleCall_0_1(), semanticObject.eGet(BDSLPackage.Literals.BIGRAPH_VAR_REFERENCE__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ControlDef returns ControlVariable
	 *
	 * Constraint:
	 *     (type=ControlType? name=ID arity=INT)
	 */
	protected void sequence_ControlDef(ISerializationContext context, ControlVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LVD2 returns LocalVarDecl
	 *     AbstractBigraphDeclaration returns LocalVarDecl
	 *     BigraphExpression returns LocalVarDecl
	 *     Addition returns LocalVarDecl
	 *     Addition.Plus_1_0_0 returns LocalVarDecl
	 *     Multiplication returns LocalVarDecl
	 *     Multiplication.Multi_1_0_0 returns LocalVarDecl
	 *     PrimaryExpression returns LocalVarDecl
	 *
	 * Constraint:
	 *     (name=ID type=[ControlVariable|FQN] definition+=BigraphExpression*)
	 */
	protected void sequence_LVD2(ISerializationContext context, LocalVarDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns LocalRuleDecl
	 *     LocalRuleDecl returns LocalRuleDecl
	 *
	 * Constraint:
	 *     (name=ID sig=[Signature|ID]? redex=BigraphExpression reactum=BigraphExpression)
	 */
	protected void sequence_LocalRuleDecl(ISerializationContext context, LocalRuleDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns LocalVarDecl
	 *     LocalVarDecl returns LocalVarDecl
	 *
	 * Constraint:
	 *     (name=ID sig=[Signature|ID]? ((siteArgs+=SiteVars siteArgs+=SiteVars*)? type=[ControlVariable|FQN])? definition+=BigraphExpression*)
	 */
	protected void sequence_LocalVarDecl(ISerializationContext context, LocalVarDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MainDeclaration returns MainDeclaration
	 *
	 * Constraint:
	 *     definition=AbstractMainStatements
	 */
	protected void sequence_MainDeclaration(ISerializationContext context, MainDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.MAIN_DECLARATION__DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.MAIN_DECLARATION__DEFINITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMainDeclarationAccess().getDefinitionAbstractMainStatementsParserRuleCall_1_0(), semanticObject.getDefinition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MainElement returns MainElement
	 *
	 * Constraint:
	 *     value+=MainDeclaration*
	 */
	protected void sequence_MainElement(ISerializationContext context, MainElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BigraphExpression returns Multi
	 *     Addition returns Multi
	 *     Addition.Plus_1_0_0 returns Multi
	 *     Multiplication returns Multi
	 *     Multiplication.Multi_1_0_0 returns Multi
	 *     PrimaryExpression returns Multi
	 *
	 * Constraint:
	 *     (left=Multiplication_Multi_1_0_0 operator=BinaryNestingOperator right=PrimaryExpression)
	 */
	protected void sequence_Multiplication(ISerializationContext context, Multi semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.MULTI__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.MULTI__LEFT));
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.MULTI__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.MULTI__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.MULTI__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.MULTI__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiplicationAccess().getOperatorBinaryNestingOperatorEnumRuleCall_1_0_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getMultiplicationAccess().getRightPrimaryExpressionParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NameConstant returns NameConstant
	 *     LinkNames returns NameConstant
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_NameConstant(ISerializationContext context, NameConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.NAME_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.NAME_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNameConstantAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractBigraphDeclaration returns NodeExpressionCall
	 *     NodeExpressionCall returns NodeExpressionCall
	 *     BigraphExpression returns NodeExpressionCall
	 *     Addition returns NodeExpressionCall
	 *     Addition.Plus_1_0_0 returns NodeExpressionCall
	 *     Multiplication returns NodeExpressionCall
	 *     Multiplication.Multi_1_0_0 returns NodeExpressionCall
	 *     PrimaryExpression returns NodeExpressionCall
	 *
	 * Constraint:
	 *     (value=[ControlVariable|FQN] links+=LinkNames*)
	 */
	protected void sequence_NodeExpressionCall(ISerializationContext context, NodeExpressionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractMainStatements returns PrintLn
	 *     PrintLn returns PrintLn
	 *
	 * Constraint:
	 *     (text=PrintableExpression mode=OutputModeModel?)
	 */
	protected void sequence_PrintLn(ISerializationContext context, PrintLn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrintableExpression returns StringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_PrintableExpression(ISerializationContext context, StringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.STRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.STRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintableExpressionAccess().getValueSTRINGTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RuleVarReference returns RuleVarReference
	 *
	 * Constraint:
	 *     value=[LocalRuleDecl|BigraphVarReferenceID]
	 */
	protected void sequence_RuleVarReference(ISerializationContext context, RuleVarReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.RULE_VAR_REFERENCE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.RULE_VAR_REFERENCE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRuleVarReferenceAccess().getValueLocalRuleDeclBigraphVarReferenceIDParserRuleCall_0_1(), semanticObject.eGet(BDSLPackage.Literals.RULE_VAR_REFERENCE__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Signature returns Signature
	 *
	 * Constraint:
	 *     (name=ID controls+=ControlDef*)
	 */
	protected void sequence_Signature(ISerializationContext context, Signature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SiteVars returns SiteVars
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SiteVars(ISerializationContext context, SiteVars semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.SITE_VARS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.SITE_VARS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSiteVarsAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Site returns Site
	 *     AbstractBigraphDeclaration returns Site
	 *     BigraphExpression returns Site
	 *     Addition returns Site
	 *     Addition.Plus_1_0_0 returns Site
	 *     Multiplication returns Site
	 *     Multiplication.Multi_1_0_0 returns Site
	 *     PrimaryExpression returns Site
	 *
	 * Constraint:
	 *     index=INT
	 */
	protected void sequence_Site(ISerializationContext context, Site semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BDSLPackage.Literals.SITE__INDEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BDSLPackage.Literals.SITE__INDEX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSiteAccess().getIndexINTTerminalRuleCall_2_0(), semanticObject.getIndex());
		feeder.finish();
	}
	
	
}
