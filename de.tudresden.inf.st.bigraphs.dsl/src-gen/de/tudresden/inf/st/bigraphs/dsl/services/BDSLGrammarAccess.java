/*
 * generated by Xtext 2.21.0
 */
package de.tudresden.inf.st.bigraphs.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BRSModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.BRSModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignatureSignatureParserRuleCall_0_0 = (RuleCall)cSignatureAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cStatementsAbstractElementParserRuleCall_1_0_0 = (RuleCall)cStatementsAssignment_1_0.eContents().get(0);
		private final Assignment cMainAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cMainMainElementParserRuleCall_1_1_0 = (RuleCall)cMainAssignment_1_1.eContents().get(0);
		
		////types are in italic font
		//BRSModel:
		//	signature+=Signature* (statements+=AbstractElement* & main=MainElement);
		@Override public ParserRule getRule() { return rule; }
		
		//signature+=Signature* (statements+=AbstractElement* & main=MainElement)
		public Group getGroup() { return cGroup; }
		
		//signature+=Signature*
		public Assignment getSignatureAssignment_0() { return cSignatureAssignment_0; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_0_0() { return cSignatureSignatureParserRuleCall_0_0; }
		
		//(statements+=AbstractElement* & main=MainElement)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//statements+=AbstractElement*
		public Assignment getStatementsAssignment_1_0() { return cStatementsAssignment_1_0; }
		
		//AbstractElement
		public RuleCall getStatementsAbstractElementParserRuleCall_1_0_0() { return cStatementsAbstractElementParserRuleCall_1_0_0; }
		
		//main=MainElement
		public Assignment getMainAssignment_1_1() { return cMainAssignment_1_1; }
		
		//MainElement
		public RuleCall getMainMainElementParserRuleCall_1_1_0() { return cMainMainElementParserRuleCall_1_1_0; }
	}
	public class BRSModelImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.BRSModelImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceFqnWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//BRSModelImport:
		//	'import' importedNamespace=FqnWithWildCard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=FqnWithWildCard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=FqnWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//FqnWithWildCard
		public RuleCall getImportedNamespaceFqnWithWildCardParserRuleCall_1_0() { return cImportedNamespaceFqnWithWildCardParserRuleCall_1_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class FqnWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.FqnWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFQNParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FqnWithWildCard:
		//	FQN '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//FQN '.*'?
		public Group getGroup() { return cGroup; }
		
		//FQN
		public RuleCall getFQNParserRuleCall_0() { return cFQNParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class BigraphVarReferenceIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.BigraphVarReferenceID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFQNParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//BigraphVarReferenceID hidden():
		//	'$' FQN;
		@Override public ParserRule getRule() { return rule; }
		
		//'$' FQN
		public Group getGroup() { return cGroup; }
		
		//'$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//FQN
		public RuleCall getFQNParserRuleCall_1() { return cFQNParserRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////returns ecore::EString 
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.AbstractElement");
		private final RuleCall cLocalVarDeclParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AbstractElement:
		//	LocalVarDecl
		//	// and rules
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LocalVarDecl
		public RuleCall getLocalVarDeclParserRuleCall() { return cLocalVarDeclParserRuleCall; }
	}
	public class MainElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.MainElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Action cMainLiteralAction_3 = (Action)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueMainDeclarationParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MainElement:
		//	"main" "=" '{' {MainLiteral} value+=MainDeclaration* '}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//"main" "=" '{' {MainLiteral} value+=MainDeclaration* '}' ';'
		public Group getGroup() { return cGroup; }
		
		//"main"
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//{MainLiteral}
		public Action getMainLiteralAction_3() { return cMainLiteralAction_3; }
		
		//value+=MainDeclaration*
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//MainDeclaration
		public RuleCall getValueMainDeclarationParserRuleCall_4_0() { return cValueMainDeclarationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSignatureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cControlsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cControlsControlDefParserRuleCall_3_1_0 = (RuleCall)cControlsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		////creates a signature class with the same name: shortcut for "signature returns signature"
		//Signature:
		//	{Signature}
		//	'signature'
		//	name=ID ('{' controls+=ControlDef+ '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Signature} 'signature' name=ID ('{' controls+=ControlDef+ '}')?
		public Group getGroup() { return cGroup; }
		
		//{Signature}
		public Action getSignatureAction_0() { return cSignatureAction_0; }
		
		//'signature'
		public Keyword getSignatureKeyword_1() { return cSignatureKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{' controls+=ControlDef+ '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//controls+=ControlDef+
		public Assignment getControlsAssignment_3_1() { return cControlsAssignment_3_1; }
		
		//ControlDef
		public RuleCall getControlsControlDefParserRuleCall_3_1_0() { return cControlsControlDefParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ControlDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.ControlDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeControlTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cCtrlKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cArityKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cArityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArityArityValueParserRuleCall_5_0 = (RuleCall)cArityAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ControlDef ControlVariable:
		//	{ControlVariable} type=ControlType? 'ctrl' name=ID 'arity' arity=ArityValue ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{ControlVariable} type=ControlType? 'ctrl' name=ID 'arity' arity=ArityValue ';'
		public Group getGroup() { return cGroup; }
		
		//{ControlVariable}
		public Action getControlVariableAction_0() { return cControlVariableAction_0; }
		
		//type=ControlType?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ControlType
		public RuleCall getTypeControlTypeEnumRuleCall_1_0() { return cTypeControlTypeEnumRuleCall_1_0; }
		
		//'ctrl'
		public Keyword getCtrlKeyword_2() { return cCtrlKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'arity'
		public Keyword getArityKeyword_4() { return cArityKeyword_4; }
		
		//arity=ArityValue
		public Assignment getArityAssignment_5() { return cArityAssignment_5; }
		
		//ArityValue
		public RuleCall getArityArityValueParserRuleCall_5_0() { return cArityArityValueParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class ArityValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.ArityValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ArityValue EInt:
		//	value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EInt
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0() { return cValueEIntParserRuleCall_0; }
	}
	public class NameConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.NameConstant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////ControlVariable returns bigraph::BNode:
		////	name=ID;
		//NameConstant:
		//	value=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EString
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_0() { return cValueEStringParserRuleCall_0; }
	}
	public class LinkNamesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.LinkNames");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cNameConstantParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//LinkNames:
		//	NameConstant | NameConstant ",";
		@Override public ParserRule getRule() { return rule; }
		
		//NameConstant | NameConstant ","
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NameConstant
		public RuleCall getNameConstantParserRuleCall_0() { return cNameConstantParserRuleCall_0; }
		
		//NameConstant ","
		public Group getGroup_1() { return cGroup_1; }
		
		//NameConstant
		public RuleCall getNameConstantParserRuleCall_1_0() { return cNameConstantParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
	}
	public class SiteVarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.SiteVars");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////TODO: change to linkNamevars or so
		//SiteVars:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class LVD2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.LVD2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalVarDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeControlVariableCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeControlVariableFQNParserRuleCall_4_0_1 = (RuleCall)cTypeControlVariableCrossReference_4_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDefinitionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDefinitionBigraphExpressionParserRuleCall_7_0 = (RuleCall)cDefinitionAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////(args+=LVD2)*
		//LVD2:
		//	{LocalVarDecl} "val" name=ID ':' type=[ControlVariable|FQN] '=' "{" definition+=BigraphExpression* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{LocalVarDecl} "val" name=ID ':' type=[ControlVariable|FQN] '=' "{" definition+=BigraphExpression* "}"
		public Group getGroup() { return cGroup; }
		
		//{LocalVarDecl}
		public Action getLocalVarDeclAction_0() { return cLocalVarDeclAction_0; }
		
		//"val"
		public Keyword getValKeyword_1() { return cValKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=[ControlVariable|FQN]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[ControlVariable|FQN]
		public CrossReference getTypeControlVariableCrossReference_4_0() { return cTypeControlVariableCrossReference_4_0; }
		
		//FQN
		public RuleCall getTypeControlVariableFQNParserRuleCall_4_0_1() { return cTypeControlVariableFQNParserRuleCall_4_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//definition+=BigraphExpression*
		public Assignment getDefinitionAssignment_7() { return cDefinitionAssignment_7; }
		
		//BigraphExpression
		public RuleCall getDefinitionBigraphExpressionParserRuleCall_7_0() { return cDefinitionBigraphExpressionParserRuleCall_7_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class LocalVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.LocalVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLocalVarDeclAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSigAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cSigSignatureCrossReference_2_1_1_0 = (CrossReference)cSigAssignment_2_1_1.eContents().get(0);
		private final RuleCall cSigSignatureIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cSigSignatureCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Group cGroup_2_2_0 = (Group)cGroup_2_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_2_0_0 = (Keyword)cGroup_2_2_0.eContents().get(0);
		private final Assignment cSiteArgsAssignment_2_2_0_1 = (Assignment)cGroup_2_2_0.eContents().get(1);
		private final RuleCall cSiteArgsSiteVarsParserRuleCall_2_2_0_1_0 = (RuleCall)cSiteArgsAssignment_2_2_0_1.eContents().get(0);
		private final Group cGroup_2_2_0_2 = (Group)cGroup_2_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0_2_0 = (Keyword)cGroup_2_2_0_2.eContents().get(0);
		private final Assignment cSiteArgsAssignment_2_2_0_2_1 = (Assignment)cGroup_2_2_0_2.eContents().get(1);
		private final RuleCall cSiteArgsSiteVarsParserRuleCall_2_2_0_2_1_0 = (RuleCall)cSiteArgsAssignment_2_2_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2_0_3 = (Keyword)cGroup_2_2_0.eContents().get(3);
		private final Keyword cColonKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final CrossReference cTypeControlVariableCrossReference_2_2_2_0 = (CrossReference)cTypeAssignment_2_2_2.eContents().get(0);
		private final RuleCall cTypeControlVariableFQNParserRuleCall_2_2_2_0_1 = (RuleCall)cTypeControlVariableCrossReference_2_2_2_0.eContents().get(1);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cEqualsSignKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final Assignment cDefinitionAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cDefinitionBigraphExpressionParserRuleCall_2_3_2_0 = (RuleCall)cDefinitionAssignment_2_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3_3 = (Keyword)cGroup_2_3.eContents().get(3);
		
		////
		//LocalVarDecl: //	('(' args+=DeclaredParameter (',' args+=DeclaredParameter)* ')')?
		//	"val" {LocalVarDecl} (name=ID ("(" sig=[Signature] ")")? (("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ':'
		//	type=[ControlVariable|FQN])? ("=" "{" //		(args+=LocalVarDecl)*
		//	definition+=BigraphExpression* "}"));
		@Override public ParserRule getRule() { return rule; }
		
		////	('(' args+=DeclaredParameter (',' args+=DeclaredParameter)* ')')?
		//"val" {LocalVarDecl} (name=ID ("(" sig=[Signature] ")")? (("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ':'
		//type=[ControlVariable|FQN])? ("=" "{" //		(args+=LocalVarDecl)*
		//definition+=BigraphExpression* "}"))
		public Group getGroup() { return cGroup; }
		
		////	('(' args+=DeclaredParameter (',' args+=DeclaredParameter)* ')')?
		//"val"
		public Keyword getValKeyword_0() { return cValKeyword_0; }
		
		//{LocalVarDecl}
		public Action getLocalVarDeclAction_1() { return cLocalVarDeclAction_1; }
		
		//(name=ID ("(" sig=[Signature] ")")? (("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ':'
		//type=[ControlVariable|FQN])? ("=" "{" //		(args+=LocalVarDecl)*
		//definition+=BigraphExpression* "}"))
		public Group getGroup_2() { return cGroup_2; }
		
		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }
		
		//("(" sig=[Signature] ")")?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//sig=[Signature]
		public Assignment getSigAssignment_2_1_1() { return cSigAssignment_2_1_1; }
		
		//[Signature]
		public CrossReference getSigSignatureCrossReference_2_1_1_0() { return cSigSignatureCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getSigSignatureIDTerminalRuleCall_2_1_1_0_1() { return cSigSignatureIDTerminalRuleCall_2_1_1_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
		
		//(("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ':' type=[ControlVariable|FQN])?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")?
		public Group getGroup_2_2_0() { return cGroup_2_2_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_2_0_0() { return cLeftSquareBracketKeyword_2_2_0_0; }
		
		//siteArgs+=SiteVars
		public Assignment getSiteArgsAssignment_2_2_0_1() { return cSiteArgsAssignment_2_2_0_1; }
		
		//SiteVars
		public RuleCall getSiteArgsSiteVarsParserRuleCall_2_2_0_1_0() { return cSiteArgsSiteVarsParserRuleCall_2_2_0_1_0; }
		
		//(',' siteArgs+=SiteVars)*
		public Group getGroup_2_2_0_2() { return cGroup_2_2_0_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0_2_0() { return cCommaKeyword_2_2_0_2_0; }
		
		//siteArgs+=SiteVars
		public Assignment getSiteArgsAssignment_2_2_0_2_1() { return cSiteArgsAssignment_2_2_0_2_1; }
		
		//SiteVars
		public RuleCall getSiteArgsSiteVarsParserRuleCall_2_2_0_2_1_0() { return cSiteArgsSiteVarsParserRuleCall_2_2_0_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_2_0_3() { return cRightSquareBracketKeyword_2_2_0_3; }
		
		//':'
		public Keyword getColonKeyword_2_2_1() { return cColonKeyword_2_2_1; }
		
		//type=[ControlVariable|FQN]
		public Assignment getTypeAssignment_2_2_2() { return cTypeAssignment_2_2_2; }
		
		//[ControlVariable|FQN]
		public CrossReference getTypeControlVariableCrossReference_2_2_2_0() { return cTypeControlVariableCrossReference_2_2_2_0; }
		
		//FQN
		public RuleCall getTypeControlVariableFQNParserRuleCall_2_2_2_0_1() { return cTypeControlVariableFQNParserRuleCall_2_2_2_0_1; }
		
		//("=" "{" //		(args+=LocalVarDecl)*
		//definition+=BigraphExpression* "}")
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_3_0() { return cEqualsSignKeyword_2_3_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_3_1() { return cLeftCurlyBracketKeyword_2_3_1; }
		
		////		(args+=LocalVarDecl)*
		//definition+=BigraphExpression*
		public Assignment getDefinitionAssignment_2_3_2() { return cDefinitionAssignment_2_3_2; }
		
		//BigraphExpression
		public RuleCall getDefinitionBigraphExpressionParserRuleCall_2_3_2_0() { return cDefinitionBigraphExpressionParserRuleCall_2_3_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3_3() { return cRightCurlyBracketKeyword_2_3_3; }
	}
	public class BigraphVarReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.BigraphVarReference");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueLocalVarDeclCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueLocalVarDeclBigraphVarReferenceIDParserRuleCall_0_1 = (RuleCall)cValueLocalVarDeclCrossReference_0.eContents().get(1);
		
		////// "var" name=ID ":" type=Type ("=" init=Expr)?;
		////LocalVarDecl:
		//////	('(' args+=DeclaredParameter (',' args+=DeclaredParameter)* ')')?
		////	{LocalVarDecl} "var" name=ID ("(" sig=[Signature] ")")? ("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ("="
		////	definition=BigraphExpression ";");
		//BigraphVarReference:
		//	value=[LocalVarDecl|BigraphVarReferenceID];
		@Override public ParserRule getRule() { return rule; }
		
		//value=[LocalVarDecl|BigraphVarReferenceID]
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//[LocalVarDecl|BigraphVarReferenceID]
		public CrossReference getValueLocalVarDeclCrossReference_0() { return cValueLocalVarDeclCrossReference_0; }
		
		//BigraphVarReferenceID
		public RuleCall getValueLocalVarDeclBigraphVarReferenceIDParserRuleCall_0_1() { return cValueLocalVarDeclBigraphVarReferenceIDParserRuleCall_0_1; }
	}
	public class AbstractBigraphDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.AbstractBigraphDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBigraphVarReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodeExpressionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLVD2ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//////(DeclaredParameter | 
		//AbstractBigraphDeclaration:
		//	BigraphVarReference | NodeExpressionCall | LVD2;
		@Override public ParserRule getRule() { return rule; }
		
		////	NodeExpression //| BigraphVarReference
		//BigraphVarReference | NodeExpressionCall | LVD2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////	NodeExpression //| BigraphVarReference
		//BigraphVarReference
		public RuleCall getBigraphVarReferenceParserRuleCall_0() { return cBigraphVarReferenceParserRuleCall_0; }
		
		//NodeExpressionCall
		public RuleCall getNodeExpressionCallParserRuleCall_1() { return cNodeExpressionCallParserRuleCall_1; }
		
		//LVD2
		public RuleCall getLVD2ParserRuleCall_2() { return cLVD2ParserRuleCall_2; }
	}
	public class NodeExpressionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.NodeExpressionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cValueControlVariableCrossReference_0_0 = (CrossReference)cValueAssignment_0.eContents().get(0);
		private final RuleCall cValueControlVariableFQNParserRuleCall_0_0_1 = (RuleCall)cValueControlVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLinksAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLinksLinkNamesParserRuleCall_1_1_0 = (RuleCall)cLinksAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//NodeExpressionCall:
		//	value=[ControlVariable|FQN] ('[' links+=LinkNames* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=[ControlVariable|FQN] ('[' links+=LinkNames* ']')?
		public Group getGroup() { return cGroup; }
		
		//value=[ControlVariable|FQN]
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//[ControlVariable|FQN]
		public CrossReference getValueControlVariableCrossReference_0_0() { return cValueControlVariableCrossReference_0_0; }
		
		//FQN
		public RuleCall getValueControlVariableFQNParserRuleCall_0_0_1() { return cValueControlVariableFQNParserRuleCall_0_0_1; }
		
		//('[' links+=LinkNames* ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//links+=LinkNames*
		public Assignment getLinksAssignment_1_1() { return cLinksAssignment_1_1; }
		
		//LinkNames
		public RuleCall getLinksLinkNamesParserRuleCall_1_1_0() { return cLinksLinkNamesParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class BigraphExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.BigraphExpression");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Call:
		////	var=[Signature] "." op=[ControlDef];
		//BigraphExpression:
		//	Addition;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperatorBinaryParallelOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		////Addition returns BigraphExpression:
		////	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '||') right=Multiplication)*;
		////
		////Multiplication returns BigraphExpression:
		////	PrimaryExpression (({Multi.left=current} '.' | {Div.left=current} '*') right=PrimaryExpression)*;
		////	
		//Addition BigraphExpression:
		//	Multiplication (({Plus.left=current} operator=BinaryParallelOperator) right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication (({Plus.left=current} operator=BinaryParallelOperator) right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(({Plus.left=current} operator=BinaryParallelOperator) right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} operator=BinaryParallelOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0() { return cPlusLeftAction_1_0_0; }
		
		//operator=BinaryParallelOperator
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//BinaryParallelOperator
		public RuleCall getOperatorBinaryParallelOperatorEnumRuleCall_1_0_1_0() { return cOperatorBinaryParallelOperatorEnumRuleCall_1_0_1_0; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperatorBinaryNestingOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication BigraphExpression:
		//	PrimaryExpression (({Multi.left=current} operator=BinaryNestingOperator) right=PrimaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression (({Multi.left=current} operator=BinaryNestingOperator) right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//(({Multi.left=current} operator=BinaryNestingOperator) right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Multi.left=current} operator=BinaryNestingOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0() { return cMultiLeftAction_1_0_0; }
		
		//operator=BinaryNestingOperator
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//BinaryNestingOperator
		public RuleCall getOperatorBinaryNestingOperatorEnumRuleCall_1_0_1_0() { return cOperatorBinaryNestingOperatorEnumRuleCall_1_0_1_0; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cBigraphExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cAbstractBigraphDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryExpression BigraphExpression:
		//	'(' BigraphExpression ')' | AbstractBigraphDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' BigraphExpression ')' | AbstractBigraphDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' BigraphExpression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//BigraphExpression
		public RuleCall getBigraphExpressionParserRuleCall_0_1() { return cBigraphExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		////	{BigraphLiteral} value=AbstractBigraphDeclaration
		//AbstractBigraphDeclaration
		public RuleCall getAbstractBigraphDeclarationParserRuleCall_1() { return cAbstractBigraphDeclarationParserRuleCall_1; }
	}
	public class MainDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.MainDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMainDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionAbstractMainStatementsParserRuleCall_1_0 = (RuleCall)cDefinitionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////terminal CHAR: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö');
		////terminal BASICID: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö')*;
		////terminal STRING: '"' -> '"';
		////terminal WS: (' '|'\t')+;
		////terminal ANY_OTHER: .;
		//MainDeclaration:
		//	{MainDeclaration} definition=AbstractMainStatements ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{MainDeclaration} definition=AbstractMainStatements ';'
		public Group getGroup() { return cGroup; }
		
		//{MainDeclaration}
		public Action getMainDeclarationAction_0() { return cMainDeclarationAction_0; }
		
		//definition=AbstractMainStatements
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }
		
		//AbstractMainStatements
		public RuleCall getDefinitionAbstractMainStatementsParserRuleCall_1_0() { return cDefinitionAbstractMainStatementsParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class AbstractMainStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.AbstractMainStatements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBigraphVarReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrintLnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractMainStatements:
		//	BigraphVarReference | PrintLn;
		@Override public ParserRule getRule() { return rule; }
		
		//BigraphVarReference | PrintLn
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BigraphVarReference
		public RuleCall getBigraphVarReferenceParserRuleCall_0() { return cBigraphVarReferenceParserRuleCall_0; }
		
		//PrintLn
		public RuleCall getPrintLnParserRuleCall_1() { return cPrintLnParserRuleCall_1; }
	}
	public class PrintLnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.PrintLn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintlnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextPrintableExpressionParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PrintLn:
		//	'println' '(' text=PrintableExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'println' '(' text=PrintableExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'println'
		public Keyword getPrintlnKeyword_0() { return cPrintlnKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//text=PrintableExpression
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//PrintableExpression
		public RuleCall getTextPrintableExpressionParserRuleCall_2_0() { return cTextPrintableExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PrintableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.PrintableExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBigraphVarReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrintableExpression:
		//	STRING | BigraphVarReference;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | BigraphVarReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//BigraphVarReference
		public RuleCall getBigraphVarReferenceParserRuleCall_1() { return cBigraphVarReferenceParserRuleCall_1; }
	}
	
	public class BinaryParallelOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.BinaryParallelOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNSETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNSETUNSETKeyword_0_0 = (Keyword)cUNSETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMERGEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMERGEVerticalLineKeyword_1_0 = (Keyword)cMERGEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPARALLELEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPARALLELVerticalLineVerticalLineKeyword_2_0 = (Keyword)cPARALLELEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BinaryParallelOperator:
		//	UNSET | MERGE='|' | PARALLEL='||';
		public EnumRule getRule() { return rule; }
		
		//UNSET | MERGE='|' | PARALLEL='||'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNSET
		public EnumLiteralDeclaration getUNSETEnumLiteralDeclaration_0() { return cUNSETEnumLiteralDeclaration_0; }
		
		//"UNSET"
		public Keyword getUNSETUNSETKeyword_0_0() { return cUNSETUNSETKeyword_0_0; }
		
		//MERGE='|'
		public EnumLiteralDeclaration getMERGEEnumLiteralDeclaration_1() { return cMERGEEnumLiteralDeclaration_1; }
		
		//'|'
		public Keyword getMERGEVerticalLineKeyword_1_0() { return cMERGEVerticalLineKeyword_1_0; }
		
		//PARALLEL='||'
		public EnumLiteralDeclaration getPARALLELEnumLiteralDeclaration_2() { return cPARALLELEnumLiteralDeclaration_2; }
		
		//'||'
		public Keyword getPARALLELVerticalLineVerticalLineKeyword_2_0() { return cPARALLELVerticalLineVerticalLineKeyword_2_0; }
	}
	public class BinaryNestingOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.BinaryNestingOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNSET2EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNSET2UNSET2Keyword_0_0 = (Keyword)cUNSET2EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNESTINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNESTINGHyphenMinusKeyword_1_0 = (Keyword)cNESTINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPOSITIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOMPOSITIONAsteriskKeyword_2_0 = (Keyword)cCOMPOSITIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BinaryNestingOperator:
		//	UNSET2 | NESTING='-' | COMPOSITION='*' //we cannot use a simple '.' right now
		//;
		public EnumRule getRule() { return rule; }
		
		//UNSET2 | NESTING='-' | COMPOSITION='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNSET2
		public EnumLiteralDeclaration getUNSET2EnumLiteralDeclaration_0() { return cUNSET2EnumLiteralDeclaration_0; }
		
		//"UNSET2"
		public Keyword getUNSET2UNSET2Keyword_0_0() { return cUNSET2UNSET2Keyword_0_0; }
		
		//NESTING='-'
		public EnumLiteralDeclaration getNESTINGEnumLiteralDeclaration_1() { return cNESTINGEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getNESTINGHyphenMinusKeyword_1_0() { return cNESTINGHyphenMinusKeyword_1_0; }
		
		//COMPOSITION='*'
		public EnumLiteralDeclaration getCOMPOSITIONEnumLiteralDeclaration_2() { return cCOMPOSITIONEnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getCOMPOSITIONAsteriskKeyword_2_0() { return cCOMPOSITIONAsteriskKeyword_2_0; }
	}
	public class ControlTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tudresden.inf.st.bigraphs.dsl.BDSL.ControlType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cATOMICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cATOMICAtomicKeyword_0_0 = (Keyword)cATOMICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cACTIVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cACTIVEActiveKeyword_1_0 = (Keyword)cACTIVEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPASSIVEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPASSIVEPassiveKeyword_2_0 = (Keyword)cPASSIVEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ControlType:
		//	ATOMIC='atomic' | ACTIVE='active' | PASSIVE='passive';
		public EnumRule getRule() { return rule; }
		
		//ATOMIC='atomic' | ACTIVE='active' | PASSIVE='passive'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ATOMIC='atomic'
		public EnumLiteralDeclaration getATOMICEnumLiteralDeclaration_0() { return cATOMICEnumLiteralDeclaration_0; }
		
		//'atomic'
		public Keyword getATOMICAtomicKeyword_0_0() { return cATOMICAtomicKeyword_0_0; }
		
		//ACTIVE='active'
		public EnumLiteralDeclaration getACTIVEEnumLiteralDeclaration_1() { return cACTIVEEnumLiteralDeclaration_1; }
		
		//'active'
		public Keyword getACTIVEActiveKeyword_1_0() { return cACTIVEActiveKeyword_1_0; }
		
		//PASSIVE='passive'
		public EnumLiteralDeclaration getPASSIVEEnumLiteralDeclaration_2() { return cPASSIVEEnumLiteralDeclaration_2; }
		
		//'passive'
		public Keyword getPASSIVEPassiveKeyword_2_0() { return cPASSIVEPassiveKeyword_2_0; }
	}
	
	private final BRSModelElements pBRSModel;
	private final BRSModelImportElements pBRSModelImport;
	private final FQNElements pFQN;
	private final FqnWithWildCardElements pFqnWithWildCard;
	private final BigraphVarReferenceIDElements pBigraphVarReferenceID;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	private final AbstractElementElements pAbstractElement;
	private final MainElementElements pMainElement;
	private final SignatureElements pSignature;
	private final ControlDefElements pControlDef;
	private final ArityValueElements pArityValue;
	private final NameConstantElements pNameConstant;
	private final LinkNamesElements pLinkNames;
	private final SiteVarsElements pSiteVars;
	private final LVD2Elements pLVD2;
	private final LocalVarDeclElements pLocalVarDecl;
	private final BigraphVarReferenceElements pBigraphVarReference;
	private final AbstractBigraphDeclarationElements pAbstractBigraphDeclaration;
	private final NodeExpressionCallElements pNodeExpressionCall;
	private final BigraphExpressionElements pBigraphExpression;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final MainDeclarationElements pMainDeclaration;
	private final AbstractMainStatementsElements pAbstractMainStatements;
	private final PrintLnElements pPrintLn;
	private final PrintableExpressionElements pPrintableExpression;
	private final BinaryParallelOperatorElements eBinaryParallelOperator;
	private final BinaryNestingOperatorElements eBinaryNestingOperator;
	private final ControlTypeElements eControlType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBRSModel = new BRSModelElements();
		this.pBRSModelImport = new BRSModelImportElements();
		this.pFQN = new FQNElements();
		this.pFqnWithWildCard = new FqnWithWildCardElements();
		this.pBigraphVarReferenceID = new BigraphVarReferenceIDElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pMainElement = new MainElementElements();
		this.pSignature = new SignatureElements();
		this.pControlDef = new ControlDefElements();
		this.pArityValue = new ArityValueElements();
		this.pNameConstant = new NameConstantElements();
		this.pLinkNames = new LinkNamesElements();
		this.pSiteVars = new SiteVarsElements();
		this.pLVD2 = new LVD2Elements();
		this.pLocalVarDecl = new LocalVarDeclElements();
		this.pBigraphVarReference = new BigraphVarReferenceElements();
		this.pAbstractBigraphDeclaration = new AbstractBigraphDeclarationElements();
		this.pNodeExpressionCall = new NodeExpressionCallElements();
		this.pBigraphExpression = new BigraphExpressionElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pMainDeclaration = new MainDeclarationElements();
		this.pAbstractMainStatements = new AbstractMainStatementsElements();
		this.pPrintLn = new PrintLnElements();
		this.pPrintableExpression = new PrintableExpressionElements();
		this.eBinaryParallelOperator = new BinaryParallelOperatorElements();
		this.eBinaryNestingOperator = new BinaryNestingOperatorElements();
		this.eControlType = new ControlTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.tudresden.inf.st.bigraphs.dsl.BDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////types are in italic font
	//BRSModel:
	//	signature+=Signature* (statements+=AbstractElement* & main=MainElement);
	public BRSModelElements getBRSModelAccess() {
		return pBRSModel;
	}
	
	public ParserRule getBRSModelRule() {
		return getBRSModelAccess().getRule();
	}
	
	//BRSModelImport:
	//	'import' importedNamespace=FqnWithWildCard;
	public BRSModelImportElements getBRSModelImportAccess() {
		return pBRSModelImport;
	}
	
	public ParserRule getBRSModelImportRule() {
		return getBRSModelImportAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//FqnWithWildCard:
	//	FQN '.*'?;
	public FqnWithWildCardElements getFqnWithWildCardAccess() {
		return pFqnWithWildCard;
	}
	
	public ParserRule getFqnWithWildCardRule() {
		return getFqnWithWildCardAccess().getRule();
	}
	
	//BigraphVarReferenceID hidden():
	//	'$' FQN;
	public BigraphVarReferenceIDElements getBigraphVarReferenceIDAccess() {
		return pBigraphVarReferenceID;
	}
	
	public ParserRule getBigraphVarReferenceIDRule() {
		return getBigraphVarReferenceIDAccess().getRule();
	}
	
	////returns ecore::EString 
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//AbstractElement:
	//	LocalVarDecl
	//	// and rules
	//;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//MainElement:
	//	"main" "=" '{' {MainLiteral} value+=MainDeclaration* '}' ';';
	public MainElementElements getMainElementAccess() {
		return pMainElement;
	}
	
	public ParserRule getMainElementRule() {
		return getMainElementAccess().getRule();
	}
	
	////creates a signature class with the same name: shortcut for "signature returns signature"
	//Signature:
	//	{Signature}
	//	'signature'
	//	name=ID ('{' controls+=ControlDef+ '}')?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//ControlDef ControlVariable:
	//	{ControlVariable} type=ControlType? 'ctrl' name=ID 'arity' arity=ArityValue ';';
	public ControlDefElements getControlDefAccess() {
		return pControlDef;
	}
	
	public ParserRule getControlDefRule() {
		return getControlDefAccess().getRule();
	}
	
	//ArityValue EInt:
	//	value=EInt;
	public ArityValueElements getArityValueAccess() {
		return pArityValue;
	}
	
	public ParserRule getArityValueRule() {
		return getArityValueAccess().getRule();
	}
	
	////ControlVariable returns bigraph::BNode:
	////	name=ID;
	//NameConstant:
	//	value=EString;
	public NameConstantElements getNameConstantAccess() {
		return pNameConstant;
	}
	
	public ParserRule getNameConstantRule() {
		return getNameConstantAccess().getRule();
	}
	
	//LinkNames:
	//	NameConstant | NameConstant ",";
	public LinkNamesElements getLinkNamesAccess() {
		return pLinkNames;
	}
	
	public ParserRule getLinkNamesRule() {
		return getLinkNamesAccess().getRule();
	}
	
	////TODO: change to linkNamevars or so
	//SiteVars:
	//	name=ID;
	public SiteVarsElements getSiteVarsAccess() {
		return pSiteVars;
	}
	
	public ParserRule getSiteVarsRule() {
		return getSiteVarsAccess().getRule();
	}
	
	////(args+=LVD2)*
	//LVD2:
	//	{LocalVarDecl} "val" name=ID ':' type=[ControlVariable|FQN] '=' "{" definition+=BigraphExpression* "}";
	public LVD2Elements getLVD2Access() {
		return pLVD2;
	}
	
	public ParserRule getLVD2Rule() {
		return getLVD2Access().getRule();
	}
	
	////
	//LocalVarDecl: //	('(' args+=DeclaredParameter (',' args+=DeclaredParameter)* ')')?
	//	"val" {LocalVarDecl} (name=ID ("(" sig=[Signature] ")")? (("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ':'
	//	type=[ControlVariable|FQN])? ("=" "{" //		(args+=LocalVarDecl)*
	//	definition+=BigraphExpression* "}"));
	public LocalVarDeclElements getLocalVarDeclAccess() {
		return pLocalVarDecl;
	}
	
	public ParserRule getLocalVarDeclRule() {
		return getLocalVarDeclAccess().getRule();
	}
	
	////// "var" name=ID ":" type=Type ("=" init=Expr)?;
	////LocalVarDecl:
	//////	('(' args+=DeclaredParameter (',' args+=DeclaredParameter)* ')')?
	////	{LocalVarDecl} "var" name=ID ("(" sig=[Signature] ")")? ("[" siteArgs+=SiteVars (',' siteArgs+=SiteVars)* "]")? ("="
	////	definition=BigraphExpression ";");
	//BigraphVarReference:
	//	value=[LocalVarDecl|BigraphVarReferenceID];
	public BigraphVarReferenceElements getBigraphVarReferenceAccess() {
		return pBigraphVarReference;
	}
	
	public ParserRule getBigraphVarReferenceRule() {
		return getBigraphVarReferenceAccess().getRule();
	}
	
	//////(DeclaredParameter | 
	//AbstractBigraphDeclaration:
	//	BigraphVarReference | NodeExpressionCall | LVD2;
	public AbstractBigraphDeclarationElements getAbstractBigraphDeclarationAccess() {
		return pAbstractBigraphDeclaration;
	}
	
	public ParserRule getAbstractBigraphDeclarationRule() {
		return getAbstractBigraphDeclarationAccess().getRule();
	}
	
	//NodeExpressionCall:
	//	value=[ControlVariable|FQN] ('[' links+=LinkNames* ']')?;
	public NodeExpressionCallElements getNodeExpressionCallAccess() {
		return pNodeExpressionCall;
	}
	
	public ParserRule getNodeExpressionCallRule() {
		return getNodeExpressionCallAccess().getRule();
	}
	
	////Call:
	////	var=[Signature] "." op=[ControlDef];
	//BigraphExpression:
	//	Addition;
	public BigraphExpressionElements getBigraphExpressionAccess() {
		return pBigraphExpression;
	}
	
	public ParserRule getBigraphExpressionRule() {
		return getBigraphExpressionAccess().getRule();
	}
	
	////Addition returns BigraphExpression:
	////	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '||') right=Multiplication)*;
	////
	////Multiplication returns BigraphExpression:
	////	PrimaryExpression (({Multi.left=current} '.' | {Div.left=current} '*') right=PrimaryExpression)*;
	////	
	//Addition BigraphExpression:
	//	Multiplication (({Plus.left=current} operator=BinaryParallelOperator) right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication BigraphExpression:
	//	PrimaryExpression (({Multi.left=current} operator=BinaryNestingOperator) right=PrimaryExpression)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//PrimaryExpression BigraphExpression:
	//	'(' BigraphExpression ')' | AbstractBigraphDeclaration;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	////terminal CHAR: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö');
	////terminal BASICID: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö')*;
	////terminal STRING: '"' -> '"';
	////terminal WS: (' '|'\t')+;
	////terminal ANY_OTHER: .;
	//MainDeclaration:
	//	{MainDeclaration} definition=AbstractMainStatements ';';
	public MainDeclarationElements getMainDeclarationAccess() {
		return pMainDeclaration;
	}
	
	public ParserRule getMainDeclarationRule() {
		return getMainDeclarationAccess().getRule();
	}
	
	//AbstractMainStatements:
	//	BigraphVarReference | PrintLn;
	public AbstractMainStatementsElements getAbstractMainStatementsAccess() {
		return pAbstractMainStatements;
	}
	
	public ParserRule getAbstractMainStatementsRule() {
		return getAbstractMainStatementsAccess().getRule();
	}
	
	//PrintLn:
	//	'println' '(' text=PrintableExpression ')';
	public PrintLnElements getPrintLnAccess() {
		return pPrintLn;
	}
	
	public ParserRule getPrintLnRule() {
		return getPrintLnAccess().getRule();
	}
	
	//PrintableExpression:
	//	STRING | BigraphVarReference;
	public PrintableExpressionElements getPrintableExpressionAccess() {
		return pPrintableExpression;
	}
	
	public ParserRule getPrintableExpressionRule() {
		return getPrintableExpressionAccess().getRule();
	}
	
	//enum BinaryParallelOperator:
	//	UNSET | MERGE='|' | PARALLEL='||';
	public BinaryParallelOperatorElements getBinaryParallelOperatorAccess() {
		return eBinaryParallelOperator;
	}
	
	public EnumRule getBinaryParallelOperatorRule() {
		return getBinaryParallelOperatorAccess().getRule();
	}
	
	//enum BinaryNestingOperator:
	//	UNSET2 | NESTING='-' | COMPOSITION='*' //we cannot use a simple '.' right now
	//;
	public BinaryNestingOperatorElements getBinaryNestingOperatorAccess() {
		return eBinaryNestingOperator;
	}
	
	public EnumRule getBinaryNestingOperatorRule() {
		return getBinaryNestingOperatorAccess().getRule();
	}
	
	//enum ControlType:
	//	ATOMIC='atomic' | ACTIVE='active' | PASSIVE='passive';
	public ControlTypeElements getControlTypeAccess() {
		return eControlType;
	}
	
	public EnumRule getControlTypeRule() {
		return getControlTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
