/**
 * generated by Xtext 2.21.0
 */
package de.tudresden.inf.st.bigraphs.dsl.validation;

import com.google.common.base.Objects;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.BDSLPackage;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.BigraphVarReference;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.LocalVarDecl;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.Signature;
import de.tudresden.inf.st.bigraphs.dsl.bDSL.Site;
import de.tudresden.inf.st.bigraphs.dsl.validation.AbstractBDSLValidator;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.InputOutput;

/**
 * This class contains custom validation rules.
 * 
 * "The other class is a subclass of that abstract class and is generated to the src/ folder in order to be edited by you. That is where you put the constraints in."
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 * 
 * @author Dominik Grzelak
 */
@SuppressWarnings("all")
public class BDSLValidator extends AbstractBDSLValidator {
  public static final String INVALID_NAME = "invalidName";
  
  public static final String CYCLIC_VARIABLE_USAGE = "cyclicBigraphVariable";
  
  public static final String SITE_INDEX_IS_POSITIVE = "siteIndexIsPositive";
  
  @Check
  public void siteIndexIsPositive(final Site siteExpression) {
    int _index = siteExpression.getIndex();
    boolean _lessEqualsThan = (_index <= 0);
    if (_lessEqualsThan) {
      this.warning("The index of a site must be a positive integer", BDSLPackage.Literals.SITE__INDEX, 
        BDSLValidator.SITE_INDEX_IS_POSITIVE);
    }
  }
  
  @Check
  public void checkNoCycleInEntityHierarchy(final BigraphVarReference varDecl) {
    EClass _eClass = varDecl.eContainer().eClass();
    boolean _equals = Objects.equal(_eClass, BDSLPackage.Literals.BRS_MODEL);
    if (_equals) {
      return;
    }
    EObject current = ((EObject) varDecl);
    while (java.util.Objects.nonNull(current)) {
      {
        InputOutput.<String>println(("vcurrent" + current));
        LocalVarDecl _value = varDecl.getValue();
        boolean _equals_1 = Objects.equal(current, _value);
        if (_equals_1) {
          this.warning("Cyclic bigraph variable reference", BDSLPackage.eINSTANCE.getBigraphVarReference_Value());
          return;
        }
        current = current.eContainer();
      }
    }
  }
  
  @Check
  public void checkNameStartsWithCapital(final Signature entity) {
    boolean _isUpperCase = Character.isUpperCase(entity.getName().charAt(0));
    boolean _not = (!_isUpperCase);
    if (_not) {
      this.warning("Signature name should start with a capital", BDSLPackage.Literals.SIGNATURE__NAME, BDSLValidator.INVALID_NAME);
    }
  }
}
